//# <ModuleFileName.h>:  a module for ....
//# Copyright (C) 2003
//# Associated Universities, Inc. Washington DC, USA.
//#
//# This library is free software; you can redistribute it and/or modify it
//# under the terms of the GNU Library General Public License as published by
//# the Free Software Foundation; either version 2 of the License, or (at your
//# option) any later version.
//#
//# This library is distributed in the hope that it will be useful, but WITHOUT
//# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
//# License for more details.
//#
//# You should have received a copy of the GNU Library General Public License
//# along with this library; if not, write to the Free Software Foundation,
//# Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
//#
//# Correspondence concerning AIPS++ should be addressed as follows:
//#        Internet email: aips2-request@nrao.edu.
//#        Postal address: AIPS++ Project Office
//#                        National Radio Astronomy Observatory
//#                        520 Edgemont Road
//#                        Charlottesville, VA 22903-2475 USA
//#
//#! ========================================================================
//#!                Attention!  Programmers read this!
//#!
//#! This file is a template to guide you in creating a header file
//#! for a module.   By following this template, you will create
//#! a permanent reference document for your module, suitable for
//#! the novice client programmer, the seasoned veteran, and anyone in
//#! between It is essential that you write the documentation portions
//#! of this file with as much care as you do the source code.
//#!
//#! This file has some special lexical features which need explanation:
//#!
//#!    -  "replacement" tokens
//#!    -  Comment conventions (in addition to the normal C++ "//")
//#!    -  Markup tags, for the documentation extractor
//#!
//#!
//#!                         Replacement Tokens
//#!                         ------------------
//#!
//#! These are character strings enclosed in angle brackets, on a commented
//#! line.  One is found on the first line of this file:
//#!   <ModuleFileName.h>
//#! You should remove the angle brackets, and modify the characters
//#! with names specific to your class.  Mimic the capitalization
//#! and punctuation of the original.  For example, you would change
//#!
//#!   <ModuleFileName.h>  to   Tables.h
//#!
//#! Another replacement token will be found in the "include guard" just
//#! a few lines below. For this, you would change
//#!
//#!   #define <AIPS_MODULE_FILENAME_H>  to   #define AIPS_TABLES_H
//#!
//#!              Comment conventions used in this file.
//#!              --------------------------------------
//#!
//#! 1. Lines beginning with "//#!" are instructions to you, the reader of
//#!    template-module-h, which explain how to adapt this file to create
//#!    your own module header file.  These explanation lines should *not*
//#!    appear in the the final version of your module header file.
//#! 2. Lines beginning with the shorter sequence "//#" stay in the file
//#!    permanently, but they are ignored by the document extractor and,
//#!    of course, by the compiler.  The license agreement (above) is
//#!    a good example.
//#! 3. Lines beginning with the traditional C++ comment token, "//",
//#!    may include tags to be used by the documentation extractor.
//#!
//#!              Markup tags for the documentation extractor
//#!              -------------------------------------------
//#!
//#! These tags are roughly similar to those found in the well-known
//#! HTML (hyper-text markup language) used on the world-wide-web.
//#! They identify sections of the documentation so that the extractor
//#! (a standard aips++ utility) can manipulate them, and create
//#! programmer documentation.
//#!   (See http://www.cv.nrao.edu/aips++/docs/html/cxx2html.html)
//#! These tags also serve as organizational clues to anyone who
//#! reads the text directly, serving as section titles.
//#!
//#! Tags are set up like this:
//#!
//#!       <tag>  Contents (or body) of tagged section
//#!       </tag>
//#!
//#! Please note that, with few exceptions, all tags are accompanied
//#! by explicit "end tags".  So <summary> must be paired with </summary> and
//#! <src> with </src>.
//#!
//#! Exceptions to this rule:
//#!
//#!  <li>     which identifies "list items".  They are only found in the 
//#!           body of <ul> or <ol> tags, and their implicit end tags are 
//#!           deduced from the surrounding context.
//#!
//#!  <use...> a tag which has no body, only attributes.
//#!
//#!                          ------------
//#!
//#! Here are some of the tags we use:
//#!
//#!   <summary>:           A one line description of this class.
//#!
//#!   <prerequisite>:      Classes or concepts the reader should understand
//#!                        before learning to use this one.
//#!
//#!   <etymology>:         Explains why "ClassName" was selected.
//#!
//#!   <synopsis>:          A medium to long description of this class.
//#!
//#!   <motivation>:        The circumstances which led to the creation of
//#!                        this class.
//#!
//#!   <todo>:              Bugs, missing features, planned extensions.
//#!
//#!   <reviewed>:          By whom, when, and with what test and demo
//#!                        programs.  The body of this tag will contain
//#!                        any comments the reviewer wishes to make.
//#!
//#!   <use...>:            Describes the intended use of the class.  
//#!                        Currently, there is only one attribute, 
//#!                        'visibility' which has the value 'local' 
//#!                        or 'export'.
//#!
//#!   <ul>:                Introduces the beginning of a unnumbered list.
//#!
//#!   <ol>:                Introduces an ordered (numbered) list.
//#!
//#!   <li>:                Indicates one item in a list.
//#!
//#!   <srcblock>:          A section of text -- sample code, for example --
//#!                        that will be presented in a distinct
//#!                        font and without reformatting. This tag should
//#!                        be used for multi-line source code text.
//#!                        (This is for illustrative code only, hidden
//#!                        from the compiler in commet lines.  It is not
//#!                        for real, live C++ code.)
//#!
//#!   <src>:               Just like <srcblock>, but for code fragments
//#!                        which are quite short, quoted "inline" in the
//#!                        midst of regular explanatory comments.
//#!
//#!   <note role=tip>:     Helpful advice for the programmer who will use
//#!                        this class.
//#!
//#!   <note role=caution>: Explains why certain use of the class may be
//#!                        a bit tricky, and needs some care.
//#!
//#!   <note role=warning>: Warns the programmer of dangerous coding practices.
//#!
//#!   <linkto ...>:        This creates a link to an anchor in another
//#!                        document.  
//#!                        Please consult
//#!                   http://www.cv.nrao.edu/aips++/docs/html/cxx2html.html
//#!                        and read the section titled "LINKTO"
//#!
//#!   <linkfrom ...>:      This tag instructs the document extractor to
//#!                        create an anchor in *another* document -- that is,
//#!                        a hyper-text link whose destination is here.
//#!                        There are several attributes to this tag, and
//#!                        there is also the associated <here> tag.
//#!                        Please consult
//#!                   http://www.cv.nrao.edu/aips++/docs/html/cxx2html.html
//#!                        and read the section titled "LINKFROM"
//#!
//#!   <module>             This tag tells the document extractor that
//#!                        the enclosed text describes a set of related
//#!                        classes, organized into their own directory.
//#!                        This tag is found only in module header files,
//#!                        where it encloses  most of the contents
//#!                        of the module header file.  
//#!
//#!   Some tags (i.e., "reviewed" and "todo") have attributes -- key/value
//#!   pairs like this:
//#!
//#!      <reviewed reviewer="Paul Shannon" date="1994/11/10">
//#!       ...comments...
//#!      </reviewed>
//#!
//#!      <todo asof="1994/11/02">
//#!         <li> a needed feature...
//#!      </todo>
//#!
//#!   The keywords (reviewer, date, asof) are fixed.
//#!   Their values ("Paul Shannon", "1994/11/10", "1994/11/02") should be 
//#!   enclosed  in double quotes.  Dates must be in the standard format:
//#!   yyyy/mm/dd.
//#!
//#! ==========================================================================
//#! The following RCS (Revision Control System) identifier serves a dual 
//#! purpose:  it records version control information for the template 
//#! template-module-h,  and (after you delete the appropriate characters) 
//#! it becomes the RCS identifier for *your* module header file.  The 
//#! characters to delete are all those in the RCS Id, below, from the first
//#! colon up to the trailing dollar sign.
//#! (RCS expands the 'Id' token, surrounded by dollar signs, into the file
//#! name, with version number and date of last change.
//#! ==========================================================================
//# $Id$

//#! Create an include guard, containing your module name, in the all
//#! upper case format implied below.  This prevents multiple inclusion
//#! of this header file during pre-processing.
//#!
//#! Note that the leading "AIPS_" identifies the package to which your module
//#! belongs.  Other packages include dish, vlbi, nfra, synthesis, atnf...
//#! If you are contributing a new class to one of these packages, be
//#! sure to replace "AIPS_" with (for instance) "DISH_" or "ATNF_".

#if !defined (<AIPS_MODULE_FILENAME_H>)
#define <AIPS_MODULE_FILENAME_H>

//#! Includes -- List here all of the #includes that implement this module,
//#! and which define classes and functions the programmer needs in order
//#! to use this module.  One of the main purposes of module header files
//#! is to simplify the client programmer's job, so that they only need to
//#!    #include <aips/ModuleFileName.h>
//#! rather than numerous files which might look like this:
//#!    #include <aips/ModuleFileName/ModulePart-n.h> ...
//#!    #include <aips/ModuleFileName/ModuleAspect-n.h> ...

namespace casa { //# NAMESPACE CASA - BEGIN

// <module>
//
// <summary>
//#! A one line summary of the module.   This summary (shortened a bit
//#! if necessary so that it fits along with the "ModuleFileName.h" in 75
//#! characters) should also appear as the first line of this file.
// </summary>

// <prerequisite>
//#! Modules, classes or concepts you should understand before using this
//#! module
//   <li> SomeModule
//   <li> SomeClass
//   <li> some concept (perhaps with reference)
// </prerequisite>
//

// <reviewed reviewer="" date="yyyy/mm/dd" demos="">
//#!
//#! for example:
//#!  <reviewed reviewer="Paul Shannon, pshannon@nrao.edu" date="1994/10/10" demos="dModuleName.cc, d1ModuleName.cc">
//#!  In the long term, it will probably be useful to add fooBar
//#!  and BarFoo functionality to the classes in this module...
//#!  </reviewed>
//#!
//#! (In time, the documentation extractor will be able handle reviewed
//#! attributes spread over more than one line.)
//#!
//#! See "Coding Standards and Guidelines" AIPS++ note 167 for a full
//#! explanation.
//#!
//#! It is up to the author (the programmer) to fill in these fields:
//#!     tests, demos
//#! The reviewer fills in
//#!     reviewer, date
//#!
// </reviewed>

// <etymology>
//#! Except when it is obvious (e.g., "Arrays") explain how the module name
//#! expresses the role of this module.  Example: IPosition is short for
//#! "Integral Position" - a specialized integer vector for specifying
//#! array dimensions and indices.
// </etymology>
//
// <synopsis>
//#! What does the module do?  How?  For whom?   This should include code
//#! fragments as appropriate to support text. Code fragments shall be
//#! delimited by <srcblock> </srcblock> tags.  The synopsis section will
//#! usually be dozens of lines long.
// </synopsis>
//
// <example>
//#! One to many concise (~10-40 lines) examples, with a modest amount of
//#! text to support code fragments.   Use <srcblock> and </srcblock> to
//#! delimit example code.
// </example>
//
// <motivation>
//#! Insight into a module is often provided by a description of the
//#! circumstances that led to its conception and design.  Describe
//#! them here.
// </motivation>

// <todo asof="yyyy/mm/dd">
//#! A List of bugs, limitations, extensions or planned refinements.
//#! The programmer should fill in a date in the "asof" field, which
//#! will usually be the date at which the class is submitted for review.
//#! If, during the review, new "todo" items come up, then the "asof"
//#! date should be changed to the end of the review period.
//   <li> add this feature
//   <li> fix this bug
//   <li> discuss possible extension
// </todo>

//#! The module header file can be a big convenience to client programmers,
//#! because it allows them to use classes without studying them closely.
//#! But you -- the author of the module -- may want to notify the client
//#! programmer of some of the circumstances in which they *should* look
//#! more deeply, and get some understanding of the individual classes
//#! that make up the module.  The <note role={tip,caution,warning}> tags
//#! will be useful for this, for example:
//#!
//#!   <note role=tip>
//#!      See  Foo.h if you want to fully understand all of the options
//#!      available for creating Foo objects.
//#!   </note>
//#!
//#!   <note role=warning> Don't even think about iterating through
//#!     large Foo objects (80 MB or more) without first consulting
//#!     FooIterator.h!
//#!   </note>
//#!

// </module>

} //# NAMESPACE CASA - END

#endif
