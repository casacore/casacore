#!/bin/sh
#-----------------------------------------------------------------------------
# ai: Check in AIPS++ sources
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1992-1996,1998,1999
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# Usage: ai [-ae] [-af] [-au] [options for ci] file1 [file2,...]
#-----------------------------------------------------------------------------
# ai inserts source files from the current directory into the AIPS++ code
# repository.  The filename arguments must be simple filenames without path
# or RCS (,v) suffix.
#
# 'ai' first updates the master AIPS++ RCS repository by executing
# $AIPSMSTR/etc/ai_master, where $AIPSMSTR is expected to be NFS mounted
# from the AIPS++ master host (aips2.nrao.edu).
#
# Code checked into the master repository will have the file ownership defined
# by the owner of the $AIPSMSTR/etc/ai_master script (aips2adm) which must be
# setuid.
#
# If the "-au" option is specified, then after checking the code into the
# master, 'ai' copies the RCS version file back to the slave RCS repository
# (if it exists), giving it a file ownership defined by the owner of 'ai'
# (aips2mgr at the remote site), which must itself be setuid.  If this
# completed successfully, 'ai' then checks out a plain-text copy of the code
# from the AIPS++ rcs directory into the corresponding code directory.
#
# Directories may also be created on the master by "checking them in".  In
# this case the options for 'ci' are ignored.
#
# Options:
#   -ae    Clean out any pre-existing RCS semaphore files.
#   -af    Force checkin even if the file doesn't exist.
#   -au    Update the slave repository after the checkin.
#
#   -I     These options (without revision number) are passed directly to
#   -l     'ci', all other options are defeated.
#   -r     
#   -u     
#   -w<login>
#
# Status returns:
#    0:  success
#    1:  initialization error
#    2:  checkin failure
#    3:  checked in ok to master, but slave not updated
#    4:  code not updated
#    5:  directory creation failed
#
# Notes:
#    1) 
#
# Original: 1992/04/28 by Mark Calabretta, ATNF
# $Id$
#=============================================================================
# Fundamentals.
  if [ "$AIPSPATH" = "" ]
  then
     echo "ai: AIPSPATH is not defined, abort!" 1>&2
     exit 1
  fi

# Check that if defined, TMP is a writable directory.
  if [ "$TMP" != "" ]
  then
     if [ ! -d "$TMP" -o ! -w "$TMP" ]
     then
        echo "ai: TMP is not defined as a writable directory, abort!" 1>&2
        exit 1
     fi
  fi

  AIPSROOT=`echo $AIPSPATH | awk '{ print $1 }'`

# Define AIPS++ directory names.
  AIPSMSTR=$AIPSROOT/master
  MSTRETCD=$AIPSMSTR/etc
  AIPSLAVE=$AIPSROOT/slave
  AIPSRCS=$AIPSROOT/rcs

# Check number of arguments.
  if [ "$#" = 0 ]
  then
     exec 1>&2
     echo "Usage: ai [-ae] [-af] [-au] [options for ci] file1 [file2,...]"
     echo "       Consult the AIPS++ System manual for usage and options."
     exit 1
  fi

# Get the master directory.
  MSTRDIR=`pwd | sed -e 's#/code$#/code/#' -e "s#.*/code/#$AIPSMSTR/#"`

# Make sure we've got something sensible.
  echo $MSTRDIR | grep "^$AIPSMSTR" > /dev/null 2>&1
  if [ "$?" != 0 ]
  then
     exec 1>&2
     echo "ai: Invalid work directory - `pwd`"
     echo "    Consult the AIPS++ System manual for usage and options."
     exit 1
  fi

# Get working directory names.
  SLAVDIR=`echo $MSTRDIR | sed -e 's#/master#/slave#'`
  RCSDIR=`echo $MSTRDIR | sed -e 's#/master#/rcs#'`
  CODEDIR=`echo $MSTRDIR | sed -e 's#/master#/code#'`

# Check that the master directories are accessible.
  while [ ! -f "$MSTRETCD/ai_master" ]
  do
     echo "ai: $AIPSMSTR is not responding, trying..." 1>&2
     sleep 15
  done

# The current year, used in testing for a valid copyright notice.
  if [ -f "$MSTRDIR/.oc" ]
  then
#    Override copyright test.
     YEAR=""
  else
     YEAR=`adate | sed -e 's/... \(....\).*/\1/'`
  fi

# Regular expressions used in testing the copyright notice.
# ...whitespace
  WS='[\ \	]*'
# ...what a copyright notice looks like
  CN="[Cc]opyright$WS.*$WS[12][90][90][0-9][-\	\ ,0-9]*"
# ...what it looks like if it's up-to-date
  CY="[Cc]opyright$WS.*$WS[-\	\ ,0-9]*$YEAR[\ ,\	]*"


# Get options and file names.
  EXTRICATE=""
  FORCE=""
  OPTS=""
  TARGETS=""
  UPDATE=""
  for i
  do
     case $i in
     -ae)
        EXTRICATE=1
        ;;

     -af)
        FORCE=1
        ;;

     -au)
        UPDATE=1
        ;;

     -oc)
        YEAR=""
        ;;

     -I | -l | -r | -u | -w*)
        OPTS="$OPTS $i"
        ;;

     -*)
#       Defeat all other options.
        echo "ai: Defeated option $i"
        ;;

     */*)
        echo "ai: Pathnames are not allowed!  Ignored $i"
        ;;

     *,v)
        echo "ai: Specify a simple filename!  Ignored $i"
        ;;

     *)
        if [ -f $i ]
        then
#          Check file permissions.
           if [ "`find $i -perm -440 -print`" = "" ]
           then
              asme "chmod ug+r $i"
              if [ "$?" != 0 ]
              then
                 echo "ai: $i does not have read permission for user and" \
                      "group, skipping."
                 continue
              fi
           fi

#          Update the date in the copyright notice if necessary.
           egrep -i "$CN$|$CN\Associated Universities" $i > /dev/null 2>&1
           if [ "$?" = 0 ]
           then
#             It has a recognized copyright notice but is it current?
              egrep -i "$CY$|$CY\Associated Universities" $i > /dev/null 2>&1
              if [ "$?" = 1 ]
              then
#                Update it.
                 trap "rm -f /tmp/ai.$$" 1 2 3 15

                 sed \
                    -e "/${CN}\$/b sub" \
                    -e "/${CN}Associated Universities/b sub" \
                    -e "b" \
                    -e ": sub" \
                    -e "s/[Cc]opyright$WS\([^ 	]*\)$WS/Copyright \1 /g" \
                    -e "s/\(${CN}\)/\1,$YEAR /" \
                    -e "s/\([0-9]\)[, 	][, 	]*\([12]\)/\1,\2/g" \
                    -e "s/\([0-9]\)[- 	][- 	]*\([12]\)/\1-\2/g" \
                    -e "s/$WS\$//" $i > /tmp/ai.$$

                 cmp -s /tmp/ai.$$ $i
                 if [ "$?" = 1 ]
                 then
                    echo "Updated copyright notice for $i"
                    diff /tmp/ai.$$ $i
                    asme "cat /tmp/ai.$$ > $i"
                 fi

                 rm -f /tmp/ai.$$
              fi
           fi
        fi

        TARGETS="$TARGETS $i"
        ;;
     esac
  done

# Check that we got something.
  [ "$TARGETS" = "" ] && exit 1


# File permission mask for RCS files.
  umask 002


# Are checkins disabled?
  if [ -f "$MSTRETCD/ai_disable" ]
  then
     if [ -s "$MSTRETCD/ai_disable" ]
     then
        cat $MSTRETCD/ai_disable
        echo ""
     fi

     echo "ai: Checkins are currently disabled, try again later." 1>&2
     exit 2
  fi

# Prevent checkins by "aips2mgr".
  AIPS2MGR=`getrc -i account.manager 2> /dev/null`
  MGRACCNT=`echo $AIPS2MGR | sed -e 's/\..*//'`
  if [ "${LOGNAME-$USER}" = "$MGRACCNT" ]
  then
     echo "ai: Checkins by \"$MGRACCNT\" are not permitted." 1>&2
     exit 2
  fi

# Construct the symbolic version name.
  SYMVER=`sed -e 's/ .*//' $AIPSMSTR/VERSION`
  MAJVER=`echo $SYMVER | awk -F. '{ print $1 }'`
  MINVER=`echo $SYMVER | awk -F. '{ print $2 }'`
  MINVER=`expr $MINVER + 1001 | sed -e 's/^1//'`
  SYMVER=`echo v$SYMVER | sed -e "s/\....\./-$MINVER-/"`
  OPTS="-r$MAJVER $OPTS -N$SYMVER"

  for TARGET in $TARGETS
  do
     if [ -f $TARGET ]
     then
#       Remove any leftover RCS semaphore file?
        [ "$EXTRICATE" != "" ] && ae $TARGET

#       Check the file into the master.
        $MSTRETCD/ai_master $OPTS $TARGET $MSTRDIR/$TARGET,v
        if [ "$?" != 0 ]
        then
           echo "ai: Failed to check $TARGET into the master, abort!" 1>&2
           exit 2
        fi

#       Sanity check.
        if [ ! -f "$MSTRDIR/$TARGET,v" ]
        then
           echo "ai: $MSTRDIR/$TARGET,v not found, abort!" 1>&2
           exit 2
        fi

#       Don't update the slave unless explicitly requested.
        [ "$UPDATE" = "" ] && continue

#       Update $AIPSLAVE if it exists.
        if [ -d "$AIPSLAVE" ]
        then
#          Change file permission before attempting to overwrite.
           if [ -f "$SLAVDIR/$TARGET,v" ]
           then
              chmod +w "$SLAVDIR/$TARGET,v" 2> /dev/null || \
                 rm -f "$SLAVDIR/$TARGET,v"
           fi

#          Check that the slave directory exists.
           if [ ! -d "$SLAVDIR" ]
           then
              echo "ai: Slave directory doesn't exist, abort!" 1>&2
              echo "    $SLAVEDIR" 1>&2
              exit 3
           fi

#          Try to copy it.
           cp $MSTRDIR/$TARGET,v $SLAVDIR/$TARGET,v
           if [ "$?" != 0 ]
           then
              echo "ai: Failed to update $AIPSLAVE with $TARGET, abort!" 1>&2
              exit 3
           fi

           echo ""
           echo "ai: Updated the slave repository."
        fi

#       Update the code directory, read-only.
        [ -f "$CODEDIR/$TARGET" ] && rm -f $CODEDIR/$TARGET
        (co -p $RCSDIR/$TARGET,v > $CODEDIR/$TARGET && chmod a-wx $CODEDIR/$TARGET)
        [ "$?" != 0 ] && exit 4

     elif [ -d "$TARGET" ]
     then
#       Prevent creation of RCS directories (a common mistake).
        if [ "$TARGET" = RCS ]
        then
           echo "ai: Skipping checkin of RCS subdirectory."
           continue
        fi

#       Create the directory on the master.
        if [ ! -d "$MSTRDIR/$TARGET" ]
        then
           $MSTRETCD/ai_master $MSTRDIR/$TARGET
           if [ "$?" != 0 ]
           then
              exec 1>&2
              echo "ai: Failed to create master directory $TARGET, abort!"
              exit 5
           fi
           echo "Created directory $MSTRDIR/$TARGET"
        else
           echo "ai: Master directory $TARGET already exists."
        fi

#       Don't update the slave unless explicitly requested.
        [ "$UPDATE" = "" ] && continue

#       Create the directory on the slave.
        if [ ! -d "$SLAVDIR/$TARGET" ]
        then
           mkdir $SLAVDIR/$TARGET
           if [ "$?" != 0 ]
           then
              echo "ai: Failed to create slave directory $TARGET, abort!" 1>&2
              exit 5
           fi

           chmod ug=rwx,g+s,o=rx $SLAVDIR/$TARGET
           echo "Created directory $SLAVDIR/$TARGET"
        else
           echo "ai: Slave directory $TARGET already exists."
        fi

#       Create the code directory.
        if [ ! -d "$CODEDIR/$TARGET" ]
        then
           mkdir $CODEDIR/$TARGET
           if [ "$?" != 0 ]
           then
              echo "ai: Failed to create code directory $TARGET, abort!" 1>&2
              exit 5
           fi

           chmod ug=rwx,g+s,o=rx $SLAVDIR/$TARGET
           echo "Created directory $CODEDIR/$TARGET"
        else
           echo "ai: Code directory $TARGET already exists."
        fi

#       Create the RCS symlink.
        if [ ! -d "$CODEDIR/$TARGET/RCS" ]
        then
           ln -s $SLAVDIR/$TARGET $CODEDIR/$TARGET/RCS
           echo "Created symlink $CODEDIR/$TARGET/RCS -> $SLAVDIR/$TARGET"
        else
           echo "ai: Code RCS symlink for directory $TARGET already exists."
        fi

     elif [ "$FORCE" != "" ]
     then
#       Create a new empty RCS version file on the master.
        $MSTRETCD/ai_master nofile $MSTRDIR/$TARGET,v
        if [ "$?" != 0 ]
        then
           echo "ai: Failed to create $TARGET on the master, abort!" 1>&2
           exit 2
        fi

#       Sanity check.
        if [ ! -f "$MSTRDIR/$TARGET,v" ]
        then
           echo "ai: $MSTRDIR/$TARGET,v not created, abort!" 1>&2
           exit 2
        fi

     else
        echo "ai: \"$TARGET\" does not exist, skipping."
        continue
     fi
  done


  exit 0
