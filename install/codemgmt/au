#!/bin/sh
#-----------------------------------------------------------------------------
# au: Update AIPS++ sources from the master
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1992,1993,1994,1995,1996
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# Usage: au <file or directory> ...
#-----------------------------------------------------------------------------
# au updates the AIPS++ slave and code areas with the lastest version of a
# file or directory in $AIPSMSTR.  au assumes that the AIPS++ master is NFS
# mounted on $AIPSROOT/master.
#
# au copies RCS version files from the master to the slave RCS repository
# giving them a file ownership defined by the owner of au, which must itself
# be setuid.  If successful, au will then check out a plain-text copy of the
# code from AIPS++ slave area into the code area.
#
# Files must be specified as simple filenames without path.
#
# Status returns:
#    0:  initialization succeeded
#    1:  initialization error
#
# Original: 1992/04/30 by Mark Calabretta, ATNF
# $Id$
#=============================================================================
# Fundamentals.
  if [ ! "$AIPSPATH" ]
  then
     echo "au: AIPSPATH is not defined, abort!" 1>&2
     exit 1
  fi

  AIPSROOT=`echo $AIPSPATH | awk '{print $1}'`

# Check number of arguments.
  if [ $# = 0 ]
  then
     echo "Usage: au <file or directory> ..." 1>&2
     exit 1
  fi

# Get working directory names.
  AIPSMSTR=$AIPSROOT/master
  AIPSLAVE=$AIPSROOT/slave
  MSTRETCD=$AIPSMSTR/etc
  MSTRDIR=`pwd | sed -e 's#/code$#/code/#' -e "s#.*/code/#$AIPSMSTR/#"`
  SLAVDIR=`echo $MSTRDIR | sed -e 's#/master#/slave#'`
  CODEDIR=`echo $SLAVDIR | sed -e 's#/slave#/code#'`

# Make sure we've got something sensible.
  echo $SLAVDIR | grep "^$AIPSLAVE" > /dev/null 2>&1
  if [ "$?" != 0 ]
  then
     echo "au: Invalid work directory - `pwd`" 1>&2
     exit 1
  fi

# Check that the slave directory exists.
  if [ ! -d "$SLAVDIR" ]
  then
     echo "au: Slave directory doesn't exist, abort!" 1>&2
     echo "    $SLAVDIR" 1>&2
     exit 1
  fi

  cd $SLAVDIR
  if [ "$?" != 0 ]
  then
     echo "au: Couldn't change to $SLAVDIR, abort!" 1>&2
     exit 1
  fi

# File permission mask for RCS files.
  umask 002


# Check that the master directories are accessible.
  while [ ! -f "$MSTRETCD/ao_master" ]
  do
     echo "au: $AIPSMSTR is not responding, trying..." 1>&2
     sleep 15
  done

  for TARGET
  do
#    Get the basic filename.
     case $TARGET in
     */*)
        echo "au: Pathnames are not allowed!  Ignored $TARGET" 1>&2
        continue
        ;;
     *,v)
        TARGET=`echo $TARGET | sed -e 's#,v$##'`
        ;;
     esac

     if [ -f "$MSTRDIR/$TARGET,v" ]
     then
#       Change file permission before attempting to overwrite.
        if [ -f "$SLAVDIR/$TARGET,v" ]
        then
           chmod +w "$SLAVDIR/$TARGET,v" 2> /dev/null ||
              rm -f "$SLAVDIR/$TARGET,v" 
        fi

#       Try to copy it.
        cp $MSTRDIR/$TARGET,v $SLAVDIR/$TARGET,v ||
           echo "au: Failed to update $SLAVDIR/$TARGET,v" 1>&2

#       Update the code directory, read-only.
        [ -f "$CODEDIR/$TARGET" ] && rm -f $CODEDIR/$TARGET
        (co -p $SLAVDIR/$TARGET,v > $CODEDIR/$TARGET &&
         chmod a-wx $CODEDIR/$TARGET) ||
           echo "au: Failed to update $CODEDIR/$TARGET" 1>&2

     elif [ -d "$MSTRDIR/$TARGET" ]
     then
#       Create the directory on the slave.
        if [ ! -d "$SLAVDIR/$TARGET" ]
        then
           mkdir $SLAVDIR/$TARGET ||
              echo "au: Failed to create $SLAVDIR/$TARGET" 1>&2

           chmod ug=rwx,g+s,o=rx $SLAVDIR/$TARGET
           echo "Created directory $SLAVDIR/$TARGET"
        else
           echo "au: Slave directory $TARGET already exists."
        fi

#       Create the code directory.
        if [ ! -d "$CODEDIR/$TARGET" ]
        then
           mkdir $CODEDIR/$TARGET ||
              echo "au: Failed to create $CODEDIR/$TARGET" 1>&2

           chmod ug=rwx,g+s,o=rx $SLAVDIR/$TARGET
           echo "Created directory $CODEDIR/$TARGET"
        else
           echo "au: Code directory $TARGET already exists." 1>&2
        fi

#       Create the RCS symlink.
        if [ ! -d "$CODEDIR/$TARGET/RCS" ]
        then
           ln -s $SLAVDIR/$TARGET $CODEDIR/$TARGET/RCS
           echo "Created symlink $CODEDIR/$TARGET/RCS -> $SLAVDIR/$TARGET"
        else
           echo "au: Code RCS symlink for directory $TARGET already exists."
        fi

     else
        echo "au: $TARGET not found on the master." 1>&2
     fi
  done


  exit 0
