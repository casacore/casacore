#!/bin/sh
#-----------------------------------------------------------------------------
# inhale: Retrieve and install the latest AIPS++ update
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1992-1997,1999,2000,2001,2002
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-------------------------------------------------------------------------------------
# Usage: inhale [-b] [-c|-m] [-D] [-d] [-l] [-n] [-P] [-R NAME] [-r #] [-w #] [binary]
#               [-cvsup data | docs | all]
#-------------------------------------------------------------------------------------
# inhale retrieves the latest AIPS++ update from the master ftp directories on
# aips2.nrao.edu.  It is invoked regularly as a cron job.
#
# Options:
#   -b     Use the most recently "blessed" release.  Useful for sites
#          that wish to track development but that also require stable
#          releases.
#   -c     Force a cumulative update.
#   -D     Fetch the latest version which has passed the test suite.
#   -d     If the "-n" option is specified, don't remake the "docsys" target.
#          Has no effect if "-n" was not specified.  Note that even if
#          documentation compilation is defeated via the DOCSYS variable in
#          "makedefs" this option may still be useful in preventing "docsys"
#          from being recorded in the LOGFILE entry for the rebuild.
#   -l     Latchkey mode; fetch latchkey updates (if any) together with any
#          other updates intended for general distribution.
#   -m     Do a "mixed" update: (mostly) incremental inhale, cumulative sneeze.
#   -n     Don't remake the system (allsys).  The "install" and "docsys"
#          targets will still be remade; see also the "-d" option.
#   -P     Use passive mode when doing FTP. Useful for firewalls etc. The
#          FTP client being used must support passive mode.
#   -R <NAME> instead of downloading the default distribution, get the
#          one called <NAME>.
#   -r #   Maximum number of ftp attempts, default 12.
#          Set this to zero to circumvent the ftp.
#   -w #   Set retry interval for the ftp in seconds, default 900.
#   binary This retrieves the latest stable/linux_gnu binary from aips2.nrao.edu
#          it sets the -b and -n options so a build will not happen.
#
#   -cvsup data | docs | all  Uses cvsup to retrieve latest data or docs or both
#          from AIPS++ central.  Note you must have cvsup either set using an aipsrc
#          variable or in the path.
#
# Status return values correspond to the various phases of the operation
#    0:  success
#    1:  initialization error
#    2:  initial ftp error
#    3:  main ftp error
#    4:  error extracting or installing the new RCS files
#    5:  error checking out the new code
#    6:  error rebuilding the system
#
# Notes:
#    1) tar will not overwrite files which don't have write permission,
#       regardless of the permission on the parent directory.  Therefore it is
#       necessary to change the permissions explicitly.
#
#    2) The incremental (and cumulative) update files contain the VERSION file
#       for the *preceeding* version.  This is used in multi-increment
#       updates.
#
# The $MSTRFTPD/VERSION file contains the major and minor version numbers of
# the most recent incremental update.
#
# Original: 1992/04/07 by Mark Calabretta, ATNF
# $Id$
#=============================================================================
# Initialize
#-----------------------------------------------------------------------------
# Name of the master ftp machine and area.
  MASTERHOST="aips2.nrao.edu"
  MSTRFTPD="/pub/master"

# Guard against being overwritten.
  case $0 in
  *-)
     ARGS=$*
     ;;
  *)
     cp $0 $0-
     exec $0- $*
     ;;
  esac

# Identify ourselves.
  HOST=`uname -n | sed -e 's/\..*//'`
  LOGNAME=${LOGNAME-$USER}

  echo ""
  echo "inhale: Execution on $HOST by $LOGNAME commenced at"
  echo "inhale: `adate`"
  echo "inhale: `adate -l`"

  echo ""
  echo "inhale: Command line arguments \"$*\""

# Check that AIPSPATH is defined.
  if [ "$AIPSPATH" = "" ] ; then
     exec 1>&2
     echo ""
     echo "inhale: AIPSPATH is undefined, abort!"
     exit 1
  fi

# Get the site name.
  SITE=`echo $AIPSPATH | awk '{print $3}'`
# And its architecture.
  ARCH=`echo $AIPSPATH | awk '{print $2}'`

# Produce a status report.
  echo ""
  echo "inhale: Current status of the $SITE installation"
  avers -l

# Determine the AIPS++ root directory.
  AIPSROOT=`echo $AIPSPATH | awk '{print $1}'`

# Check the accessibility of the AIPSROOT area.
  if [ ! -d "$AIPSROOT" ]
  then
     exec 1>&2
     echo ""
     echo "inhale: The AIPS++ root directory does not exist or is"
     echo "        not accessible, $AIPSROOT"
     exit 1
  fi

# Get account information.
  AIPS2MGR=`getrc -i account.manager    2> /dev/null`
  AIPS2PRG=`getrc -i account.programmer 2> /dev/null`
  MGRACCNT=`echo $AIPS2MGR | sed -e 's/\..*//'`
  MGRGROUP=`echo $AIPS2MGR | sed -e 's/.*\.//'`
  PRGGROUP=`echo $AIPS2PRG | sed -e 's/.*\.//'`

# Check that this script is being run from the right account.
  if [ "$MGRACCNT" != "$LOGNAME" -a "$MGRACCNT" != "" ]
  then
     exec 1>&2
     echo ""
     echo "inhale: This script can only be run by $MGRACCNT, not" \
          "$LOGNAME, abort!"
     exit 1
  fi

# Set default file creation mode.
  umask 002

# Parse command input.
  BLESSED=""
  RELEASE=
  MODE=incremental
  DINKUM=
  DOCSYS=docsys
  TARGETS=allsys
  LATCHKEY=
  FTPLIMIT=12
  FTPINTVL=900
  PASSIVEFTP=
  BINARY=
  USECVSUP=

  while [ "$#" -gt 0 ]
  do
     case $1 in
     -b)
        BLESSED=1
	RELEASE="-r stable"
        ;;
     binary)
        BINARY=1
        TARGETS=install
        BLESSED=1
        ;;
     -c)
        MODE=cumulative
        ;;
     -cvsup)
         shift
	 USECVSUP=1
	 CVSUPGET=$1
         ;;
     -D)
        DINKUM=dinkum
        ;;
     -d)
        DOCSYS=""
        ;;
     -m)
        MODE=hybrid
        ;;
     -n)
        TARGETS=install
        ;;
     -P)
        PASSIVEFTP=yes
        ;;
     -l)
        LATCHKEY=1
        ;;
     -R*)
        case $1 in
        -R)
           shift
           RELEASE="$1"
           ;;
        *)
           RELEASE=`echo $1 | sed -e 's/^-R//'`
           ;;
        esac
        MSTRFTPD=`echo $MSTRFTPD | sed "s/master$/versions\/$RELEASE\/master/"`
	RELEASE="-r $RELEASE"
        ;;
     -r*)
        case $1 in
        -r)
           shift
           FTPLIMIT="$1"
           ;;
        *)
           FTPLIMIT=`echo $1 | sed -e 's/^-r//'`
           ;;
        esac
        ;;
     -w*)
        case $1 in
        -w)
           shift
           FTPINTVL="$1"
           ;;
        *)
           FTPINTVL=`echo $1 | sed -e 's/^-w//'`
           ;;
        esac
        ;;
     *)
        exec 1>&2
        echo ""
        echo "Usage: inhale [-b|-c|-m] [-d] [-n] [-l] [-P] [-r #] [-w #] binary"
        exit 1
        ;;
     esac

     [ "$2" = "" ] && break

     shift
  done

  if [ "$TARGETS" != allsys ]
  then
     [ "$DOCSYS" = "docsys" ] && TARGETS="$TARGETS docsys"
  fi

# Report the amount of free space available for the update.
  echo ""
  echo "inhale: Available space in the /tmp and $AIPSROOT partitions"
  df /tmp $AIPSROOT

# Define major AIPS++ directories.
  AIPSLAVE="$AIPSROOT/slave"
  AIPSCODE="$AIPSROOT/code"


  trap 0 1 2 3 15


#-----------------------------------------------------------------------------
# Update the code areas.
#-----------------------------------------------------------------------------
  echo ""
  echo "inhale: Update the code areas."
  echo "------------------------------"


# Check or set directory ownerships and permissions.
  find $AIPSCODE -type d ! -user  $MGRACCNT \
     -exec "Incorrect directory ownership: {}" \;
  find $AIPSCODE -type d ! -group $MGRGROUP -exec chgrp $MGRGROUP {} \;
  find $AIPSCODE -type d ! -perm 2775 -exec chmod ug=rwx,g+s,o=rx {} \;

# Ensure that CVS is installed here.
  for DIREX in `echo $PATH | sed -e 's/:/ /g'` ""
  do
     [ -f "$DIREX/cvs" ] && break
  done

  if [ "$DIREX" = "" ]
  then
     exec 1>&2
     echo ""
     echo "inhale: CVS does not appear to be available (check your" \
          "PATH), abort!"
     exit 5
  fi

# Now use CVS to update the code areas.
  cd $AIPSROOT
  CVSROOT=`getrc inhale.cvsroot`
  export CVSROOT
  if [ ! "$CVSROOT" ]
  then
     export CVSROOT=`getrc inhale.cvsroot 2>/dev/null`
     if [ $? -gt 0 ]
     then
        echo "inhale: CVSROOT is not defined, abort!"
	exit 5
     fi
  fi
									 
# Check the files out into the code directory

  cd $AIPSROOT
  cd code
  chmod -R u+rw .
  cvs update -P -d -C  $RELEASE


# Clear the template repositories
  if [ "$MODE" = "cumulative" ]
  then
      for tmplinstd in `find . -name tmplinst -print`
      do 
         rm -rf $$tmplinstd
      done

  fi




#-----------------------------------------------------------------------------
# Rebuild all systems
#-----------------------------------------------------------------------------

  cd $AIPSROOT

  echo ""
  echo "inhale: Rebuild AIPS++ version $INCVERSN on all systems."
  echo "--------------------------------------------------------"

# List of hosts which will rebuild each architecture.
  INHOSTS=`getrc -i inhale.sneeze.hosts 2> /dev/null`
  DELTASLEEP=`getrc -i inhale.sneeze.sleep 2> /dev/null`
  if [ "$DELTASLEEP" = "" ]
  then
     DELTASLEEP=600
  fi
  SLEEPINV=$DELTASLEEP

# No need to sneeze anywhere else if we're a binary installation
  if [ "$BINARY" ]
  then
     INHOSTS=
  fi

# Spread our germs to all specified hosts.
  GOTSYNC=
  for INHOST in $INHOSTS
  do
#    Parse any architecture extension.
     EXTLIST=""
     case $INHOST in
     *:*)
        EXTLIST=`echo $INHOST | sed -e 's/[^:]*://'`
        INHOST=`echo $INHOST | sed -e 's/:.*//'`
        ;;
     esac

#    Synchronous rebuild on this host.
     if [ "$GOTSYNC" = "" -a "$INHOST" = "$HOST" ]
     then
        GOTSYNC=1
        INEXT="$EXTLIST"
        continue
     fi

#
# OK here is where we put the binary extraction possibly gunzip/tar xf -
#
#    Determine what command to use for remote sneeze.  Default is ssh.
     RCMD=`getrc -i inhale.sneeze.$INHOST.rcmd 2> /dev/null`
     [ "$RCMD" = "" ] && RCMD=ssh

     echo ""
     TMP="$INHOST"
     [ "$EXTLIST" != "" ] && TMP="$TMP ($EXTLIST)"
     echo "inhale: Initiating asynchronous rebuild on $TMP using $RCMD..."

#    Initiate the rebuild.
     if [ "$EXTLIST" != "" ]
     then
        EXTLIST="-e $EXTLIST"
        AIPSEXT=`echo "$EXTLIST" | sed -e 's/:.*//'`
     fi
     SNEEZE="sneeze $EXTLIST -l -m $MODE -s $SLEEPINV $TARGETS"
     $RCMD $INHOST -n $AIPSROOT/.rshexec $AIPSEXT \'$SNEEZE\' &
     SLEEPINV=`expr $SLEEPINV + $DELTASLEEP`
  done

# Start the rebuild on this host.
  echo ""
  echo "inhale: `adate`"
  AIPSEXT=
  TMP=
  if [ "$INEXT" != "" ]
  then
     AIPSEXT=`echo $INEXT | sed -e 's/:.*//'`
     TMP=" ($INEXT)"
     INEXT="-e $INEXT"
  fi

# No need to sneeze anywhere else if we're a binary installation
  if [ "$BINARY" ]
  then
     echo "inhale: Skipping sneeze due to binary flag"
  else
     echo "inhale: Initiating synchronous rebuild$TMP..."
     (aips_ext=$AIPSEXT . $AIPSROOT/aipsinit.sh ; \
      sneeze $INEXT -l -m $MODE $TARGETS)
  fi

#
# Now we look to see if we're going to cvsup the docs or data
#
  if [ "$USECVSUP" ]
  then
     doit="yes"
     CVSUP="cvsup -g "

# Ensure that cvsup is installed here.

     for DIREX in `echo $PATH | sed -e 's/:/ /g'` ""
     do
       [ -f "$DIREX/cvsup" ] && break
     done

     if [ "$DIREX" = "" ]
     then
       echo ""
       echo "inhale: cvsup does not appear to be available (check your" \
            "PATH), abort!"
       doit="no"
     fi

     case $CVSUPGET in
       data)
         FETCHCVSUP="data"
       break
       ;;
       docs)
         FETCHCVSUP="docs"
       break
       ;;
       all)
         FETCHCVSUP="data docs"
       ;;
       *)
       doit="no"
       break
       ;;
     esac
     if [ $doit = "yes" ]
     then
	for fetchme in $FETCHCVSUP
        do
            SUPFILE=$AIPSROOT/$fetchme/supfile
            if [ -f $SUPFILE ]
	    then
	       echo "Supfile exists."
            else
	       if [ -d $AIPSROOT/$fetchme ]
	       then
		  echo "$fetchme directory exists"
	       else
		  mkdir $AIPSROOT/$fetchme
	       fi
	       echo "Creating supfile."
# First try to guess the release, default to daily
	       CVSUPVERS="daily"
               if [ "$BLESSED" != "" ]
               then
	           CVSUPVERS="stable"
               elif [ "$RELEASE" != "" ]
               then
	           CVSUPVERS="released"
	       else
	           echo $AIPSROOT | grep weekly
	           if [ $? -eq 0 ] 
	           then 
                      CVSUPVERS='weekly'
	           fi
               fi
	       if [ $fetchme = 'data' ]
	       then
	           CVSUPVERS="all"
	       fi
	       echo "*default host=aips2.nrao.edu compress" > $SUPFILE
#
#  data is different from docs so the base is different
#
               if [ $fetchme != "data" ]
               then
	          echo "*default base=$AIPSROOT" >> $SUPFILE
               else
	          echo "*default base=$AIPSROOT/$fetchme" >> $SUPFILE
               fi
	       echo "*default release=$CVSUPVERS" >> $SUPFILE
	       echo "*default delete use-rel-suffix" >> $SUPFILE
	       echo "$fetchme" >> $SUPFILE

            fi
            $CVSUP $SUPFILE
	done
     fi
  fi

#-----------------------------------------------------------------------------
# Wind up.
#-----------------------------------------------------------------------------
  if [ "$MODE" != incremental ]
  then
     echo ""
     if [ -f $AIPSROOT/.rhosts ]
     then
        echo "inhale: Remote $MGRACCNT:"
        cat $AIPSROOT/.rhosts
     else
        echo "inhale: No remote $MGRACCNT."
     fi
  fi

  echo ""
  echo "inhale: Execution terminated at"
  echo "inhale: `adate`"
  echo "inhale: `adate -l`"


  exit 0
