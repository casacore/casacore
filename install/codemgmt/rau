#!/bin/sh
#-----------------------------------------------------------------------------
# rau: Update AIPS++ sources from the master
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1996,1999,2001
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# Usage: rau [-nag] <file or directory> ...
#-----------------------------------------------------------------------------
# rau updates the AIPS++ slave and code areas with the lastest version of a
# file in $AIPSMSTR.  rau assumes that the user has ssh access to the AIPS++
# master host, aips2.nrao.edu.
#
# rau copies RCS version files from the master to the slave RCS repository
# giving them a file ownership defined by the owner of rau, which must itself
# be setuid.  If successful, rau then checks out a plain-text copy of the code
# from the AIPS++ slave area into the code area.
#
# Files must be specified as simple filenames without path.
#
# -nag forces creation of a new ssh-agent to avoid logging into the aips2mgr
# account on the master host with keys other than aips2mgr's key. None
# of the SSH tools seem to allow giving priority to a particular key.
#
# Status returns:
#    0:  initialization succeeded
#    1:  initialization error
#
# Original: 1996/08/16 by Mark Calabretta, ATNF
# $Id$
#=============================================================================
# Fundamentals.
  if [ ! "$AIPSPATH" ]
  then
     echo "rau: AIPSPATH is not defined, abort!" 1>&2
     exit 1
  fi

  AIPSROOT=`echo $AIPSPATH | awk '{print $1}'`
  ARCH=`echo $AIPSPATH | awk '{ print $2 }'`
  AIPSARCH=$AIPSROOT/$ARCH

# Check number of arguments.
  if [ $# = 0 ]
  then
     echo "Usage: rau <file or directory> ..." 1>&2
     exit 1
  fi

# Get working directory names.
  AIPSMSTR=""
  AIPSLAVE=$AIPSROOT/slave
  MSTRDIR=`pwd | sed -e 's#/code$#/code/#' -e "s#.*/code/##"`
  SLAVDIR=`pwd | sed -e 's#/code$#/code/#' -e "s#.*/code/#$AIPSLAVE/#"`
  CODEDIR=`echo $SLAVDIR | sed -e 's#/slave#/code#'`

# Make sure we've got something sensible.
  echo $SLAVDIR | grep "^$AIPSLAVE" > /dev/null 2>&1
  if [ "$?" != 0 ]
  then
     echo "rau: Invalid work directory - `pwd`" 1>&2
     exit 1
  fi

# Check that the slave directory exists.
  if [ ! -d "$SLAVDIR" ]
  then
     echo "rau: Slave directory doesn't exist, abort!" 1>&2
     echo "     $SLAVDIR" 1>&2
     exit 1
  fi

  cd $SLAVDIR
  if [ "$?" != 0 ]
  then
     echo "rau: Couldn't change to $SLAVDIR, abort!" 1>&2
     exit 1
  fi

# File permission mask for RCS files.
  umask 002

  NEWAGENT=
  TARGLIST=
  for TARGET
  do
#    Get the basic filename.
     case $TARGET in
     -nag)
        NEWAGENT=YES
        ;;
     */*)
        echo "rau: Pathnames are not allowed!  Ignored $TARGET"
        continue
        ;;
     *,v)
        TARGET=`echo $TARGET | sed -e 's#,v$##'`
        ;;
     esac

     TARGLIST="$TARGLIST $TARGET,v $TARGET"
  done

  STARTED_AGENT=''
  if [ -n "$NEWAGENT" -o -z "$SSH_AUTH_SOCK" ]; then
    eval `ssh-agent -s` > /dev/null
    trap 'ssh-agent -k > /dev/null 2>&1' 0 1 2 3 15
    STARTED_AGENT='YES'
    ssh-add
  else
    SSHID=`cat $HOME/.ssh/identity.pub | sed 's/.* \([^ ][^ ]*\)$/\1/'`
    if ! ssh-add -l | grep $SSHID > /dev/null 2>&1; then
        ssh-add
    fi
  fi

  REMOTE_USER="-l aips2mgr"
  REMOTE_CP="aips2mgr@aips2.nrao.edu"

  if [ -e $HOME/.ssh/id_dsa ]; then
     IDFILES="-i $HOME/.ssh/identity -i $HOME/.ssh/id_dsa"
  else
     IDFILES="-i $HOME/.ssh/identity"
  fi
# Find out which of these are files and which are directories.
  ARSH="ssh $IDFILES -q -C aips2.nrao.edu $REMOTE_USER"
  ARCP="scp $IDFILES -q -C $REMOTE_CP"
  TARGLIST=`$ARSH RAU LIST $MSTRDIR $TARGLIST`

  FILES=
  for TARGET in $TARGLIST
  do
     case $TARGET in
     *,v)
#       Change file permission before attempting to overwrite.
        if [ -f "$TARGET" ]
        then
           chmod +w "$TARGET" 2> /dev/null || rm -f "$TARGET,v" 
        fi

        FILES="$FILES $TARGET"
        ;;
     esac
  done

# Fetch the files.
  if [ "$FILES" != "" ]
  then
     file=`$ARSH RAU GET $MSTRDIR $FILES`
     $ARCP:$file $AIPSARCH/tmp
     tar pvxf $AIPSARCH/tmp/$file > /dev/null
     rm -f $AIPSARCH/tmp/$file
  fi

# Process each file and directory.
  for TARGET in $TARGLIST
  do
     case $TARGET in
     *\*)
        TARGET=`echo $TARGET | sed -e 's/.$//'`
        echo "rau: $TARGET not found on the master."
        ;;

     *,v)
#       Update the code directory, read-only.
        TARGET=`echo $TARGET | sed -e 's/,v$//'`
        [ -f "$CODEDIR/$TARGET" ] && rm -f $CODEDIR/$TARGET
        (co -p $SLAVDIR/$TARGET,v > $CODEDIR/$TARGET &&
         chmod a-wx $CODEDIR/$TARGET) ||
           echo "rau: Failed to update $CODEDIR/$TARGET" 1>&2
        ;;

     *)
#       Create the directory on the slave.
        if [ ! -d "$SLAVDIR/$TARGET" ]
        then
           mkdir $SLAVDIR/$TARGET ||
              echo "rau: Failed to create $SLAVDIR/$TARGET"

           chmod ug=rwx,g+s,o=rx $SLAVDIR/$TARGET
           echo "Created directory $SLAVDIR/$TARGET"
        else
           echo "rau: Slave directory $TARGET already exists."
        fi

#       Create the code directory.
        if [ ! -d "$CODEDIR/$TARGET" ]
        then
           mkdir $CODEDIR/$TARGET ||
              echo "rau: Failed to create $CODEDIR/$TARGET"

           chmod ug=rwx,g+s,o=rx $SLAVDIR/$TARGET
           echo "Created directory $CODEDIR/$TARGET"
        else
           echo "rau: Code directory $TARGET already exists."
        fi

#       Create the RCS symlink.
        if [ ! -d "$CODEDIR/$TARGET/RCS" ]
        then
           ln -s $SLAVDIR/$TARGET $CODEDIR/$TARGET/RCS
           echo "Created symlink $CODEDIR/$TARGET/RCS -> $SLAVDIR/$TARGET"
        else
           echo "rau: Code RCS symlink for directory $TARGET already exists."
        fi
        ;;
     esac

  done


  exit 0
