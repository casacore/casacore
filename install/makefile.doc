#-----------------------------------------------------------------------------
# Generic AIPS++ documentation makefile
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1992-1998,1999,2000,2001,2002
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# This GNU makefile is included by other AIPS++ makefiles and is not intended
# for stand-alone use.
#
# Original: MRC 1992/06/24 by Mark Calabretta, ATNF
# $Id$
#=============================================================================

# AIPS++ fundamentals.
#---------------------
AIPSROOT := $(word 1, $(AIPSPATH))
AIPSARCH := $(AIPSROOT)/$(word 2, $(AIPSPATH))
include $(AIPSARCH)/makedefs

# Do not include template source files.
#--------------------------------------
CPPOPT += -DAIPS_NO_TEMPLATE_SRC
CPPDBG += -DAIPS_NO_TEMPLATE_SRC

# Documentation repository.
#--------------------------
DOCSAREA := $(AIPSDOCS)/$(subst $(space),/,$(filter-out \
            doc,$(subst /,$(space),$(CODESUBD))))


# Temporary directories.
#-----------------------
TMPDOCD  := $(ARCHTMPD)/$(subst /,.,$(CODESUBD)).$(PID)


# Include directories.
#---------------------
DIRSUBS  := $(wildcard *.dir)


# Source lists.
#--------------
LATEXDCS := $(filter %.latex,$(AIPSSRCS))
TEXIDOCS := $(filter %.texi,$(AIPSSRCS))
TEXDOCS  := $(filter %.tex,$(AIPSSRCS))
PSDOCS   := $(filter %.ps,$(AIPSSRCS))
PSGZDOCS   := $(filter %.ps.gz,$(AIPSSRCS))
PPTDOCS   := $(filter %.ppt,$(AIPSSRCS))
TEXTDOCS := $(filter %.text,$(AIPSSRCS))
TXTDOCS  := $(filter %.txt,$(AIPSSRCS))
HTMLDOCS := $(filter %.html,$(AIPSSRCS))
HTMDOCS  := $(filter %.htm,$(AIPSSRCS))
CSSDOCS  := $(filter %.css,$(AIPSSRCS))
XMLDOCS  := $(filter %.xml,$(AIPSSRCS))
WMFDOCS  := $(filter %.wmf,$(AIPSSRCS))
MSODOCS  := $(filter %.mso,$(AIPSSRCS))
WAVDOCS  := $(filter %.wav,$(AIPSSRCS))
GIFDOCS  := $(filter %.gif,$(AIPSSRCS))
BGIFDOCS  := $(filter %.GIF,$(AIPSSRCS))
JPGDOCS  := $(filter %.jpg,$(AIPSSRCS))
JSDOCS  := $(filter %.js,$(AIPSSRCS))
PNGDOCS  := $(filter %.png,$(AIPSSRCS))


# Paths.
#-------
vpath %.texi  $(CODEDIR)
vpath %.latex $(CODEDIR)
vpath %.tex   $(CODEDIR)

override TEXINPUTS := $(CODEDIR):$(EXTRA_TEXINPUTS):$(AIPSCODE)/doc/texinputs.dir//:$(TEXINPUTS)


# Pattern rules.
#---------------
docs/% : $(DOCSAREA)/% ;

# Need the $(basename $(basename $@)) to handle the fact it .ps.gz
# Need to force three passes through latex, for some reason the TOC doesn't
# get acknowledged properly for some documents (i.e. the Refman)

$(DOCSAREA)/%.ps.gz : $(CODEDIR)/%.latex $(CODEDIR)/%.dir
	-@ echo ""
	 @ trap "cd $(AIPSROOT) ; $(RM) -r $(TMPDOCD)" 0 1 2 3 15 ; \
	      mkdir $(TMPDOCD) ; \
              if [ -f ".latex2html-init" ] ; then \
                cp .latex2html-init $(TMPDOCD) ; \
              fi ; \
	      cd $(TMPDOCD) && TEXINPUTS=.:$(<:latex=dir):$(TEXINPUTS) ; \
	      export TEXINPUTS ; \
	      echo "$(LATEX) $<" ; \
	      echo "(1st pass, quiet)..." ; \
	      $(LATEX) $< > /dev/null ; \
	      if [ -f "$*.idx" ] ; then \
	         $(MAKEINDEX) $*.idx ; \
	      fi ; \
	      if [ -f "$(<:latex=dir)/$*.bib" ] ; then \
	         echo "$(BIBTEX) $*" ; \
	         BIBINPUTS=$(<:latex=dir) $(BIBTEX) $* ; \
	         echo "$(LATEX) $<" ; \
	         echo "(2nd pass, quiet)..." ; \
	         $(LATEX) $< > /dev/null ; \
	      else \
	         echo "(2nd pass, quiet)..." ; \
	         $(LATEX) $< > /dev/null ; \
	      fi ; \
	      echo "(3rd pass, verbose)..." ; \
	      $(LATEX) $< ; \
	      $(RM) $@ ; \
	      echo $(DVIPS) -o $(basename $@)  $(@F:ps.gz=dvi) ; \
	      $(DVIPS) -o $(basename $@)  $(@F:ps.gz=dvi) ; \
	      if [ "$($*)" != "" ] ; then \
	         $(RM) -r $(basename $(basename $@)) ; \
	         ln -s $< ; \
	         $(LATEX2HTML) -dir $(basename $(basename $@)) $($*) $(<F) ; \
                 if [ "$(ICONSERVER)" != "" -a \
                      "$(ICONS2LOCAL)" != "" ] ; then \
                      $(ICONS2LOCAL) $(CODEDIR) $(ICONSERVER) $(basename $(basename $@)) ; \
                 fi ; \
                 if [ "$($(basename $(basename $(@F))).s2ps)" != "" ] ; then \
                    mkpsfiles.sh $(AIPSCODE) $(basename $(basename $(@F))) | dvips.sh $(DVIPS) $(@F:ps.gz=dvi) > mkdfiles.sh ; \
                    chmod u+x mkdfiles.sh ; \
                    ./mkdfiles.sh ; \
                    gzip *.ps ; \
                    cp *.ps.gz $(DOCSAREA) ; \
                 fi ; \
	      fi ;\
              gzip -f $(basename $@)
	@ chmod 664 $@

$(DOCSAREA)/%.ps : $(CODEDIR)/%.texi $(CODEDIR)/%.dir
	-@ echo ""
	 @ trap "cd $(AIPSROOT) ; $(RM) -r $(TMPDOCD)" 0 1 2 3 15 ; \
	      mkdir $(TMPDOCD) ; \
	      cd $(TMPDOCD) && TEXINPUTS=.:$(<:texi=dir):$(TEXINPUTS) ; \
	      export TEXINPUTS ; \
	      echo "$(TEX) $<" ; \
	      echo "(1st pass, quiet)..." ; \
	      $(TEX) $< > /dev/null ; \
	      $(TEXINDEX) $(@F:ps=??) ; \
	      echo "(2nd pass, verbose)..." ; \
	      $(TEX) $< ; \
	      $(RM) $@ ; \
	      $(DVIPS) -o $@ $(@F:ps=dvi)
	@ chmod 664 $@

$(DOCSAREA)/%.ps : $(CODEDIR)/%.tex $(CODEDIR)/%.dir
	-@ echo ""
	 @ trap "cd $(AIPSROOT) ; $(RM) -r $(TMPDOCD)" 0 1 2 3 15 ; \
	      mkdir $(TMPDOCD) ; \
	      cd $(TMPDOCD) && TEXINPUTS=.:$(<:tex=dir):$(TEXINPUTS) ; \
	      export TEXINPUTS ; \
	      $(TEX) $< ; \
	      $(RM) $@ ; \
	      $(DVIPS) -o $@ $(@F:ps=dvi)
	 @ chmod 664 $@

$(DOCSAREA)/%.ps : $(CODEDIR)/%.ps
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.ps.gz : $(CODEDIR)/%.ps.gz
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.text : $(CODEDIR)/%.text
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.xml : $(CODEDIR)/%.xml
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.wmf : $(CODEDIR)/%.wmf
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.mso : $(CODEDIR)/%.mso
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.wav : $(CODEDIR)/%.wav
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.css : $(CODEDIR)/%.css
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.ppt : $(CODEDIR)/%.ppt
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.txt : $(CODEDIR)/%.txt
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.html : $(CODEDIR)/%.html
	-@ echo ""
	 @ $(RM) $@
	-@ echo "$< -> $@"
	 @ sed -e '/^<!\$$\Date: /{s#<!\$$\Date: #<HR><I>Modified: #;s#\$$#GMT#;s#>$$#<BR>Installed: '"`adate -d`"'</I>#;}'\
               -e "s/VERSIONID/`avers | awk -F. '{print \"Version\", \$$1/10, \"Build\", \$$2}'`/" $< > $@
	 @ chmod 664 $@

$(DOCSAREA)/%.htm : $(CODEDIR)/%.htm
	-@ echo ""
	 @ $(RM) $@
	-@ echo "$< -> $@"
	 @ sed -e '/^<!\$$\Date: /{s#<!\$$\Date: #<HR><I>Modified: #;s#\$$#GMT#;s#>$$#<BR>Installed: '"`adate -d`"'</I>#;}' \
               -e "s/VERSIONID/`avers | awk -F. '{print \"Version\", \$$1/10, \"Build\", \$$2}'`/" $< > $@
	 @ chmod 664 $@

$(DOCSAREA)/%.png : $(CODEDIR)/%.png
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.gif : $(CODEDIR)/%.gif
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.GIF : $(CODEDIR)/%.GIF
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.jpg : $(CODEDIR)/%.jpg
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

$(DOCSAREA)/%.js : $(CODEDIR)/%.js
	-@ echo ""
	 @ $(RM) $@
	 cp $< $@
	 @ chmod 664 $@

# Programmer-oriented pattern rules.
ifeq "$(MAKEMODE)" "programmer"
   %.ps : %.dvi %.dir $(CODEDIR)/%.dir
	-@ echo ""
	 @ TEXINPUTS=.:$*.dir:$(CODEDIR)/$*.dir:$(TEXINPUTS) ; \
	   export TEXINPUTS ; \
	   $(DVIPS) -o $@ $<

   %.gz : %.ps
	-@ echo ""
	 @  gzip $<

   %.dvi : %.latex %.dir $(CODEDIR)/%.dir
	-@ echo ""
	 @ TEXINPUTS=.:$*.dir:$(CODEDIR)/$*.dir:$(TEXINPUTS) ; \
	   export TEXINPUTS ; \
	   $(LATEX) $< ; \
	   if [ -f "$*.idx" ] ; then \
	      $(MAKEINDEX) $*.idx ; \
	   fi ; \
	   $(LATEX) $< ; \
	   if [ -f "$*.dir/$*.bib" -o \
	        -f "$(CODEDIR)/$*.dir/$*.bib" ] ; then \
	      echo "$(BIBTEX) $*" ; \
	      BIBINPUTS=$*.dir:$(CODEDIR)/$*.dir $(BIBTEX) $* ; \
	      $(LATEX) $< ; \
	   fi ; \
	   $(LATEX) $<

   %.dvi : %.texi %.dir $(CODEDIR)/%.dir
	-@ echo ""
	 @ TEXINPUTS=.:$*.dir:$(CODEDIR)/$*.dir:$(TEXINPUTS) ; \
	   export TEXINPUTS ; \
	   $(TEX) $< ; \
	   $(TEXINDEX) $(*F).?? ; \
	   $(TEX) $<

   %.dvi : %.tex %.dir $(CODEDIR)/%.dir
	-@ echo ""
	 @ TEXINPUTS=.:$*.dir:$(CODEDIR)/$*.dir:$(TEXINPUTS) ; \
	   export TEXINPUTS ; \
	   $(TEX) $<

   % : %.latex %.dir $(CODEDIR)/%.dir %.dvi
	 @ TEXINPUTS=.:$*.dir:$(CODEDIR)/$*.dir:$(TEXINPUTS) ; \
	   export TEXINPUTS ; \
	   if [ "$($*)" != "" ] ; then \
	      $(LATEX2HTML) -dir ./$(basename $*) $($*) $< ; \
	   else \
	      $(LATEX2HTML) -dir ./$(basename $*)  $< ; \
	   fi
endif

# Defeat builtin pattern rules.
%.dvi : %.texi
%.dvi : %.latex
%.dvi : %.tex
%.dir : ;


# Static and static pattern rules.
#---------------------------------
.PRECIOUS : %.dvi

.PHONY : docsys resolvedocs

allsys : docsys $(CODESUBS)

.cleancode ::
	-$Q cd $(CODEDIR) && \
            $(RM) *.aux *.bbl *.blg *.cp *.cps *.dvi *.fi *.fis *.fn *.fns \
	          *.idx *.ilg *.ind *.ky  *.kys *.lof *.log *.pg *.pgs *.toc \
	          *.tp *.tps *.vr *.vrs *.info *.info-*

ifdef AIPSRCS
   $(CODEDIR) : FORCE
	-@ DOCDIRS="$(wildcard $(CODEDIR)/*.dir)" ; \
	   for i in $$DOCDIRS ; do \
	      $(MAKE) -C $$i -f $(CODEINSD)/makefile.chk chkout ; \
	   done
endif

docsys : $(HELPSYS) $(CHKDIR) $(DOCSAREA) \
    $(addprefix $(DOCSAREA)/,$(subst .latex,.ps.gz,$(LATEXDCS))) \
    $(addprefix $(DOCSAREA)/,$(subst .texi,.ps,$(TEXIDOCS))) \
    $(addprefix $(DOCSAREA)/,$(subst .tex,.ps,$(TEXDOCS))) \
    $(addprefix $(DOCSAREA)/,$(PSDOCS)) \
    $(addprefix $(DOCSAREA)/,$(PSGZDOCS)) \
    $(addprefix $(DOCSAREA)/,$(PPTDOCS)) \
    $(addprefix $(DOCSAREA)/,$(TEXTDOCS)) \
    $(addprefix $(DOCSAREA)/,$(TXTDOCS)) \
    $(addprefix $(DOCSAREA)/,$(HTMLDOCS)) \
    $(addprefix $(DOCSAREA)/,$(HTMDOCS)) \
    $(addprefix $(DOCSAREA)/,$(CSSDOCS)) \
    $(addprefix $(DOCSAREA)/,$(WMFDOCS)) \
    $(addprefix $(DOCSAREA)/,$(MSODOCS)) \
    $(addprefix $(DOCSAREA)/,$(XMLDOCS)) \
    $(addprefix $(DOCSAREA)/,$(WAVDOCS)) \
    $(addprefix $(DOCSAREA)/,$(GIFDOCS)) \
    $(addprefix $(DOCSAREA)/,$(BGIFDOCS)) \
    $(addprefix $(DOCSAREA)/,$(PNGDOCS)) \
    $(addprefix $(DOCSAREA)/,$(JSDOCS)) \
    $(addprefix $(DOCSAREA)/,$(JPGDOCS)) ;

$(DOCSAREA) :
	 @ [ -d "$(AIPSDOCS)" ] || mkdir $(AIPSDOCS)
	 @ chmod ug=rwx,g+s,o=rx $(AIPSDOCS)
	 @ [ -d "$(DOCSAREA)" ] || mkdir $(DOCSAREA)
	 @ chmod ug=rwx,g+s,o=rx $(DOCSAREA)
	-@ echo ""
	-@ echo "Created directory $(DOCSAREA)"

ifdef DIRSUBS
   $(DIRSUBS) : FORCE
	-@ find $@ -newer $@ -exec touch $@ \;
endif

# Programmer-oriented static rules.
ifeq "$(MAKEMODE)" "programmer"
   .PHONY : doc

   all : doc

   .clean ::
	-$(RM) *.aux *.bbl *.blg *.cp *.cps *.css *.dvi *.fi *.fis *.fn *.fns \
	       *.idx *.ilg *.ind *.ky  *.kys *.lof *.log *.pg *.pgs *.toc \
	       *.tp *.tps *.vr *.vrs *.info *.info-*

   .cleaner ::
	-$(RM) $(subst .latex,.ps,$(notdir $(wildcard *.latex))) \
	       $(subst .texi,.ps,$(notdir $(wildcard *.texi))) \
	       $(subst .tex,.ps,$(notdir $(wildcard *.tex)))
	-for HTMLDIR in $(basename $(LATEXDCS)) ; do \
	    if [ -d "$$HTMLDIR" ] ; then \
	       $(RM) -r $$HTMLDIR ; \
	    fi ; \
	 done

   # Printable documentation.
   doc : $(subst .latex,.ps,$(notdir $(wildcard *.latex))) \
      $(subst .texi,.ps,$(notdir $(wildcard *.texi))) \
      $(subst .tex,.ps,$(notdir $(wildcard *.tex))) ;
endif

show_local :
	-@ echo ""
	-@ echo "Variables defined in the documentation makefile"
	-@ echo "==============================================="
	-@ echo ""
	-@ echo "DOCSAREA=$(DOCSAREA)"
	-@ echo ""
	-@ echo "TMPDOCD =$(TMPDOCD)"
	-@ echo ""
	-@ echo "DIRSUBS =$(DIRSUBS)"
	-@ echo ""
	-@ echo "LATEXDCS=$(LATEXDCS)"
	-@ echo "TEXIDOCS=$(TEXIDOCS)"
	-@ echo "TEXDOCS =$(TEXDOCS)"
	-@ echo "PSDOCS  =$(PSDOCS)"
	-@ echo "PSGZDOCS  =$(PSGZDOCS)"
	-@ echo "PPTDOCS=$(PPTDOCS)"
	-@ echo "TEXTDOCS=$(TEXTDOCS)"
	-@ echo "TXTDOCS =$(TXTDOCS)"
	-@ echo "HTMLDOCS=$(HTMLDOCS)"
	-@ echo "HTMDOCS =$(HTMDOCS)"
	-@ echo "GIFDOCS =$(GIFDOCS)"
	-@ echo "BGIFDOCS =$(GIFDOCS)"
	-@ echo "PNGDOCS =$(PNGDOCS)"
	-@ echo "JSDOCS =$(JSDOCS)"
	-@ echo "JPGDOCS =$(JPGDOCS)"

help ::
	-@ echo ""
	-@ echo "Targets defined in the documentation makefile"
	-@ echo "============================================="
	-@ echo ""
	-@ echo "System"
	-@ echo "------"
	-@ echo "     docsys: compile all printable documents."
	-@ echo ""
	-@ echo "Programmer"
	-@ echo "----------"
	-@ echo "      %.dvi: compile a DVI file from a .texi, .tex,"
	-@ echo "             or .latex file."
	-@ echo "       %.ps: compile a PostScript file from a .latex, .texi,"
	-@ echo "             or .tex file (via a .dvi file)."
	-@ echo "        doc: compile all printable documents."
