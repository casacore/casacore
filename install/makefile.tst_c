#-----------------------------------------------------------------------------
# makefile.tst: Common AIPS++ test program makefile
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1992-2002
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# This GNU makefile is included by other AIPS++ makefiles and is not intended
# for stand-alone use.
#
# Original: 1992/06/24 by Mark Calabretta, ATNF
# $Id$
#-----------------------------------------------------------------------------

# AIPS++ fundamentals.
#---------------------
AIPSROOT := $(word 1, $(AIPSPATH))
AIPSARCH := $(AIPSROOT)/$(word 2, $(AIPSPATH))
include $(AIPSARCH)/makedefs

# Do not include template source files.
#--------------------------------------
CPPOPT += -DAIPS_NO_TEMPLATE_SRC
CPPDBG += -DAIPS_NO_TEMPLATE_SRC

MODULE   := $(subst test,,$(word 3,$(subst /,$(space),$(CODESUBD))))
PCKGMOD  := $(PACKAGE)$(MODULE:%=-%)-test

# Get architecture-specific, module-specific definitions.
-include $(INSTARCH)/$(PCKGMOD).defs

# Implement directory.
#---------------------
PCKGIMPD := $(AIPSCODE)/$(PACKAGE)/implement
ifdef AIPSRCS
   MAKEIMPD := $(wildcard $(AIPSRCS)/$(PACKAGE)/implement/makefile,v)
else
   MAKEIMPD := $(wildcard $(PCKGIMPD)/makefile)
endif
MAKEIMPD := $(MAKEIMPD:%=$(PCKGIMPD))


# Temporary directories.
#-----------------------
TMPPCKGD := $(ARCHTMPD)/$(PACKAGE)


# Source lists.
#--------------
AIPSEXES := $(basename $(filter %.cc,$(AIPSSRCS)))
LIBEXECS := $(basename $(filter %.g %.gp %.gm,$(AIPSSRCS)))
GLISHEXECS := $(filter %.g %.gp %.gm,$(AIPSSRCS))


PGMREXES := $(basename $(wildcard *.cc))
ALLEXES  := $(sort $(AIPSEXES) $(PGMREXES))


# Programmer path to include files for this application.
PRGAPINC := -I. -I$(CODEDIR)


# Do-it-yourself template instantiation.
#---------------------------------------
AIPSINST :=
INSTLIBR :=
PGMRINST :=
ifeq "$(TEMPLATES)" "diy"
   ifneq "$(findstring templates,$(AIPSSRCS))" ""
      AIPSINST := $(CODEDIR)/tmplinst
      INSTLIBR := $(TMPPCKGD)/lib$(PCKGMOD).$(SFXSTAT)
   endif
 
   ifeq "$(MAKEMODE)" "programmer"
      ifeq "$(notdir $(CODESUBD))" "tmplinst"
         PGMRIMPS := $(wildcard *.cc)
         ifeq "$(wildcard ../MyTemplatesOnly)" ""
            PGMRIMPS := $(sort $(PGMRIMPS) \
                           $(notdir $(wildcard $(CODEDIR)/*.cc)))
         endif
         PRGAPINC := -I.. -I$(dir $(CODEDIR))
      else
         ifneq "$(wildcard templates)" ""
            PGMRINST := inst
         else
            ifneq "$(findstring templates,$(AIPSSRCS))" ""
               ifeq "$(wildcard MyTemplatesOnly)" ""
                  PGMRINST := inst
               endif
            endif
         endif
      endif
   endif
endif


# Libraries.
#-----------
# Parse the link lists and library control variables.
DBGLIBS  := $(foreach PCKG,$(LINK$(PACKAGE)), \
               $(subst $(LIBDBGD)/lib$(PCKG).defeat, \
                  $(LIBOPTD)/lib$(PCKG).$(word 2,$(LIB$(PCKG))), \
                  $(subst $(LIBDBGD)/lib$(PCKG)_c.defeat, \
                     $(LIBOPTD)/lib$(PCKG)_c.$(word 4,$(LIB$(PCKG))), \
                     $(subst $(LIBDBGD)/lib$(PCKG)_f.defeat, \
                        $(LIBOPTD)/lib$(PCKG)_f.$(word 6,$(LIB$(PCKG))), \
                           $(LIBDBGD)/lib$(PCKG).$(word 1,$(LIB$(PCKG))) \
                           $(LIBDBGD)/lib$(PCKG)_c.$(word 3,$(LIB$(PCKG))) \
                           $(LIBDBGD)/lib$(PCKG)_f.$(word 5,$(LIB$(PCKG)))))))
DBGLIBS  := $(strip \
               $(subst .static,.$(SFXSTAT), \
                  $(subst .shatic,.$(SFXSTAT), \
                     $(subst .shared,.$(SFXSHAR), \
                        $(filter-out %.defeat,$(DBGLIBS))))))

OPTLIBS  := $(foreach PCKG,$(LINK$(PACKAGE)), \
               $(subst $(LIBOPTD)/lib$(PCKG).defeat, \
                  $(LIBDBGD)/lib$(PCKG).$(word 1,$(LIB$(PCKG))), \
                  $(subst $(LIBOPTD)/lib$(PCKG)_c.defeat, \
                     $(LIBDBGD)/lib$(PCKG)_c.$(word 3,$(LIB$(PCKG))), \
                     $(subst $(LIBOPTD)/lib$(PCKG)_f.defeat, \
                        $(LIBDBGD)/lib$(PCKG)_f.$(word 5,$(LIB$(PCKG))), \
                           $(LIBOPTD)/lib$(PCKG).$(word 2,$(LIB$(PCKG))) \
                           $(LIBOPTD)/lib$(PCKG)_c.$(word 4,$(LIB$(PCKG))) \
                           $(LIBOPTD)/lib$(PCKG)_f.$(word 6,$(LIB$(PCKG)))))))
OPTLIBS  := $(strip \
               $(subst .static,.$(SFXSTAT), \
                  $(subst .shatic,.$(SFXSTAT), \
                     $(subst .shared,.$(SFXSHAR), \
                        $(filter-out %.defeat,$(OPTLIBS))))))

ifeq "$(TESTOPT)" "opt"
   C++OPTS  := $(CPPOPT) $(C++OPT) $(LDOPT)
   AIPSLIBS := $(OPTLIBS)
   AIPSVERS := $(firstword $(wildcard $(LIBOPTD)/version.o $(LIBDBGD)/version.o))
else
   C++OPTS  := $(CPPDBG) $(C++DBG) $(LDDBG)
   AIPSLIBS := $(DBGLIBS)
   AIPSVERS := $(firstword $(wildcard $(LIBDBGD)/version.o $(LIBOPTD)/version.o))
endif

ifeq "$(MAKEMODE)" "programmer"
   # Programmer libraries.
   #----------------------
   ifndef OPTLIB
      OPTLIB := $(OPT)
   endif

   ifdef PGMRLIBD
      ifndef OPTLIB
         PGMRLIBR := $(foreach PCKG,$(LINK$(PACKAGE)), \
            $(wildcard $(PGMRLIBD)/lib$(PCKG).$(SFXSTAT))   \
            $(wildcard $(PGMRLIBD)/lib$(PCKG)_c.$(SFXSTAT)) \
            $(wildcard $(PGMRLIBD)/lib$(PCKG)_f.$(SFXSTAT)) \
            $(subst $(LIBDBGD)/lib$(PCKG).defeat, \
               $(LIBOPTD)/lib$(PCKG).$(word 2,$(LIB$(PCKG))), \
               $(subst $(LIBDBGD)/lib$(PCKG)_c.defeat, \
                  $(LIBOPTD)/lib$(PCKG)_c.$(word 4,$(LIB$(PCKG))), \
                  $(subst $(LIBDBGD)/lib$(PCKG)_f.defeat, \
                     $(LIBOPTD)/lib$(PCKG)_f.$(word 6,$(LIB$(PCKG))), \
                        $(LIBDBGD)/lib$(PCKG).$(word 1,$(LIB$(PCKG))) \
                        $(LIBDBGD)/lib$(PCKG)_c.$(word 3,$(LIB$(PCKG))) \
                        $(LIBDBGD)/lib$(PCKG)_f.$(word 5,$(LIB$(PCKG)))))))
      else
         PGMRLIBR := $(foreach PCKG,$(LINK$(PACKAGE)), \
            $(wildcard $(PGMRLIBD)/lib$(PCKG).$(SFXSTAT))   \
            $(wildcard $(PGMRLIBD)/lib$(PCKG)_c.$(SFXSTAT)) \
            $(wildcard $(PGMRLIBD)/lib$(PCKG)_f.$(SFXSTAT)) \
            $(subst $(LIBOPTD)/lib$(PCKG).defeat, \
               $(LIBDBGD)/lib$(PCKG).$(word 1,$(LIB$(PCKG))), \
               $(subst $(LIBOPTD)/lib$(PCKG)_c.defeat, \
                  $(LIBDBGD)/lib$(PCKG)_c.$(word 3,$(LIB$(PCKG))), \
                  $(subst $(LIBOPTD)/lib$(PCKG)_f.defeat, \
                     $(LIBDBGD)/lib$(PCKG)_f.$(word 5,$(LIB$(PCKG))), \
                        $(LIBOPTD)/lib$(PCKG).$(word 2,$(LIB$(PCKG))) \
                        $(LIBOPTD)/lib$(PCKG)_c.$(word 4,$(LIB$(PCKG))) \
                        $(LIBOPTD)/lib$(PCKG)_f.$(word 6,$(LIB$(PCKG)))))))
      endif
   else
      ifndef OPTLIB
         PGMRLIBR := $(foreach PCKG,$(LINK$(PACKAGE)), \
            $(wildcard $(PGMRCODE)/$(PCKG)/implement/lib$(PCKG).$(SFXSTAT)) \
            $(wildcard $(PGMRCODE)/$(PCKG)/C/lib$(PCKG)_c.$(SFXSTAT))       \
            $(wildcard $(PGMRCODE)/$(PCKG)/fortran/lib$(PCKG)_f.$(SFXSTAT)) \
            $(subst $(LIBDBGD)/lib$(PCKG).defeat, \
               $(LIBOPTD)/lib$(PCKG).$(word 2,$(LIB$(PCKG))), \
               $(subst $(LIBDBGD)/lib$(PCKG)_c.defeat, \
                  $(LIBOPTD)/lib$(PCKG)_c.$(word 4,$(LIB$(PCKG))), \
                  $(subst $(LIBDBGD)/lib$(PCKG)_f.defeat, \
                     $(LIBOPTD)/lib$(PCKG)_f.$(word 6,$(LIB$(PCKG))), \
                        $(LIBDBGD)/lib$(PCKG).$(word 1,$(LIB$(PCKG))) \
                        $(LIBDBGD)/lib$(PCKG)_c.$(word 3,$(LIB$(PCKG))) \
                        $(LIBDBGD)/lib$(PCKG)_f.$(word 5,$(LIB$(PCKG)))))))
      else
         PGMRLIBR := $(foreach PCKG,$(LINK$(PACKAGE)), \
            $(wildcard $(PGMRCODE)/$(PCKG)/implement/lib$(PCKG).$(SFXSTAT)) \
            $(wildcard $(PGMRCODE)/$(PCKG)/C/lib$(PCKG)_c.$(SFXSTAT))       \
            $(wildcard $(PGMRCODE)/$(PCKG)/fortran/lib$(PCKG)_f.$(SFXSTAT)) \
            $(subst $(LIBOPTD)/lib$(PCKG).defeat, \
               $(LIBDBGD)/lib$(PCKG).$(word 1,$(LIB$(PCKG))), \
               $(subst $(LIBOPTD)/lib$(PCKG)_c.defeat, \
                  $(LIBDBGD)/lib$(PCKG)_c.$(word 3,$(LIB$(PCKG))), \
                  $(subst $(LIBOPTD)/lib$(PCKG)_f.defeat, \
                     $(LIBDBGD)/lib$(PCKG)_f.$(word 5,$(LIB$(PCKG))), \
                        $(LIBOPTD)/lib$(PCKG).$(word 2,$(LIB$(PCKG))) \
                        $(LIBOPTD)/lib$(PCKG)_c.$(word 4,$(LIB$(PCKG))) \
                        $(LIBOPTD)/lib$(PCKG)_f.$(word 6,$(LIB$(PCKG)))))))
      endif
   endif

   PGMRLIBR := $(strip \
                  $(subst .static,.$(SFXSTAT), \
                     $(subst .shatic,.$(SFXSTAT), \
                        $(subst .shared,.$(SFXSTAT), \
                           $(filter-out %.defeat,$(PGMRLIBR))))))

   # Programmer library for do-it-yourself template instantiations.
   ifdef PGMRLIBD
      PRGAPLIB := $(PGMRLIBD)/lib$(PCKGMOD).$(SFXSTAT)
   else
      ifeq "$(notdir $(CODESUBD))" "tmplinst"
         PRGAPLIB := ../lib$(PCKGAPP).$(SFXSTAT)
      else
         PRGAPLIB := lib$(PCKGAPP).$(SFXSTAT)
      endif
   endif

   ifneq "$(PGMRINST)" ""
      PGMRLIBR := $(PRGAPLIB) $(PGMRLIBR) $(PRGAPLIB) $(PGMRLIBR)
   endif

   ifndef OPTLIB
      PGMRLIBS = \
         $(firstword $(wildcard $(LIBDBGD)/version.o $(LIBOPTD)/version.o)) \
         $(PGMRLIBR) $(XTRNLIBS) $(EXTRA_PGMRLIBS)
   else
      PGMRLIBS = \
         $(firstword $(wildcard $(LIBOPTD)/version.o $(LIBDBGD)/version.o)) \
         $(PGMRLIBR) $(XTRNLIBS) $(EXTRA_PGMRLIBS)
   endif


   # Programmer dependency lists.
   #-----------------------------
   ifndef PGMRAUXD
      override PGMRAUXD := .
   endif

   ifeq "$(notdir $(CODESUBD))" "tmplinst"
      PGMRLIST := $(PGMRAUXD)/$(PCKGMOD)-tmplinst.list
      PGMRTIME := $(PGMRAUXD)/$(PCKGMOD)-tmplinst.time
   else
      PGMRLIST := $(PGMRAUXD)/$(PCKGMOD).list
      PGMRTIME := $(PGMRAUXD)/$(PCKGMOD).time
   endif


   # Programmer lock files.
   #-----------------------
   PGMRLOCK := $(PGMRAUXD)/$(PCKGMOD).lock


   # Programmer paths.
   #------------------
   ifndef PGMRLIBD
      override PGMRLIBD := .
   endif

   ifndef PGMRBIND
      override PGMRBIND := .
   endif
endif


# Pattern rules.
#---------------
bin/% bintest/% :
	 @ $(MAKE) $(BINTESTD)/$*

%.report : $(BINTESTD)/%.report ;

$(BINTESTD)/%.report : $(BINTESTD)/%
	-@ echo ""
	 @ echo "Exercising $*"
	 @ trap "$(RM) $(BINTESTD)/runtests.$(PID)" 1 2 3 15 ; \
	   echo $(PCKGMOD) $* $(word 1,$(shell avers)) `adate -l` | \
	      awk '{printf("%-24.23s%-16.16s%8.6s%12s%9s  ",$$1,$$2,$$3,$$5,$$6)}' > \
	      $(BINTESTD)/runtests.$(PID) ; \
	   if [ -f $< ] ; then \
	      ASSAYPY=$(BINTESTD); export ASSAYPY; \
	      assay $* > $@ 2>&1 ; \
	      case $$? in \
	      0) \
	         echo "     PASS" ; \
	         ;; \
	      1) \
	         echo "FAIL (execute)" ; \
	         ;; \
	      2) \
	         echo "FAIL (verify)" ; \
	         ;; \
	      3) \
	         echo "   UNTESTED" ; \
	         ;; \
	      4) \
	         echo "   WARNING" ; \
	         ;; \
	      *) \
	         echo "   UNKNOWN" ; \
	         ;; \
	      esac ; \
	   else \
	      echo "FAIL (compile)" ; \
	   fi >> $(BINTESTD)/runtests.$(PID) ; \
	   cat $(BINTESTD)/runtests.$(PID) ; \
	   TESTID=`echo $(PCKGMOD) $* | \
	      awk '{printf("%-24.23s%-16.16s",$$1,$$2)}'` ; \
	   touch $(BINTESTD)/runtests.report ; \
	   grep -v "^$$TESTID" $(BINTESTD)/runtests.report >> $(BINTESTD)/runtests.$(PID) ; \
	   sort -u $(BINTESTD)/runtests.$(PID) > $(BINTESTD)/runtests.report 
	 @ $(RM) $(BINTESTD)/runtests.$(PID)

$(LIBEXECD)/%.g : $(CODEDIR)/%.g
	@ $(RM) $@
	@ cp $< $@
	@ chmod 664 $@

$(LIBEXECD)/%.gp : $(CODEDIR)/%.gp
	@ $(RM) $@
	@ cp $< $@
	@ chmod 664 $@

$(LIBEXECD)/%.gm : $(CODEDIR)/%.gm
	@ $(RM) $@
	@ cp $< $@
	@ chmod 664 $@

$(BINTESTD)/%.g : $(CODEDIR)/%.g
	@ cp $< $@

$(BINTESTD)/%.gp : $(CODEDIR)/%.gp
	@ cp $< $@

$(BINTESTD)/%.gm : $(CODEDIR)/%.gm
	@ cp $< $@

$(LIBEXECD)/% : $(CODEDIR)/%
	@ $(RM) $@
	cp $< $@
	@ chmod 664 $@


# Included scripts.
$(GLISHEXECS) : % : $(LIBEXECD)/% ;


# Programmer-oriented pattern rules.
ifeq "$(MAKEMODE)" "programmer"
   vpath %.cc $(CODEDIR)
   vpath templates $(CODEDIR)

   # Paths assumed by the programmer dependency lists.
   vpath %.h  $(PGMRCODE)/include:$(CODEINCD)
   vpath %.cc $(PGMRCODE)/include:$(CODEINCD)

   mylib(%.o) : $(PRGAPLIB)(%.o)
	@ if [ -f "$(PGMRLIBD)/$%" ] ; then \
	     cd $(PGMRLIBD) ; \
	     $(CXXAR) $(CXXARFLAGS) $(PRGAPLIB) $% ; \
	     $(RM) $% ; \
	     $(RANLIB) $(PRGAPLIB) ; \
	  fi

   $(PRGAPLIB)(%.o) : %.cc $(PGMRTIME)(%)
	-@ echo ""
	-@ $(RM) $(PGMRLIBD)/$%
	   $(C++) $(CPPFLAGS) $(PRGAPINC) $(PGMRINCL) -c $(C++FLAGS) -o $(PGMRLIBD)/$% $<

   $(PGMRBIND)/%.o : %.cc $(PGMRTIME)(%)
	-@ echo ""
	   $(C++) $(CPPFLAGS) $(PRGAPINC) $(PGMRINCL) -c $(C++FLAGS) -o $@ $<;

   $(PGMRBIND)/%.i : %.cc $(PGMRTIME)(%)
	-@ echo ""
	   $(CPP) $(CPPFLAGS) $(PRGAPINC) $(PGMRINCL) $< > $@

   %.d : %.cc $(PGMRTIME)(%)
	-@ echo ""
	-@ echo "Programmer dependencies for $<:"
	-@ sed -n -e '\#^$$(PGMRTIME)($*)#s#.* : #   #p' $(PGMRLIST)

   $(PGMRTIME)(%) : %.cc
	-@ echo ""
	-@ echo "Updating dependencies for $<"
	 @ for i in 10 9 8 7 6 5 4 3 2 1 ; do \
	      [ ! -f "$(PGMRLOCK)" ] && break ; \
	      echo "    waiting for lock file ($$i)..." ; \
	      sleep 5 ; \
	   done
	-@ touch $(PGMRLIST)
	 @ trap "$(RM) $(PGMRLOCK) $(PGMRLIST).$(PID)" 1 2 3 15 ; \
	      TARGET='$$(PGMRTIME)($*) : ' ; \
	      sed -n -e "\#^$$TARGET#!p" $(PGMRLIST) > $(PGMRLOCK) ; \
	      $(CPP) $(CPPFLAGS) $(PRGAPINC) $(PGMRINCL) $< | \
	      sed -n \
	          -e '\%^# *[0-9][0-9]* ".*"%!d' \
	          -e 's%.*"./\(.*\)".*%'"$$TARGET"'$$(THISDIR)/\1%p' \
	          -e 's%.*"\([^</].*\)".*%'"$$TARGET"'$$(THISDIR)/\1%p' \
	          -e 's%.*"$(CODEDIR)/\(.*\)".*%'"$$TARGET"'\1%p' \
	          -e 's%.*"$(PGMRCODE)\(/include/.*\)".*%'"$$TARGET"'$$(PGMRCODE)/\1%p' \
	          -e 's%.*"$(CODEINCD)/\(.*\)".*%'"$$TARGET"'\1%p' | \
	      sort -u | sort -m - $(PGMRLOCK) > $(PGMRLIST).$(PID)
	 @ if [ -f "$(PGMRLOCK)" ] ; then \
	      mv -f $(PGMRLIST).$(PID) $(PGMRLIST) ; \
	      $(RM) $(PGMRLOCK) ; \
	      trap "$(RM) $(PGMRAUXD)/$*" 1 2 3 15 ; \
	      cat /dev/null > $(PGMRAUXD)/$* ; \
	      $(AR) r $(PGMRTIME) $(PGMRAUXD)/$* ; \
	      $(RM) $(PGMRAUXD)/$* ; \
	   fi

   ifneq "$(PGMRBIND)" "."
      %.o : $(PGMRBIND)/%.o ;
      %.i : $(PGMRBIND)/%.i ;
   endif

   %.h : ;
   $(THISDIR)/%.cc : ;
endif

# Defeat builtin pattern rules.
%.i : %.cc
%.o : %.cc
%   : %.cc


# Static and static pattern rules.
#---------------------------------
.PRECIOUS : $(AIPSLIBS) $(AIPSVERS)

.PHONY : bin bintest exorcise instsys lib

allsys : $(GLISHEXECS) $(AIPSINST) $(BINTEST)

.cleancode ::
	-$Q cd $(CODEDIR) && $(RM) *.i *.o *.cdb *.cyi
	-$Q cd $(CODEDIR) && $(RM) -r *_tmp*
	-$Q $(RM) -r $(CODEDIR)/tmplinst

.cleansys ::
	-$Q cd $(BINTESTD) && $(RM) $(AIPSEXES) _*.$(SFXSHAR)
	-$Q cd $(BINTESTD) && $(RM) runtests.* *.report
	-$Q $(RM) $(INSTLIBR)

$(PCKGIMPD) : FORCE
	-@ echo ""
	-@ echo gmake[$(MAKELEVEL)]: $(MAKE) -C $@ allsys
	-@ $(MAKE) -C $@ allsys

lib : $(MAKEIMPD) ;

bin bintest : $(TMPPCKGD) $(foreach BINARY,$(AIPSEXES),bin/$(BINARY))
	-@ $(RM) $(INSTLIBR)

$(TMPPCKGD) :
	@ if [ ! -d "$@" ] ; then \
	      echo "" ; \
	      amkdir -p ug=rwx,g+s,o=rx -v $@ ; \
	   fi

ifneq "$(INSTLIBR)" "" 
   $(INSTLIBR) : $(CODEDIR)/tmplinst
	@ echo ""
	@ echo "Building temporary template library."
	@ $(TIMER)
	@ cd $(TMPPCKGD) && \
	  $(C++) $(C++OPTS) -I$(CODEDIR) $(AIPSINCL) -c $(AIPSINST:%=%/*.cc) ; \
	  $(CXXAR) $(ARFLAGS) $@ $(notdir $(AIPSINST:%=%/*.o)) ; \
	  $(RANLIB) $@ ; \
	  $(RM) -f $(notdir $(AIPSINST:%=%/*.o))
	@ $(TIMER)
endif

instsys : $(CODEDIR)/tmplinst ;

$(CODEDIR)/tmplinst : $(CODEDIR)/templates
	-@ echo ""
	 @ amkdir -p ug=rwx,g+s,o=rx -v $@
	-@ echo ""
	 @ cd $@ && mkinst -q $<

runtests : $(foreach PROG,$(AIPSEXES) $(LIBEXECS),$(BINTESTD)/$(PROG).report)
	-@ $(RM) $(INSTLIBR)
	-@ echo ""

cleanfail :
	 @ $(RM) `grep 'FAIL$' $(BINTESTD)/runtests.report | \
	      awk '{printf(" %s.report",$2)}'`

# Programmer-oriented static rules.
ifeq "$(MAKEMODE)" "programmer"
   .PRECIOUS : $(PGMRBIND)/%.o $(PGMRBIND)/%.i

   .PHONY : %.d inst

   all : $(PGMREXES)

   .clean ::
	- $(RM) -r *_tmp*
	- cd $(PGMRAUXD) && $(RM) *~ *% $(PCKGMOD).lock
	- cd $(PGMRLIBD) && $(RM) *.i *.o *.cdb *.cyi a.out core
	- cd $(PGMRBIND) && $(RM) *.i *.o *.cdb *.cyi a.out core

   .cleaner ::
	- cd $(PGMRAUXD) && $(RM) $(PCKGMOD)*.*
	- $(RM) $(PRGAPLIB)
	- $(RM) -r tmplinst
	- cd $(PGMRBIND) && $(RM) $(ALLEXES)
	- cd $(PGMRLIBD) && $(RM) _*.$(SFXSHAR)

   depend : $(PGMREXES:%=$(PGMRTIME)(%)) ;

   dependencies : depend $(AIPSEXES:%=$(PGMRTIME)(%)) ;

   exorcise :
	-@ if [ -f "$(PGMRLIST)" ] ; then \
	      grep "(THISDIR)" $(PGMRLIST) | \
	      awk '{print $$3}' | \
	      sort -u | \
	      while read RHS ; do \
	         DFILE=`echo $$RHS | sed -e 's#\$$(THISDIR)#$(THISDIR)#'` ; \
	         if [ ! -f "$$DFILE" ] ; then \
	            grep "$$RHS" $(PGMRLIST) | \
	            awk '{print $$1}' | \
	            sort -u | \
	            while read LHS ; do \
	               TARGET=`echo $$LHS | sed -e '{s/.*(//;s/)$$//;}'` ; \
	               echo "Deleting dependencies for $$TARGET because of" ; \
	               echo "   $$DFILE" ; \
	               grep -v "^$$LHS : " $(PGMRLIST) > $(PGMRLIST).$(PID) ; \
	               mv $(PGMRLIST).$(PID) $(PGMRLIST) ; \
	               $(AR) d $(PGMRTIME) $$TARGET ; \
	               echo "Deleting $$TARGET.o from" ; \
	               echo "   $(PRGAPLIB)" ; \
	               $(AR) d $(PRGAPLIB) $$TARGET.o ; \
	            done ; \
	         fi ; \
	      done ; \
	   fi
	-@ if [ -f "$(PGMRLIST)" ] ; then \
	      grep PGMRCODE $(PGMRLIST) | \
	      awk '{print $$3}' | \
	      sort -u | \
	      while read RHS ; do \
	         DFILE=`echo $$RHS | sed -e 's#\$$(PGMRCODE)#$(PGMRCODE)#'` ; \
	         if [ ! -f "$$DFILE" ] ; then \
	            grep "$$RHS" $(PGMRLIST) | \
	            awk '{print $$1}' | \
	            sort -u | \
	            while read LHS ; do \
	               TARGET=`echo $$LHS | sed -e '{s/.*(//;s/)$$//;}'` ; \
	               echo "Deleting dependencies for $$TARGET because of" ; \
	               echo "   $$DFILE" ; \
	               grep -v "^$$LHS : " $(PGMRLIST) > $(PGMRLIST).$(PID) ; \
	               mv $(PGMRLIST).$(PID) $(PGMRLIST) ; \
	               $(AR) d $(PGMRTIME) $$TARGET ; \
	            done ; \
	         fi ; \
	      done ; \
	   fi
	-@ if [ ! -s "$(PGMRLIST)" ] ; then \
	      $(RM) $(PGMRLIST) $(PGMRTIME) ; \
	   fi
	-@ if [ -d tmplinst ] ; then \
	      if [ -f templates ] ; then \
	         (cd tmplinst && mkinst -q ../templates) ; \
	      else \
	         (cd tmplinst && mkinst -q - < /dev/null) ; \
	      fi ; \
	      $(MAKE) -f $(THISDIR)/makefile -C tmplinst $@ ; \
	   fi

   mylib : $(PRGAPLIB) ;

   $(PRGAPLIB) : $(PGMRINST) $(PGMRIMPS:%.cc=$(PRGAPLIB)(%.o)) update_mylib ;

   inst : tmplinst FORCE
	-@ if [ -f MyTemplatesOnly ] ; then \
	      echo "" ; \
	      echo "WARNING: Ignoring system template instantiation files." ; \
	   fi
	 @ $(MAKE) -f $(THISDIR)/makefile -C $< mylib

   tmplinst : templates
	-@ echo ""
	 @ amkdir -p ug=rwx,g+s,o=rx -v $@
	-@ echo ""
	 @ case "$<" in \
	   templates) \
	      cd $@ && mkinst -q ../$< ; \
	      ;; \
	   *) \
	      cd $@ && mkinst -q - < /dev/null ; \
	      ;; \
	   esac

   update_mylib :
	@ cd $(PGMRLIBD) ; \
	  PGMROBJS="$(PGMRIMPS:%.cc=%.o)" ; \
	  [ "$$PGMROBJS" != "" ] && PGMROBJS=`ls $$PGMROBJS 2>/dev/null` ; \
	  if [ "$$PGMROBJS" != "" ] ; then \
	     $(CXXAR) $(CXXARFLAGS) $(PRGAPLIB) $$PGMROBJS ; \
	     $(RM) $$PGMROBJS ; \
	     $(RANLIB) $(PRGAPLIB) ; \
	  fi
endif

show_local :
	-@ echo ""
	-@ echo "Variables defined in the test makefile"
	-@ echo "======================================"
	-@ echo ""
	-@ echo "System"
	-@ echo "------"
	-@ echo "MODULE  =$(MODULE)"
	-@ echo "PCKGMOD =$(PCKGMOD)"
	-@ echo ""
	-@ echo "PCKGIMPD=$(PCKGIMPD)"
	-@ echo "MAKEIMPD=$(MAKEIMPD)"
	-@ echo ""
	-@ echo "TMPPCKGD=$(TMPPCKGD)"
	-@ echo ""
	-@ echo "AIPSEXES=$(AIPSEXES)"
	-@ echo "LIBEXECS=$(LIBEXECS)"
	-@ echo "GLISHEXECS=$(GLISHEXECS)"
	-@ echo "LIBEXECD=$(LIBEXECD)"
	-@ echo ""
	-@ echo "AIPSINST=$(AIPSINST)"
	-@ echo ""
	-@ echo "DBGLIBS =$(DBGLIBS)"
	-@ echo "OPTLIBS =$(OPTLIBS)"
	-@ echo "C++OPTS =$(C++OPTS)"
	-@ echo "AIPSLIBS=$(AIPSLIBS)"
	-@ echo "AIPSVERS=$(AIPSVERS)"
	-@ echo ""
	-@ echo "Programmer"
	-@ echo "----------"
	-@ echo "PGMRINST=$(PGMRINST)"
	-@ echo "PGMRIMPS=$(PGMRIMPS)"
	-@ echo "PRGAPINC=$(PRGAPINC)"
	-@ echo ""
	-@ echo "PGMRLIBR=$(PGMRLIBR)"
	-@ echo "PRGAPLIB=$(PRGAPLIB)"
	-@ echo "PGMRLIBS=$(PGMRLIBS)"
	-@ echo ""
	-@ echo "PGMREXES=$(PGMREXES)"
	-@ echo "ALLEXES =$(ALLEXES)"
	-@ echo "MAKEMODE =$(MAKEMODE)"

help ::
	-@ echo ""
	-@ echo "Targets defined in the test makefile"
	-@ echo "===================================="
	-@ echo ""
	-@ echo "System"
	-@ echo "------"
	-@ echo "        lib: initiate 'gmake allsys' in the implement"
	-@ echo "             subdirectory."
	-@ echo "      bin/%: compile a particular test program."
	-@ echo "        bin: compile all test programs."
	-@ echo "    instsys: generate diy template instantiation files."
	-@ echo "   runtests: compile and run all test programs."
	-@ echo "  cleanfail: delete reports for failed tests."
	-@ echo ""
	-@ echo "Programmer"
	-@ echo "----------"
	-@ echo "        %.o: produce an object file."
	-@ echo "        %.i: preprocess a .cc file."
	-@ echo "        %.d: list dependencies for a test program."
	-@ echo "     depend: determine dependencies for \$$(PGMREXES)."
	-@ echo "dependencies: determine dependencies for \$$(ALLEXES)."
	-@ echo "   exorcise: dispell vexatious spirits."
	-@ echo " \$$(ALLEXES): compile a specific test program."
	-@ echo "       inst: generate and instantiate diy templates."
	-@ echo "   tmplinst: generate diy template instantiation files."
	-@ echo "      mylib: instantiate diy templates."
	-@ echo "update_mylib: insert template object modules into a private"
	-@ echo "             library and ranlib it (if necessary)."
	-@ echo "      check: build, run, and check all test programs."


# Programmer dependency list.
ifeq "$(MAKEMODE)" "programmer"
   -include $(PGMRLIST)
endif
