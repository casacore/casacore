#-----------------------------------------------------------------------------
# testdefs: Test makedefs variable definitions
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1996-2004
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# This GNU makefile runs some basic tests on makedefs variable definitions.
# It is primarily intended for the private use of makedefs which invokes its
# targets in either print or print-and-test mode via the DO_TEST variable.
#
# Error levels are:
#
#   ADVISORY: A correction may be needed depending on the availability of
#             resources such as libraries or modes of compiler operation.
#
#    WARNING: An incorrect definition was found which should be fixed
#             otherwise parts of the build will fail.
#
#    SERIOUS: A fundamental problem was found which will cause the build to
#             fail.
#
# Original: 1996/03/15 by Mark Calabretta, ATNF
# $Id$
#=============================================================================

ifeq "$(TESTDEFS)" "test"
  DO_TEST := 1
endif
 
# Canned test command sequences.
#-------------------------------
# Check for the existence of a file.
define CheckFile
   if [ -f "$$2" ] ; then \
      echo "   ...file exists" ; \
   else \
      echo "   ...$$1, file doesn't exist" ; \
   fi ; \
   echo
endef

# Check for the existence of a directory.
define CheckDir
   if [ -d "$$2" ] ; then \
      echo "   ...directory exists" ; \
   elif [ "$$2" != "" ] ; then \
      echo "   ...$$1, directory doesn't exist" ; \
   fi ; \
   echo
endef

# Check for the existence of all directories in the specified path.
define CheckPath
   ERROR=0 ; \
   IFS=":" ; \
   for DIR in $$2 ; do \
      if [ ! -d "$$DIR" ] ; then \
         echo "   ...$$1, $$DIR doesn't exist" ; \
         ERROR=1 ; \
      fi ; \
   done ; \
   if [ "$$ERROR" = 0 ] ; then \
      echo "   ...all directories in the path exist" ; \
   fi ; \
   echo
endef

# Check for the existence of libraries in the specified directory.
define CheckLibs
   if [ "$$2" = / -o ! -d "$$2" ] ; then \
      LEVEL=$$1 ; \
      shift ; shift ; \
      echo "   ...$$LEVEL, no directory specified for $$*" ; \
   elif cd "$$2" ; then \
      ERROR=0 ; \
      LEVEL=$$1 ; \
      DIR=$$2 ; \
      shift ; shift ; \
      for LIB do \
         case $$LIB in \
         /*) \
            if [ ! -r "$$LIB" ] ; then \
               echo "   ...$$LEVEL, $$LIB not found" ; \
               ERROR=1 ; \
            fi ; \
            ;; \
         -l*) \
            LIBS=`echo $$LIB | sed -e 's/^-l\(.*\)/lib\1.*/'` ; \
            LIBS=`echo $$LIBS` ; \
            for LIB in $$LIBS ; do \
               case $$LIB in \
               *\*) \
                  echo "   ...$$LEVEL, $$LIB not found in $$DIR" ; \
                  ERROR=1 ; \
                  ;; \
               esac ; \
            done ; \
            ;; \
         -L*) \
            echo "   ...(this should not be necessary)" ; \
            ;; \
         *) \
            echo "   ...$$LEVEL, unrecognized library" ; \
            ;;  \
         esac ; \
      done ; \
      if [ "$$ERROR" = 0 ] ; then \
         echo "   ...all libraries found in $$DIR" ; \
      fi ; \
   fi ; \
   echo
endef

# Check for the existence of an executable.
define CheckExe
   (hash "$$2" > /dev/null 2>&1) ; \
   if [ $$? = 0 ] ; then \
      case $$2 in \
      /*) \
         echo "   ...executable found" ; \
         ;; \
      *) \
         hash $$2 ; \
         EXE=`hash | grep /$$2\$$ | awk '{print $$NF}'` ; \
         [ "$$EXE" = "" ] && EXE="(shell builtin)" ; \
         echo "   ...executable found, $$EXE" ; \
         ;; \
      esac ; \
   else \
      echo "   ...$$1, executable not found" ; \
   fi ; \
   echo
endef

# Check the syntax of a library control variable.
define CheckLCV
   COUNT=0 ; \
   LEVEL=$$1 ; \
   shift ; \
   for LCE do \
      case $$LCE in \
      defeat | static | shatic | shared) \
         COUNT=`expr $$COUNT + 1` ; \
         ;; \
      *) \
         echo "   ...$$LEVEL, $$LCE unrecognized" ; \
         ;; \
      esac ; \
   done ; \
   if [ "$$COUNT" = 6 ] ; then \
      echo "   ...syntax is correct" ; \
   else \
      echo "   ...$$LEVEL, syntactically incorrect" ; \
   fi ; \
   echo
endef
 
# Check the syntax of an AIPS++ link list variable.
define CheckLink
   FAIL=0 ; \
   LEVEL=$$1 ; \
   shift ; \
   for PKG do \
      case $$PKG in \
      casa | scimath | tables | measures | fits | lattices | coordinates | components | images | ms | msfits | msvis | calibration | ionosphere | flagging | dish | simulators | synthesis | graphics | tasking) \
         ;; \
      appsglish | appspython | contrib | vlbi | display) \
         ;; \
      alma | atnf | bima | hia | jive | nfra | npoi | nral | nrao | tifr) \
         ;; \
      *) \
         echo "   ...$$LEVEL, $$PKG unrecognized" ; \
         FAIL=1 ; \
         ;; \
      esac ; \
   done ; \
   if [ "$$PKG" != aips ] ; then \
      echo "   ...$$LEVEL, aips must be last" ; \
      FAIL=1 ; \
   fi ; \
   if [ "$$FAIL" = 0 ] ; then \
      echo "   ...syntax is correct" ; \
   fi ; \
   echo
endef
 
# Check that a number lies within the specified range.
define CheckNum
   if [ "$$2" -ge "$$3" -a "$$2" -le "$$4" ] ; then \
      echo "   ...OK, lies in range $$3 to $$4" ; \
   else \
      echo "   ...$$1, lies outside range $$3 to $$4" ; \
   fi ; \
   echo
endef


# Static and static pattern rules.
#---------------------------------
.PHONY : auxiliary global programmer system

global : system programmer auxiliary

# Test makedefs variables used in system rebuilds.
system :
	-@ echo ""
	-@ echo "System variables defined in makedefs"
	-@ echo "===================================="
	-@ echo ""
	-@ echo "Immutable variables."
	-@ echo "--------------------"
	-@ echo "SHELL   =$(SHELL)"
	-@ echo "PID     =$(PID)"
	-@ echo "comma   =$(comma)"
	-@ echo "<null>  =<$(null)>"
	-@ echo "<space> =<$(space)>"
	-@ echo "<;>     =<" $(;)		echo ">"
	-@ echo ""
	-@ echo ""
	-@ echo "AIPS++ fundamentals."
	-@ echo "--------------------"
	-@ echo "PATH    =$(PATH)"
    ifdef DO_TEST
	-@ set WARNING $(PATH) ; $(CheckPath)
    endif
	-@ echo "AIPSPATH=$(AIPSPATH)"
	-@ echo ""
	-@ echo "AIPSROOT=$(AIPSROOT)"
    ifdef DO_TEST
	-@ set SERIOUS $(AIPSROOT) ; $(CheckDir)
    endif
	-@ echo "AIPSARCH=$(AIPSARCH)"
    ifdef DO_TEST
	-@ set SERIOUS $(AIPSARCH) ; $(CheckDir)
    endif
	-@ echo "AIPSSITE=$(AIPSSITE)"
    ifdef DO_TEST
	-@ set WARNING $(AIPSSITE) ; $(CheckDir)
    endif
	-@ echo "AIPSHOST=$(AIPSHOST)"
    ifdef DO_TEST
	-@ set WARNING $(AIPSHOST) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "THISDIR =$(THISDIR)"
	-@ echo "CODESUBD=$(CODESUBD)"
	-@ echo ""
	-@ echo "PACKAGE =$(PACKAGE)"
	-@ echo ""
	-@ echo "Library and include directory variables."
	-@ echo "----------------------------------------"
	-@ echo "C++ROOT =$(C++ROOT)"
    ifdef DO_TEST
	-@ set WARNING $(C++ROOT) ; $(CheckDir)
    endif
	-@ echo "C++DEFS =$(C++DEFS)"
	-@ echo "C++INCD =$(C++INCD)"
    ifdef DO_TEST
	-@ set WARNING $(C++INCD) ; $(CheckDir)
    endif
	-@ echo "C++LIBD =$(C++LIBD)"
    ifdef DO_TEST
	-@ set WARNING $(C++LIBD) ; $(CheckDir)
    endif
	-@ echo "C++LIB  =$(C++LIB)"
    ifdef DO_TEST
	-@ set WARNING $(C++LIBD)/ $(C++LIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "GLISHROOT=$(GLISHROOT)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHROOT) ; $(CheckDir)
    endif
	-@ echo "GLISHDEFS=$(GLISHDEFS)"
	-@ echo "GLISHINCD=$(GLISHINCD)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHINCD) ; $(CheckDir)
    endif
	-@ echo "GLISHLIBD=$(GLISHLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHLIBD) ; $(CheckDir)
    endif
	-@ echo "GLISHLIB =$(GLISHLIB)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHLIBD)/ $(GLISHLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "GLISHLOROOT=$(GLISHLOROOT)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHLOROOT) ; $(CheckDir)
    endif
	-@ echo "GLISHLODEFS=$(GLISHLODEFS)"
	-@ echo "GLISHLOINCD=$(GLISHLOINCD)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHLOINCD) ; $(CheckDir)
    endif
	-@ echo "GLISHLOLIBD=$(GLISHLOLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHLOLIBD) ; $(CheckDir)
    endif
	-@ echo "GLISHLOLIB =$(GLISHLOLIB)"
    ifdef DO_TEST
	-@ set WARNING $(GLISHLOLIBD)/ $(GLISHLOLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "WCSLIBROOT=$(WCSLIBROOT)"
    ifdef DO_TEST
	-@ set WARNING $(WCSLIBROOT) ; $(CheckDir)
    endif
	-@ echo "WCSLIBDEFS=$(WCSLIBDEFS)"
	-@ echo "WCSLIBINCD=$(WCSLIBINCD)"
    ifdef DO_TEST
	-@ set WARNING $(WCSLIBINCD) ; $(CheckDir)
    endif
	-@ echo "WCSLIBLIBD=$(WCSLIBLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(WCSLIBLIBD) ; $(CheckDir)
    endif
	-@ echo "WCSLIBLIB =$(WCSLIBLIB)"
    ifdef DO_TEST
	-@ set WARNING $(WCSLIBLIBD)/ $(WCSLIBLIB) ; $(CheckLibs)
    endif
	-@ echo "WCSLIBTRIG=$(WCSLIBTRIG)"
	-@ echo ""
	-@ echo "PGPLOTROOT=$(PGPLOTROOT)"
    ifdef DO_TEST
	-@ set WARNING $(PGPLOTROOT) ; $(CheckDir)
    endif
	-@ echo "PGPLOTDEFS=$(PGPLOTDEFS)"
	-@ echo "PGPLOTINCD=$(PGPLOTINCD)"
    ifdef DO_TEST
	-@ set WARNING $(PGPLOTINCD) ; $(CheckDir)
    endif
	-@ echo "PGPLOTLIBD=$(PGPLOTLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(PGPLOTLIBD) ; $(CheckDir)
    endif
	-@ echo "PGPLOTLIB =$(PGPLOTLIB)"
    ifdef DO_TEST
	-@ set WARNING $(PGPLOTLIBD)/ $(PGPLOTLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "XmPGPLOTROOT=$(XmPGPLOTROOT)"
    ifdef DO_TEST
	-@ set WARNING $(XmPGPLOTROOT) ; $(CheckDir)
    endif
	-@ echo "XmPGPLOTDEFS=$(XmPGPLOTDEFS)"
	-@ echo "XmPGPLOTINCD=$(XmPGPLOTINCD)"
    ifdef DO_TEST
	-@ set WARNING $(XmPGPLOTINCD) ; $(CheckDir)
    endif
	-@ echo "XmPGPLOTLIBD=$(XmPGPLOTLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(XmPGPLOTLIBD) ; $(CheckDir)
    endif
	-@ echo "XmPGPLOTLIB =$(XmPGPLOTLIB)"
    ifdef DO_TEST
	-@ set WARNING $(XmPGPLOTLIBD)/ $(XmPGPLOTLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "TCLROOT =$(TCLROOT)"
    ifdef DO_TEST
	-@ set WARNING $(TCLROOT) ; $(CheckDir)
    endif
	-@ echo "TCLDEFS =$(TCLDEFS)"
	-@ echo "TCLINCD =$(TCLINCD)"
    ifdef DO_TEST
	-@ set WARNING $(TCLINCD) ; $(CheckDir)
    endif
	-@ echo "TCLLIBD =$(TCLLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(TCLLIBD) ; $(CheckDir)
    endif
	-@ echo "TCLLIB  =$(TCLLIB)"
    ifdef DO_TEST
	-@ set WARNING $(TCLLIBD)/ $(TCLLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "TKROOT  =$(TKROOT)"
    ifdef DO_TEST
	-@ set WARNING $(TKROOT) ; $(CheckDir)
    endif
	-@ echo "TKDEFS  =$(TKDEFS)"
	-@ echo "TKINCD  =$(TKINCD)"
    ifdef DO_TEST
	-@ set WARNING $(TKINCD) ; $(CheckDir)
    endif
	-@ echo "TKLIBD  =$(TKLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(TKLIBD) ; $(CheckDir)
    endif
	-@ echo "TKLIB   =$(TKLIB)"
    ifdef DO_TEST
	-@ set WARNING $(TKLIBD)/ $(TKLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "MotifROOT=$(MotifROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(MotifROOT) ; $(CheckDir)
    endif
	-@ echo "MotifDEFS=$(MotifDEFS)"
	-@ echo "MotifINCD=$(MotifINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(MotifINCD) ; $(CheckDir)
    endif
	-@ echo "MotifLIBD=$(MotifLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(MotifLIBD) ; $(CheckDir)
    endif
	-@ echo "MotifLIB =$(MotifLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(MotifLIBD)/ $(MotifLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "X11ROOT =$(X11ROOT)"
    ifdef DO_TEST
	-@ set WARNING $(X11ROOT) ; $(CheckDir)
    endif
	-@ echo "X11DEFS =$(X11DEFS)"
	-@ echo "X11INCD =$(X11INCD)"
    ifdef DO_TEST
	-@ set WARNING $(X11INCD) ; $(CheckDir)
    endif
	-@ echo "X11LIBD =$(X11LIBD)"
    ifdef DO_TEST
	-@ set WARNING $(X11LIBD) ; $(CheckDir)
    endif
	-@ echo "X11LIB  =$(X11LIB)"
    ifdef DO_TEST
	-@ set WARNING $(X11LIBD)/ $(X11LIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "XPMROOT =$(XPMROOT)"
    ifdef DO_TEST
	-@ set WARNING $(XPMROOT) ; $(CheckDir)
    endif
	-@ echo "XPMDEFS =$(XPMDEFS)"
	-@ echo "XPMINCD =$(XPMINCD)"
    ifdef DO_TEST
	-@ set WARNING $(XPMINCD) ; $(CheckDir)
    endif
	-@ echo "XPMLIBD =$(XPMLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(XPMLIBD) ; $(CheckDir)
    endif
	-@ echo "XPMLIB  =$(XPMLIB)"
    ifdef DO_TEST
	-@ set WARNING $(XPMLIBD)/ $(XPMLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "DVRROOT =$(DVRROOT)"
    ifdef DO_TEST
	-@ set WARNING $(DVRROOT) ; $(CheckDir)
    endif
	-@ echo "DVRDEFS =$(DVRDEFS)"
	-@ echo "DVRINCD =$(DVRINCD)"
    ifdef DO_TEST
	-@ set WARNING $(DVRINCD) ; $(CheckDir)
    endif
	-@ echo "DVRLIBD =$(DVRLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(DVRLIBD) ; $(CheckDir)
    endif
	-@ echo "DVRLIB  =$(DVRLIB)"
    ifdef DO_TEST
	-@ set WARNING $(DVRLIBD)/ $(DVRLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "LAPACKROOT=$(LAPACKROOT)"
    ifdef DO_TEST
	-@ set WARNING $(LAPACKROOT) ; $(CheckDir)
    endif
	-@ echo "LAPACKDEFS=$(LAPACKDEFS)"
	-@ echo "LAPACKINCD=$(LAPACKINCD)"
    ifdef DO_TEST
	-@ set WARNING $(LAPACKINCD) ; $(CheckDir)
    endif
	-@ echo "LAPACKLIBD=$(LAPACKLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(LAPACKLIBD) ; $(CheckDir)
    endif
	-@ echo "LAPACKLIB =$(LAPACKLIB)"
    ifdef DO_TEST
	-@ set WARNING $(LAPACKLIBD)/ $(LAPACKLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "F77ROOT =$(F77ROOT)"
    ifdef DO_TEST
	-@ set WARNING $(F77ROOT) ; $(CheckDir)
    endif
	-@ echo "F77DEFS =$(F77DEFS)"
	-@ echo "F77INCD =$(F77INCD)"
    ifdef DO_TEST
	-@ set WARNING $(F77INCD) ; $(CheckDir)
    endif
	-@ echo "F77LIBD =$(F77LIBD)"
    ifdef DO_TEST
	-@ set WARNING $(F77LIBD) ; $(CheckDir)
    endif
	-@ echo "F77LIB  =$(F77LIB)"
    ifdef DO_TEST
	-@ set WARNING $(F77LIBD)/ $(F77LIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "ARCHLIBS=$(ARCHLIBS)"
	-@ echo ""
	-@ echo "CFITSIOROOT=$(CFITSIOROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(CFITSIOROOT) ; $(CheckDir)
    endif
	-@ echo "CFITSIODEFS=$(CFITSIODEFS)"
	-@ echo "CFITSIOINCD=$(CFITSIOINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(CFITSIOINCD) ; $(CheckDir)
    endif
	-@ echo "CFITSIOLIBD=$(CFITSIOLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(CFITSIOLIBD) ; $(CheckDir)
    endif
	-@ echo "CFITSIOLIB =$(CFITSIOLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(CFITSIOLIBD)/ $(CFITSIOLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "RPFITSROOT=$(RPFITSROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(RPFITSROOT) ; $(CheckDir)
    endif
	-@ echo "RPFITSDEFS=$(RPFITSDEFS)"
	-@ echo "RPFITSINCD=$(RPFITSINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(RPFITSINCD) ; $(CheckDir)
    endif
	-@ echo "RPFITSLIBD=$(RPFITSLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(RPFITSLIBD) ; $(CheckDir)
    endif
	-@ echo "RPFITSLIB =$(RPFITSLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(RPFITSLIBD)/ $(RPFITSLIB) ; $(CheckLibs)
    endif

	-@ echo ""
	-@ echo "BOOSTROOT=$(BOOSTROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(BOOSTROOT) ; $(CheckDir)
    endif
	-@ echo "BOOSTDEFS=$(BOOSTDEFS)"
	-@ echo "BOOSTINCD=$(BOOSTINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(BOOSTINCD) ; $(CheckDir)
    endif
	-@ echo "BOOSTLIBD=$(BOOSTLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(BOOSTLIBD) ; $(CheckDir)
    endif
	-@ echo "BOOSTLIB =$(BOOSTLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(BOOSTLIBD)/ $(BOOSTLIB) ; $(CheckLibs)
    endif

	-@ echo ""
	-@ echo "PYTHONROOT=$(PYTHONROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(PYTHONROOT) ; $(CheckDir)
    endif
	-@ echo "PYTHONDEFS=$(PYTHONDEFS)"
	-@ echo "PYTHONINCD=$(PYTHONINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(PYTHONINCD) ; $(CheckDir)
    endif
	-@ echo "PYTHONLIBD=$(PYTHONLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(PYTHONLIBD) ; $(CheckDir)
    endif
	-@ echo "PYTHONLIB =$(PYTHONLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(PYTHONLIBD)/ $(PYTHONLIB) ; $(CheckLibs)
    endif

	-@ echo ""
	-@ echo "MIRLIBROOT=$(MIRLIBROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(MIRLIBROOT) ; $(CheckDir)
    endif
	-@ echo "MIRLIBDEFS=$(MIRLIBDEFS)"
	-@ echo "MIRLIBINCD=$(MIRLIBINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(MIRLIBINCD) ; $(CheckDir)
    endif
	-@ echo "MIRLIBLIBD=$(MIRLIBLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(MIRLIBLIBD) ; $(CheckDir)
    endif
	-@ echo "MIRLIBLIB =$(MIRLIBLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(MIRLIBLIBD)/ $(MIRLIBLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "GSDLIBROOT=$(GSDLIBROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(GSDLIBROOT) ; $(CheckDir)
    endif
	-@ echo "GSDLIBDEFS=$(GSDLIBDEFS)"
	-@ echo "GSDLIBINCD=$(GSDLIBINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(GSDLIBINCD) ; $(CheckDir)
    endif
	-@ echo "GSDLIBLIBD=$(GSDLIBLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(GSDLIBLIBD) ; $(CheckDir)
    endif
	-@ echo "GSDLIBLIB =$(GSDLIBLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(GSDLIBLIBD)/ $(GSDLIBLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "HDSROOT=$(HDSROOT)"
    ifdef DO_TEST
	-@ set ADVISORY $(HDSROOT) ; $(CheckDir)
    endif
	-@ echo "HDSDEFS=$(HDSDEFS)"
	-@ echo "HDSINCD=$(HDSINCD)"
    ifdef DO_TEST
	-@ set ADVISORY $(HDSINCD) ; $(CheckDir)
    endif
	-@ echo "HDSLIBD=$(HDSLIBD)"
    ifdef DO_TEST
	-@ set ADVISORY $(HDSLIBD) ; $(CheckDir)
    endif
	-@ echo "HDSLIB =$(HDSLIB)"
    ifdef DO_TEST
	-@ set ADVISORY $(HDSLIBD)/ $(HDSLIB) ; $(CheckLibs)
    endif
	-@ echo ""
	-@ echo "Package-dependent shared-library link lists."
	-@ echo "--------------------------------------------"
	-@ echo "XLIBLIST_shared_casa=$(XLIBLIST_shared_casa)"
	-@ echo "XLIBLIST_shared_scimath=$(XLIBLIST_shared_scimath)"
	-@ echo "XLIBLIST_shared_tables=$(XLIBLIST_shared_tables)"
	-@ echo "XLIBLIST_shared_measures=$(XLIBLIST_shared_measures)"
	-@ echo "XLIBLIST_shared_fits=$(XLIBLIST_shared_fits)"
	-@ echo "XLIBLIST_shared_lattices=$(XLIBLIST_shared_lattices)"
	-@ echo "XLIBLIST_shared_coordinates=$(XLIBLIST_shared_coordinates)"
	-@ echo "XLIBLIST_shared_components=$(XLIBLIST_shared_components)"
	-@ echo "XLIBLIST_shared_images=$(XLIBLIST_shared_images)"
	-@ echo "XLIBLIST_shared_ms=$(XLIBLIST_shared_ms)"
	-@ echo "XLIBLIST_shared_msfits=$(XLIBLIST_shared_msfits)"
	-@ echo "XLIBLIST_shared_msvis=$(XLIBLIST_shared_msvis)"
	-@ echo "XLIBLIST_shared_calibration=$(XLIBLIST_shared_calibration)"
	-@ echo "XLIBLIST_shared_ionosphere=$(XLIBLIST_shared_ionosphere)"
	-@ echo "XLIBLIST_shared_flagging=$(XLIBLIST_shared_flagging)"
	-@ echo "XLIBLIST_shared_dish=$(XLIBLIST_shared_dish)"
	-@ echo "XLIBLIST_shared_simulators=$(XLIBLIST_shared_simulators)"
	-@ echo "XLIBLIST_shared_graphics=$(XLIBLIST_shared_graphics)"
	-@ echo "XLIBLIST_shared_synthesis=$(XLIBLIST_shared_synthesis)"
	-@ echo "XLIBLIST_shared_tasking=$(XLIBLIST_shared_tasking)"
	-@ echo ""
	-@ echo "XLIBLIST_shared_display=$(XLIBLIST_shared_display)"
	-@ echo "XLIBLIST_shared_vlbi=$(XLIBLIST_shared_vlbi)"
	-@ echo "XLIBLIST_shared_contrib=$(XLIBLIST_shared_contrib)"
	-@ echo ""
	-@ echo "XLIBLIST_shared_alma=$(XLIBLIST_shared_alma)"
	-@ echo "XLIBLIST_shared_atnf=$(XLIBLIST_shared_atnf)"
	-@ echo "XLIBLIST_shared_bima=$(XLIBLIST_shared_bima)"
	-@ echo "XLIBLIST_shared_hia =$(XLIBLIST_shared_hia)"
	-@ echo "XLIBLIST_shared_jive=$(XLIBLIST_shared_jive)"
	-@ echo "XLIBLIST_shared_nfra=$(XLIBLIST_shared_nfra)"
	-@ echo "XLIBLIST_shared_npoi=$(XLIBLIST_shared_npoi)"
	-@ echo "XLIBLIST_shared_nral=$(XLIBLIST_shared_nral)"
	-@ echo "XLIBLIST_shared_nrao=$(XLIBLIST_shared_nrao)"
	-@ echo "XLIBLIST_shared_tifr=$(XLIBLIST_shared_tifr)"
	-@ echo ""
	-@ echo "Link lists and include paths."
	-@ echo "-----------------------------"
	-@ echo "XLIBSEL =$(XLIBSEL)"
	-@ echo "XLIBLIST=$(XLIBLIST)"
	-@ echo "XLIBLIST_shared=$(XLIBLIST_shared)"
	-@ echo ""
	-@ echo "XLIBPATH=$(XLIBPATH)"
	-@ echo "XTRNLIBS=$(XTRNLIBS)"
	-@ echo ""
	-@ echo "XLIBPATH_shared=$(XLIBPATH_shared)"
	-@ echo "XTRNLIBS_shared=$(XTRNLIBS_shared)"
	-@ echo "XTRNLIBS_rpath =$(XTRNLIBS_rpath)"
	-@ echo ""
	-@ echo "XTRNDEFS=$(XTRNDEFS)"
	-@ echo ""
	-@ echo "AIPSINCL=$(AIPSINCL)"
	-@ echo ""
	-@ echo "Compilation and linkage variables."
	-@ echo "----------------------------------"
	-@ echo "CO      =$(CO)"
    ifdef DO_TEST
	-@ set WARNING $(CO) ; $(CheckExe)
    endif
	-@ echo "COFLAGS =$(COFLAGS)"
	-@ echo ""
	-@ echo "CPP     =$(CPP)"
    ifdef DO_TEST
	-@ set SERIOUS $(CPP) ; $(CheckExe)
    endif
	-@ echo "CPPSTD  =$(CPPSTD)"
	-@ echo "CPPMODU =$(CPPMODU)"
	-@ echo "CPPDBG  =$(CPPDBG)"
	-@ echo "CPPOPT  =$(CPPOPT)"
	-@ echo ""
	-@ echo "CC      =$(CC)"
    ifdef DO_TEST
	-@ set SERIOUS $(CC) ; $(CheckExe)
    endif
	-@ echo "CSTD    =$(CSTD)"
	-@ echo "CDBGLVL =$(CDBGLVL)"
	-@ echo "CDBG    =$(CDBG)"
	-@ echo "COPTLVL =$(COPTLVL)"
	-@ echo "COPT    =$(COPT)"
	-@ echo ""
	-@ echo "C++     =$(C++)"
    ifdef DO_TEST
	-@ set SERIOUS $(C++) ; $(CheckExe)
    endif
	-@ echo "PTRDBGD =$(PTRDBGD)"
    ifdef DO_TEST
	-@ set ADVISORY $(PTRDBGD) ; $(CheckDir)
    endif
	-@ echo "PTROPTD =$(PTROPTD)"
    ifdef DO_TEST
	-@ set ADVISORY $(PTROPTD) ; $(CheckDir)
    endif
	-@ echo "C++STD    =$(C++STD)"
	-@ echo "C++DBGLVL =$(C++DBGLVL)"
	-@ echo "C++DBG    =$(C++DBG)"
	-@ echo "C++OPTLVL =$(C++OPTLVL)"
	-@ echo "C++OPT    =$(C++OPT)"
	-@ echo ""
	-@ echo "GLISH_CFLAGS=$(GLISH_CFLAGS)"
	-@ echo "GLISH_CXXFLAGS=$(GLISH_CXXFLAGS)"
	-@ echo ""
	-@ echo "TEMPLATES =$(TEMPLATES)"
	-@ echo ""
	-@ echo "FC      =$(FC)"
    ifdef DO_TEST
	-@ set SERIOUS $(FC) ; $(CheckExe)
    endif
	-@ echo "FCSTD   =$(FCSTD)"
	-@ echo "FCDBGLVL=$(FCDBGLVL)"
	-@ echo "FCDBG   =$(FCDBG)"
	-@ echo "FCOPTLVL=$(FCOPTLVL)"
	-@ echo "FCOPT   =$(FCOPT)"
	-@ echo ""
	-@ echo "LDSTD   =$(LDSTD)"
	-@ echo "LDDBG   =$(LDDBG)"
	-@ echo "LDOPT   =$(LDOPT)"
	-@ echo ""
	-@ echo "BISON   =$(BISON)"
    ifdef DO_TEST
	-@ set WARNING $(BISON) ; $(CheckExe)
    endif
	-@ echo "FLEX    =$(FLEX)"
    ifdef DO_TEST
	-@ set WARNING $(FLEX) ; $(CheckExe)
    endif
	-@ echo "AR      =$(AR)"
    ifdef DO_TEST
	-@ set SERIOUS $(AR) ; $(CheckExe)
    endif
	-@ echo "ARFLAGS =$(ARFLAGS)"
	-@ echo "RANLIB  =$(RANLIB)"
    ifdef DO_TEST
	-@ set SERIOUS $(RANLIB) ; $(CheckExe)
    endif
	-@ echo ""
	-@ echo "CXXAR   =$(CXXAR)"
    ifdef DO_TEST
	-@ set SERIOUS $(CXXAR) ; $(CheckExe)
    endif
	-@ echo "CXXARDBG=$(CXXARDBG)"
	-@ echo "CXXAROPT=$(CXXAROPT)"
	-@ echo ""
	-@ echo "UPDBATCH=$(UPDBATCH)"
    ifdef DO_TEST
	-@ set SERIOUS $(UPDBATCH) 100 10000 ; $(CheckNum)
    endif
	-@ echo ""
	-@ echo "LD      =$(LD)"
    ifdef DO_TEST
	-@ set SERIOUS $(LD) ; $(CheckExe)
    endif
	-@ echo "MKSO    =$(MKSO)"
	-@ echo "LDSOPTS =$(LDSOPTS)"
	-@ echo "SFXSTAT =$(SFXSTAT)"
	-@ echo "SFXSHAR =$(SFXSHAR)"
	-@ echo ""
	-@ echo "                   C++            C          FORTRAN"
	-@ echo "                dbg    opt    dbg    opt    dbg    opt"
	-@ echo "              ------------- ------------- -------------"
	-@ echo "LIBcasa        =$(LIBcasa)"
    ifdef DO_TEST
	-@ set SERIOUS $(LIBcasa) ; $(CheckLCV)
    endif
	-@ echo "LIBscimath     =$(LIBscimath)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBscimath) ; $(CheckLCV)
    endif
	-@ echo "LIBtables      =$(LIBtables)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBtables) ; $(CheckLCV)
    endif
	-@ echo "LIBmeasures    =$(LIBmeasures)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBmeasures) ; $(CheckLCV)
    endif
	-@ echo "LIBfits        =$(LIBfits)"
    ifdef DO_TEST
	-@ set WARNING $(LIBfits) ; $(CheckLCV)
    endif
	-@ echo "LIBlattices    =$(LIBlattices)"
    ifdef DO_TEST
	-@ set WARNING $(LIBlattices) ; $(CheckLCV)
    endif
	-@ echo "LIBcoordinates =$(LIBcoordinates)"
    ifdef DO_TEST
	-@ set WARNING $(LIBcoordinates) ; $(CheckLCV)
    endif
	-@ echo "LIBcomponents  =$(LIBcomponents)"
    ifdef DO_TEST
	-@ set WARNING $(LIBcomponents) ; $(CheckLCV)
    endif
	-@ echo "LIBimages      =$(LIBimages)"
    ifdef DO_TEST
	-@ set WARNING $(LIBimages) ; $(CheckLCV)
    endif
	-@ echo "LIBms          =$(LIBms)"
    ifdef DO_TEST
	-@ set WARNING $(LIBms) ; $(CheckLCV)
    endif
	-@ echo "LIBmsfits      =$(LIBmsfits)"
    ifdef DO_TEST
	-@ set WARNING $(LIBmsfits) ; $(CheckLCV)
    endif
	-@ echo "LIBmsvis       =$(LIBmsvis)"
    ifdef DO_TEST
	-@ set WARNING $(LIBmsvis) ; $(CheckLCV)
    endif
	-@ echo "LIBcalibration =$(LIBcalibration)"
    ifdef DO_TEST
	-@ set WARNING $(LIBcalibration) ; $(CheckLCV)
    endif
	-@ echo "LIBionosphere  =$(LIBionosphere)"
    ifdef DO_TEST
	-@ set WARNING $(LIBionosphere) ; $(CheckLCV)
    endif
	-@ echo "LIBflagging    =$(LIBflagging)"
    ifdef DO_TEST
	-@ set WARNING $(LIBflagging) ; $(CheckLCV)
    endif
	-@ echo "LIBdish        =$(LIBdish)"
    ifdef DO_TEST
	-@ set WARNING $(LIBdish) ; $(CheckLCV)
    endif
	-@ echo "LIBsimulators  =$(LIBsimulators)"
    ifdef DO_TEST
	-@ set WARNING $(LIBsimulators) ; $(CheckLCV)
    endif
	-@ echo "LIBsynthesis   =$(LIBsynthesis)"
    ifdef DO_TEST
	-@ set WARNING $(LIBsynthesis) ; $(CheckLCV)
    endif
	-@ echo "LIBgraphics    =$(LIBgraphics)"
    ifdef DO_TEST
	-@ set WARNING $(LIBgraphics) ; $(CheckLCV)
    endif
	-@ echo "LIBtasking     =$(LIBtasking)"
    ifdef DO_TEST
	-@ set WARNING $(LIBtasking) ; $(CheckLCV)
    endif
	-@ echo "LIBvlbi      =$(LIBvlbi)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBvlbi) ; $(CheckLCV)
    endif
	-@ echo "LIBcontrib   =$(LIBcontrib)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBcontrib) ; $(CheckLCV)
    endif
	-@ echo "LIBdisplay   =$(LIBdisplay)"
    ifdef DO_TEST
	-@ set WARNING $(LIBdisplay) ; $(CheckLCV)
    endif
	-@ echo "LIBalma      =$(LIBalma)"
    ifdef DO_TEST
	-@ set WARNING $(LIBalma) ; $(CheckLCV)
    endif
	-@ echo "LIBatnf      =$(LIBatnf)"
    ifdef DO_TEST
	-@ set WARNING $(LIBatnf) ; $(CheckLCV)
    endif
	-@ echo "LIBbima      =$(LIBbima)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBbima) ; $(CheckLCV)
    endif
	-@ echo "LIBhia       =$(LIBhia)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBhia) ; $(CheckLCV)
    endif
	-@ echo "LIBjive      =$(LIBjive)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBjive) ; $(CheckLCV)
    endif
	-@ echo "LIBnfra      =$(LIBnfra)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBnfra) ; $(CheckLCV)
    endif
	-@ echo "LIBnpoi      =$(LIBnpoi)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBnpoi) ; $(CheckLCV)
    endif
	-@ echo "LIBnral      =$(LIBnral)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBnral) ; $(CheckLCV)
    endif
	-@ echo "LIBnrao      =$(LIBnrao)"
    ifdef DO_TEST
	-@ set WARNING $(LIBnrao) ; $(CheckLCV)
    endif
	-@ echo "LIBtifr      =$(LIBtifr)"
    ifdef DO_TEST
	-@ set ADVISORY $(LIBtifr) ; $(CheckLCV)
    endif
	-@ echo ""
	-@ echo "LINKcasa        =$(LINKcasa)"
    ifdef DO_TEST
	-@ set SERIOUS $(LINKcasa) ; $(CheckLink)
    endif
	-@ echo "LINKscimath     =$(LINKscimath)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKscimath) ; $(CheckLink)
    endif
	-@ echo "LINKtables      =$(LINKtables)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKtables) ; $(CheckLink)
    endif
	-@ echo "LINKmeasures    =$(LINKmeasures)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKmeasures) ; $(CheckLink)
    endif
	-@ echo "LINKfits        =$(LINKfits)"
    ifdef DO_TEST
	-@ set WARNING $(LINKfits) ; $(CheckLink)
    endif
	-@ echo "LINKlattices    =$(LINKlattices)"
    ifdef DO_TEST
	-@ set WARNING $(LINKlattices) ; $(CheckLink)
    endif
	-@ echo "LINKcoordinates =$(LINKcoordinates)"
    ifdef DO_TEST
	-@ set WARNING $(LINKcoordinates) ; $(CheckLink)
    endif
	-@ echo "LINKcomponents  =$(LINKcomponents)"
    ifdef DO_TEST
	-@ set WARNING $(LINKcomponents) ; $(CheckLink)
    endif
	-@ echo "LINKimages      =$(LINKimages)"
    ifdef DO_TEST
	-@ set WARNING $(LINKimages) ; $(CheckLink)
    endif
	-@ echo "LINKms          =$(LINKms)"
    ifdef DO_TEST
	-@ set WARNING $(LINKms) ; $(CheckLink)
    endif
	-@ echo "LINKmsfits      =$(LINKmsfits)"
    ifdef DO_TEST
	-@ set WARNING $(LINKmsfits) ; $(CheckLink)
    endif
	-@ echo "LINKmsvis       =$(LINKmsvis)"
    ifdef DO_TEST
	-@ set WARNING $(LINKmsvis) ; $(CheckLink)
    endif
	-@ echo "LINKcalibration =$(LINKcalibration)"
    ifdef DO_TEST
	-@ set WARNING $(LINKcalibration) ; $(CheckLink)
    endif
	-@ echo "LINKionosphere  =$(LINKionosphere)"
    ifdef DO_TEST
	-@ set WARNING $(LINKionosphere) ; $(CheckLink)
    endif
	-@ echo "LINKflagging    =$(LINKflagging)"
    ifdef DO_TEST
	-@ set WARNING $(LINKflagging) ; $(CheckLink)
    endif
	-@ echo "LINKdish        =$(LINKdish)"
    ifdef DO_TEST
	-@ set WARNING $(LINKdish) ; $(CheckLink)
    endif
	-@ echo "LINKsimulators  =$(LINKsimulators)"
    ifdef DO_TEST
	-@ set WARNING $(LINKsimulators) ; $(CheckLink)
    endif
	-@ echo "LINKsynthesis   =$(LINKsynthesis)"
    ifdef DO_TEST
	-@ set WARNING $(LINKsynthesis) ; $(CheckLink)
    endif
	-@ echo "LINKgraphics    =$(LINKgraphics)"
    ifdef DO_TEST
	-@ set WARNING $(LINKgraphics) ; $(CheckLink)
    endif
	-@ echo "LINKtasking     =$(LINKtasking)"
    ifdef DO_TEST
	-@ set WARNING $(LINKtasking) ; $(CheckLink)
    endif
	-@ echo "LINKappsglish  =$(LINKappsglish)"
    ifdef DO_TEST
	-@ set WARNING $(LINKappsglish) ; $(CheckLink)
    endif
	-@ echo "LINKappspython  =$(LINKappspython)"
    ifdef DO_TEST
	-@ set WARNING $(LINKappspython) ; $(CheckLink)
    endif
	-@ echo "LINKvlbi     =$(LINKvlbi)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKvlbi) ; $(CheckLink)
    endif
	-@ echo "LINKcontrib  =$(LINKcontrib)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKcontrib) ; $(CheckLink)
    endif
	-@ echo "LINKdisplay  =$(LINKdisplay)"
    ifdef DO_TEST
	-@ set WARNING $(LINKdisplay) ; $(CheckLink)
    endif
	-@ echo "LINKalma     =$(LINKalma)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKalma) ; $(CheckLink)
    endif
	-@ echo "LINKatnf     =$(LINKatnf)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKatnf) ; $(CheckLink)
    endif
	-@ echo "LINKbima     =$(LINKbima)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKbima) ; $(CheckLink)
    endif
	-@ echo "LINKhia      =$(LINKhia)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKhia)  ; $(CheckLink)
    endif
	-@ echo "LINKjive     =$(LINKjive)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKjive) ; $(CheckLink)
    endif
	-@ echo "LINKnfra     =$(LINKnfra)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKnfra) ; $(CheckLink)
    endif
	-@ echo "LINKnpoi     =$(LINKnpoi)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKnpoi) ; $(CheckLink)
    endif
	-@ echo "LINKnral     =$(LINKnral)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKnral) ; $(CheckLink)
    endif
	-@ echo "LINKnrao     =$(LINKnrao)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKnrao) ; $(CheckLink)
    endif
	-@ echo "LINKtifr     =$(LINKtifr)"
    ifdef DO_TEST
	-@ set ADVISORY $(LINKtifr) ; $(CheckLink)
    endif
	-@ echo ""
	-@ echo "PERL4   =$(PERL4)"
    ifdef DO_TEST
	-@ set ADVISORY $(PERL4) ; $(CheckExe)
    endif
	-@ echo "PERL5   =$(PERL5)"
    ifdef DO_TEST
	-@ set ADVISORY $(PERL5) ; $(CheckExe)
    endif
	-@ echo ""
	-@ echo "RM      =$(RM)"
    ifdef DO_TEST
	-@ set WARNING $(RM) ; $(CheckExe)
    endif
	-@ echo ""
	-@ echo "TEXBINROOT=$(TEXBINROOT)"
    ifdef DO_TEST
	-@ set WARNING $(TEXBINROOT) ; $(CheckDir)
    endif
	-@ echo "TEX     =$(TEX)"
    ifdef DO_TEST
	-@ set WARNING $(TEX) ; $(CheckExe)
    endif
	-@ echo "LATEX   =$(LATEX)"
    ifdef DO_TEST
	-@ set WARNING $(LATEX) ; $(CheckExe)
    endif
	-@ echo "BIBTEX  =$(BIBTEX)"
    ifdef DO_TEST
	-@ set WARNING $(BIBTEX) ; $(CheckExe)
    endif
	-@ echo "DVIPS   =$(DVIPS)"
    ifdef DO_TEST
	-@ set WARNING $(DVIPS) ; $(CheckExe)
    endif
	-@ echo "TEXINDEX=$(TEXINDEX)"
    ifdef DO_TEST
	-@ set WARNING $(TEXINDEX) ; $(CheckExe)
    endif
	-@ echo "MAKEINDEX  =$(MAKEINDEX)"
    ifdef DO_TEST
	-@ set WARNING $(MAKEINDEX) ; $(CheckExe)
    endif
	-@ echo "LATEX2HTMLBIN=$(LATEX2HTMLBIN)"
    ifdef DO_TEST
	-@ set WARNING $(LATEX2HTMLBIN) ; $(CheckExe)
    endif
	-@ echo "LATEX2HTMLINIT=$(LATEX2HTMLINIT)"
	-@ echo "LATEX2HTML=$(LATEX2HTML)"
	-@ echo "ICONSERVER=$(ICONSERVER)"
	-@ echo "ICONS2LOCAL=$(ICONS2LOCAL)"
    ifdef DO_TEST
	-@ set WARNING $(ICONS2LOCAL) ; $(CheckExe)
    endif
	-@ echo ""
	-@ echo "TEXROOT   =$(TEXROOT)"
    ifdef DO_TEST
	-@ set WARNING $(TEXROOT) ; $(CheckDir)
    endif
	-@ echo "TEXFONTS  =$(TEXFONTS)"
    ifdef DO_TEST
	-@ set WARNING $(TEXFONTS) ; $(CheckPath)
    endif
	-@ echo "TEXFORMATS=$(TEXFORMATS)"
    ifdef DO_TEST
	-@ set WARNING $(TEXFORMATS) ; $(CheckPath)
    endif
	-@ echo "TEXINPUTS =$(TEXINPUTS)"
    ifdef DO_TEST
	-@ set WARNING $(TEXINPUTS) ; $(CheckPath)
    endif
	-@ echo "TEXPOOL   =$(TEXPOOL)"
    ifdef DO_TEST
	-@ set WARNING $(TEXPOOL) ; $(CheckPath)
    endif
	-@ echo ""
	-@ echo "TEXPKS  =$(TEXPKS)"
    ifdef DO_TEST
	-@ set WARNING $(TEXPKS) ; $(CheckPath)
    endif
	-@ echo ""
	-@ echo "MFBASES =$(MFBASES)"
    ifdef DO_TEST
	-@ set WARNING $(MFBASES) ; $(CheckPath)
    endif
	-@ echo "MFINPUTS=$(MFINPUTS)"
    ifdef DO_TEST
	-@ set WARNING $(MFINPUTS) ; $(CheckPath)
    endif
	-@ echo "MFPOOL  =$(MFPOOL)"
    ifdef DO_TEST
	-@ set WARNING $(MFPOOL) ; $(CheckPath)
    endif
	-@ echo ""
	-@ echo "Makefile control variables."
	-@ echo "MAKE     =$(MAKE)"
    ifdef DO_TEST
	-@ set WARNING $(MAKE) ; $(CheckExe)
    endif
	-@ echo "INTRA_MAKEFLAGS=$(INTRA_MAKEFLAGS)"
	-@ echo "TIMER    =$(TIMER)"
    ifdef DO_TEST
	-@ case "$(TIMER)" in \
	   "") \
	      echo "   ...ok" ; \
	      echo ; \
	      ;; \
	   *) \
	      set WARNING $(TIMER) ; $(CheckExe) ; \
	      ;; \
	   esac
    endif
	-@ echo "DOCSYS   =$(DOCSYS)"
    ifdef DO_TEST
	-@ case "$(DOCSYS)" in \
	   "" | doc | resolvedocs) \
	      echo "   ...syntax is correct" ; \
	      ;; \
	   *) \
	      echo "   ...WARNING, $(DOCSYS) is not recognized" ; \
	      ;; \
	   esac ; \
	   echo
    endif
	-@ echo "DOCEXTR  =$(DOCEXTR)"
    ifdef DO_TEST
	-@ case "$(DOCEXTR)" in \
	   "" | "docscan docextr" | "docscan docextr changelogs" ) \
	      echo "   ...syntax is correct" ; \
	      ;; \
	   *) \
	      echo "   ...WARNING, $(DOCEXTR) is not recognized" ; \
	      ;; \
	   esac ; \
	   echo
    endif
	-@ echo "AUXILIARY=$(AUXILIARY)"
    ifdef DO_TEST
	-@ FAIL=0 ; \
	   for i in "" $(AUXILIARY) ; do \
	      case $$i in \
	      "" | contrib | display) \
	         ;; \
	      *) \
	         echo "   ...WARNING, $$i is not an auxiliary package" ; \
	         FAIL=1 ; \
	         ;; \
	      esac ; \
	   done ; \
	   if [ "$$FAIL" = 0 ] ; then \
	      echo "   ...syntax is correct" ; \
	   fi ; \
	   echo
    endif
	-@ echo "CONSORTIA=$(CONSORTIA)"
    ifdef DO_TEST
	-@ FAIL=0 ; \
	   for i in "" $(CONSORTIA) ; do \
	      case $$i in \
	      "" | atnf | bima | hia | nfra | nral | nrao | tifr) \
	         ;; \
	      alma | jive | npoi) \
	         ;; \
	      *) \
	         echo "   ...WARNING, $$i is not a consortium package" ; \
	         FAIL=1 ; \
	         ;; \
	      esac ; \
	   done ; \
	   if [ "$$FAIL" = 0 ] ; then \
	      echo "   ...syntax is correct" ; \
	   fi ; \
	   echo
    endif
	-@ echo "MEGASERVE=$(MEGASERVE)"
	-@ echo "TESTOPT  =$(TESTOPT)"
    ifdef DO_TEST
	-@ case "$(TESTOPT)" in \
	   dbg | opt) \
	      echo "   ...syntax is correct" ; \
	      ;; \
	   *) \
	      echo "   ...WARNING, $(TESTOPT) is not recognized" ; \
	      ;; \
	   esac ; \
	   echo
    endif
	-@ echo "BINTEST  =$(BINTEST)"
    ifdef DO_TEST
	-@ case "$(BINTEST)" in \
	   "" | bin) \
	      echo "   ...syntax is correct" ; \
	      ;; \
	   *) \
	      echo "   ...WARNING, $(BINTEST) is not recognized" ; \
	      ;; \
	   esac ; \
	   echo
    endif
	-@ echo ""
	-@ echo "SITEDEFS =$(SITEDEFS)"
	-@ echo "MAKEFLAGS=$(MAKEFLAGS)"

# Test makedefs variables of particular interest to programmers.
programmer :
	-@ echo ""
	-@ echo "Programmer variables defined in makedefs"
	-@ echo "========================================"
	-@ echo ""
	-@ echo "Programmer directories."
	-@ echo "-----------------------"
	-@ echo "PGMRROOT=$(PGMRROOT)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRROOT) ; $(CheckDir)
    endif
	-@ echo "PGMRCODE=$(PGMRCODE)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRCODE) ; $(CheckDir)
    endif
	-@ echo "PGMRARCH=$(PGMRARCH)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRARCH) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "MAKEMODE=$(MAKEMODE)"
	-@ echo ""
	-@ echo "PGMRINCD=$(PGMRINCD)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRINCD) ; $(CheckDir)
    endif
	-@ echo "PGMRLIBD=$(PGMRLIBD)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRLIBD) ; $(CheckDir)
    endif
	-@ echo "PGMRBIND=$(PGMRBIND)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRBIND) ; $(CheckDir)
    endif
	-@ echo "PGMRAUXD=$(PGMRAUXD)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRAUXD) ; $(CheckDir)
    endif
	-@ echo "PGMRPTRD=$(PGMRPTRD)"
    ifdef DO_TEST
	-@ set WARNING $(PGMRPTRD) ; $(CheckDir)
    endif
	-@ echo "PGMRDIR =$(PGMRDIR)"
	-@ echo "PGMRSUBS=$(PGMRSUBS)"
	-@ echo ""
	-@ echo "Programmer include path and libraries."
	-@ echo "--------------------------------------"
	-@ echo "EXTRA_PGMRINCL=$(EXTRA_PGMRINCL)"
	-@ echo "PGMRINCL=$(PGMRINCL)"
	-@ echo ""
	-@ echo "EXTRA_PGMRLIBS=$(EXTRA_PGMRLIBS)"
	-@ echo "PGMRLIBS=$(PGMRLIBS)"
	-@ echo ""
	-@ echo "OPT     =$(OPT)"
	-@ echo ""
	-@ echo "Programmer preprocessor flags."
	-@ echo "------------------------------"
	-@ echo "CPPFLAGS=$(CPPFLAGS)"
	-@ echo "EXTRA_CPPFLAGS=$(EXTRA_CPPFLAGS)"
	-@ echo ""
	-@ echo "Programmer C compiler flags."
	-@ echo "----------------------------"
	-@ echo "CFLAGS=$(CFLAGS)"
	-@ echo "EXTRA_CFLAGS=$(EXTRA_CFLAGS)"
	-@ echo ""
	-@ echo "Programmer C++ compiler flags."
	-@ echo "------------------------------"
	-@ echo "C++FLAGS=$(C++FLAGS)"
	-@ echo "EXTRA_C++FLAGS=$(EXTRA_C++FLAGS)"
	-@ echo ""
	-@ echo "Programmer FORTRAN compiler flags."
	-@ echo "----------------------------------"
	-@ echo "FFLAGS=$(FFLAGS)"
	-@ echo "EXTRA_FFLAGS=$(EXTRA_FFLAGS)"
	-@ echo ""
	-@ echo "Programmer linker flags."
	-@ echo "------------------------"
	-@ echo "LDFLAGS=$(LDFLAGS)"
	-@ echo "EXTRA_LDFLAGS=$(EXTRA_LDFLAGS)"
	-@ echo ""
	-@ echo "Programmer C++ archiver flags."
	-@ echo "------------------------------"
	-@ echo "CXXARFLAGS=$(CXXARFLAGS)"
	-@ echo "EXTRA_CXXARFLAGS=$(EXTRA_CXXARFLAGS)"

# Test auxiliary makedefs variables used in system rebuilds.
auxiliary :
	-@ echo ""
	-@ echo "Auxiliary variables defined in makedefs"
	-@ echo "========================================"
	-@ echo ""
	-@ echo "Static variables changeable on the command line only."
	-@ echo "-----------------------------------------------------"
	-@ echo "AIPSMSTR=$(AIPSMSTR)"
    ifdef DO_TEST
	-@ set WARNING $(AIPSMSTR) ; $(CheckDir)
    endif
	-@ echo "AIPSLAVE=$(AIPSLAVE)"
    ifdef DO_TEST
	-@ set WARNING $(AIPSLAVE) ; $(CheckDir)
    endif
	-@ echo "AIPSCODE=$(AIPSCODE)"
    ifdef DO_TEST
	-@ set WARNING $(AIPSCODE) ; $(CheckDir)
    endif
	-@ echo "AIPSDOCS=$(AIPSDOCS)"
    ifdef DO_TEST
	-@ set WARNING $(AIPSDOCS) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "CODEINSD=$(CODEINSD)"
    ifdef DO_TEST
	-@ set WARNING $(CODEINSD) ; $(CheckDir)
    endif
	-@ echo "CODEINCD=$(CODEINCD)"
    ifdef DO_TEST
	-@ set WARNING $(CODEINCD) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "INSTARCH=$(INSTARCH)"
    ifdef DO_TEST
	-@ set WARNING $(INSTARCH) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "ARCHAUXD=$(ARCHAUXD)"
    ifdef DO_TEST
	-@ set WARNING $(ARCHAUXD) ; $(CheckDir)
    endif
	-@ echo "ARCHTMPD=$(ARCHTMPD)"
    ifdef DO_TEST
	-@ set WARNING $(ARCHTMPD) ; $(CheckDir)
    endif
	-@ echo "ARCHBIND=$(ARCHBIND)"
    ifdef DO_TEST
	-@ set WARNING $(ARCHBIND) ; $(CheckDir)
    endif
	-@ echo "ARCHDOCD=$(ARCHDOCD)"
    ifdef DO_TEST
	-@ set WARNING $(ARCHDOCD) ; $(CheckDir)
    endif
	-@ echo "ARCHMAN1=$(ARCHMAN1)"
    ifdef DO_TEST
	-@ set WARNING $(ARCHMAN1) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "LIBDBGD =$(LIBDBGD)"
    ifdef DO_TEST
	-@ set WARNING $(LIBDBGD) ; $(CheckDir)
    endif
	-@ echo "LIBOPTD =$(LIBOPTD)"
    ifdef DO_TEST
	-@ set WARNING $(LIBOPTD) ; $(CheckDir)
    endif
	-@ echo "LIBEXECD=$(LIBEXECD)"
    ifdef DO_TEST
	-@ set WARNING $(LIBEXECD) ; $(CheckDir)
    endif
	-@ echo "LIBICOND=$(LIBICOND)"
    ifdef DO_TEST
	-@ set WARNING $(LIBICOND) ; $(CheckDir)
    endif
	-@ echo "BINDBGD =$(BINDBGD)"
    ifdef DO_TEST
	-@ set WARNING $(BINDBGD) ; $(CheckDir)
    endif
	-@ echo "BINOPTD =$(BINOPTD)"
    ifdef DO_TEST
	-@ set WARNING $(BINOPTD) ; $(CheckDir)
    endif
	-@ echo "BINTESTD=$(BINTESTD)"
    ifdef DO_TEST
	-@ set WARNING $(BINTESTD) ; $(CheckDir)
    endif
	-@ echo ""
	-@ echo "SYSDIRS =$(SYSDIRS)"
	-@ echo ""
	-@ echo "Dynamic variables changeable on the command line only."
	-@ echo "------------------------------------------------------"
	-@ echo "AIPSRCS =$(AIPSRCS)"
	-@ echo ""
	-@ echo "CODEDIR =$(CODEDIR)"
	-@ echo "RCSDIR  =$(RCSDIR)"
	-@ echo "CHKDIR  =$(CHKDIR)"
	-@ echo ""
	-@ echo "SUBDIRS =$(SUBDIRS)"
	-@ echo "CODESUBS=$(CODESUBS)"
	-@ echo ""
	-@ echo "AIPSSRCS=$(AIPSSRCS)"
	-@ echo ""
	-@ echo "NODEP   =$(NODEP)"
	-@ echo ""
	-@ echo "TARGET  =$(TARGET)"
	-@ echo "COMMAND =$(COMMAND)"
	-@ echo "VARS    =$(VARS)"
