//# MeasTable.cc: MeasTable provides Measure computing database data
//# Copyright (C) 1995-1999,2000-2004
//# Associated Universities, Inc. Washington DC, USA.
//#
//# This library is free software; you can redistribute it and/or modify it
//# under the terms of the GNU Library General Public License as published by
//# the Free Software Foundation; either version 2 of the License, or (at your
//# option) any later version.
//#
//# This library is distributed in the hope that it will be useful, but WITHOUT
//# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
//# License for more details.
//#
//# You should have received a copy of the GNU Library General Public License
//# along with this library; if not, write to the Free Software Foundation,
//# Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
//#
//# Correspondence concerning AIPS++ should be addressed as follows:
//#        Internet email: aips2-request@nrao.edu.
//#        Postal address: AIPS++ Project Office
//#                        National Radio Astronomy Observatory
//#                        520 Edgemont Road
//#                        Charlottesville, VA 22903-2475 USA
//#
//# $Id$

//# Includes
#include <measures/Measures/MeasTable.h>
#include <casa/Arrays/ArrayMath.h>
#include <casa/Containers/RecordField.h>
#include <casa/Logging/LogIO.h>
#include <casa/BasicSL/Constants.h>
#include <casa/BasicMath/Math.h>
#include <measures/Measures/MPosition.h>
#include <measures/Measures/MDirection.h>
#include <measures/Measures/MeasIERS.h>
#include <measures/Measures/MeasJPL.h>
#include <casa/OS/Time.h>
#include <casa/OS/Path.h>
#include <casa/Quanta/UnitVal.h>
#include <casa/Quanta/RotMatrix.h>
#include <casa/Quanta/Euler.h>
#include <casa/Utilities/MUString.h>
#include <casa/Quanta/MVAngle.h>
#include <casa/Quanta/MVEpoch.h>
#include <tables/Tables/Table.h>
#include <tables/Tables/TableRecord.h>
#include <tables/Tables/TableRow.h>
#include <tables/Tables/ArrayColumn.h>
#include <casa/System/Aipsrc.h>
#include <casa/System/AipsrcValue.h>
#include <casa/Utilities/Assert.h>

namespace casa { //# NAMESPACE CASA - BEGIN

#ifndef CASADATA
#define CASADATA "/usr/local"
#endif


//# Constants

//# Static class Data
MutexedInit MeasTable::obsMutexedInit (MeasTable::doInitObservatories);
Vector<String> MeasTable::obsNams(0);
Vector<MPosition> MeasTable::obsPos(0);
Vector<String> MeasTable::antResponsesPath(0);
MutexedInit MeasTable::lineMutexedInit (MeasTable::doInitLines);
Vector<String> MeasTable::lineNams(0);
Vector<MFrequency> MeasTable::linePos(0);
MutexedInit MeasTable::srcMutexedInit (MeasTable::doInitSources);
Vector<String> MeasTable::srcNams(0);
Vector<MDirection> MeasTable::srcPos(0);
Double MeasTable::timeIGRF = -1e6;
Double MeasTable::dtimeIGRF = 0;
Double MeasTable::time0IGRF = -1e6;
Double MeasTable::firstIGRF = 0;
Double MeasTable::lastIGRF = 0;
Vector<Double> MeasTable::coefIGRF(0);
Vector<Double> MeasTable::dIGRF(0);
Vector<Double> MeasTable::resIGRF(0);
uInt MeasTable::iau2000_reg = 0;
uInt MeasTable::iau2000a_reg = 0;
Mutex MeasTable::theirMutex;

//# Member functions
Bool MeasTable::useIAU2000() {
  if (!MeasTable::iau2000_reg) {
    iau2000_reg =
      AipsrcValue<Bool>::registerRC(String("measures.iau2000.b_use"),
                                    False);
  }
  return AipsrcValue<Bool>::get(MeasTable::iau2000_reg);
}

Bool MeasTable::useIAU2000A() {
  if (!MeasTable::iau2000a_reg) {
    iau2000a_reg =
      AipsrcValue<Bool>::registerRC(String("measures.iau2000.b_use2000a"),
                                    False);
  }
  return AipsrcValue<Bool>::get(MeasTable::iau2000a_reg);
}

Double MeasTable::
precRate00(const uInt which) {
  static Double preoblcor[3] = { -0.29965*C::arcsec,
				 -0.02524*C::arcsec,
				 0*C::arcsec };
  DebugAssert(which < 3, AipsError);
  return preoblcor[which];
}

RotMatrix MeasTable::
frameBias00() {
  static Double bias[3] = { -0.041775*C::arcsec,
			    -0.0068192*C::arcsec,
			    -0.0146*C::arcsec};
  static RotMatrix rbias = RotMatrix(Euler(bias[2], 3,
					   bias[0]*sin(MeasData::eps0J2000()),
					   2, -bias[1], 1));
  return rbias;
}

void MeasTable::
precessionCoef(Double T,
	       Polynomial<Double> result[3]) {
  static const Double PCOEF[3][6] = {
    {+2306.2181,+1.39656,-0.000139,+0.30188,-0.000344,+0.017998},
    {+2004.3109,-0.85330,-0.000217,-0.42665,-0.000217,-0.041833},
    {+2306.2181,+1.39656,-0.000139,+1.09468,-0.000066,+0.018203}
  };
  calcPrecesCoef(T, result, &PCOEF[0]);
}

void MeasTable::
precessionCoef2000(Polynomial<Double> result[3]) {
  static const Double PCOEF[3][6] = {
    { 2.5976176,2306.0809506, 0.3019015, 0.0179663,-0.0000327,-0.0000002},
    { 0.0,      2004.1917476,-0.4269353,-0.0418251,-0.0000601,-0.0000001},
    {-2.5976176,2306.0803226, 1.0947790, 0.0182273,-0.0000470,-0.0000003}
  };
  calcPrecesCoef2000(result, &PCOEF[0]);
}

void MeasTable::precessionCoef1950(Double T,
				   Polynomial<Double> result[3]) {
  static const Double PCOEF[3][6] = {
    {2303.5545,+1.39720,0.000060,+0.30240,-0.000270,+0.017995},
    {2005.1120,-0.85290,-0.00037,-0.42650,-0.000370,-0.041800},
    {2303.5545,+1.39720,0.000060,+1.09480,+0.000390,+0.018325}
  };
  calcPrecesCoef(T, result, &PCOEF[0]);
}

void MeasTable::calcPrecesCoef(Double T, Polynomial<Double> result[3],
			       const Double coef[3][6]) {
  Int l; Int m=1;
  for (uInt i=0; i<3; i++) {
    m = -m;
    l = 0;
    for (uInt j=0; j<3; j++) {
      Polynomial<Double> poly(2-j);
      for (uInt k=0; k<3-j; k++, l++) {
	poly.setCoefficient(k,coef[i][l]);
      }
      result[i].setCoefficient(j+1,m*poly(T) * C::arcsec);
    }
  }
}

void MeasTable::calcPrecesCoef2000(Polynomial<Double> result[3],
				   const Double coef[3][6]) {
  Int m=1;
  for (uInt i=0; i<3; i++) {
    m = -m;
    for (uInt j=0; j<6; j++) {
      result[i].setCoefficient(j, m*coef[i][j] * C::arcsec);
    }
  }
}

const Polynomial<Double> &MeasTable::fundArg(uInt which) {
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[6];
  static const Double FUND[6][4] = {
    {  84381.448,        -46.8150,-0.0059, 0.001813}, 
    { 485866.733, 1717915922.633, 31.310,  0.064}, 
    {1287099.804,  129596581.224, -0.577, -0.012}, 
    { 335778.877, 1739527263.137,-13.257,  0.011}, 
    {1072261.307, 1602961601.328, -6.891,  0.019}, 
    { 450160.280,   -6962890.539,  7.455,  0.008}
  };
  calcFundArg(needInit, polyArray, &FUND[0]);
  DebugAssert(which < 6, AipsError);
  return polyArray[which];
}

const Polynomial<Double> &MeasTable::fundArg1950(uInt which) {
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[6];
  static const Double FUND[6][4] = {
    {  84428.26,        -46.846,-0.0059, 0.00181},
    {1065976.59, 1717915856.79, 33.09,   0.0518},
    { 1290513.0,  129596579.1,  -0.54,  -0.0120},
    {   40503.2, 1739527290.54,-11.56,  -0.0012},
    { 1262654.95,1602961611.18, -5.17,   0.0068},
    {  933059.79,  -6962911.23,  7.48,   0.0080}
  };
  calcFundArg(needInit, polyArray, &FUND[0]);
  DebugAssert(which < 6, AipsError);
  return polyArray[which];
}

const Polynomial<Double> &MeasTable::fundArg2000(uInt which) {
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[6];
  static const Double FUND[6][5] = {
    {  84381.448,    -46.8150-0.02524, -0.0059,  0.001813,  0.0},
    { 485868.249036, 1717915923.2178,  31.8792,  0.051635, -0.00024470},
    {1287104.79305,   129596581.0481,  -0.5532,  0.000136, -0.00001149},
    { 335779.526232, 1739527262.8478, -12.7512, -0.001037,  0.00000417},
    {1072260.70369,  1602961601.2090, - 6.3706,  0.006593, -0.00003169},
    { 450160.398036,   -6962890.5431,   7.4722,  0.007702, -0.00005939}
  };
  calcFundArg00(needInit, polyArray, &FUND[0]);
  DebugAssert(which < 6, AipsError);
  return polyArray[which];
}

const Polynomial<Double> &MeasTable::planetaryArg2000(uInt which) {
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[14];
  static const Double FUND[8][2] = {
    { 4.402608842, 2608.7903141574 },
    { 3.176146697, 1021.3285546211 },
    { 1.753470314,  628.3075849991 },
    { 6.203480913,  334.0612426700 },
    { 0.599546497,   52.9690962641 },
    { 0.874016757,   21.3299104960 },
    { 5.481293871,    7.4781598567 },
    { 5.321159000,    3.8127774000 }
  };
  calcPlanArg00(needInit, polyArray, &FUND[0]);
  DebugAssert(which < 14, AipsError);
  return polyArray[which];
}

void MeasTable::calcFundArg(volatile Bool &need, 
			    Polynomial<Double> result[6],
			    const Double coeff[6][4]) {
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      Int i,j;
      for (i=0; i<6; i++) {
        result[i] = Polynomial<Double>(3);
        for (j=0; j<4; j++) {
          result[i].setCoefficient(j, coeff[i][j]*C::arcsec);
        }
      }
      need = False;
    }
  }
}    

void MeasTable::calcFundArg00(volatile Bool &need, 
			      Polynomial<Double> result[6],
			      const Double coeff[6][5]) {
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      Int i,j;
      for (i=0; i<6; i++) {
        result[i] = Polynomial<Double>(4);
        for (j=0; j<5; j++) {
          result[i].setCoefficient(j, coeff[i][j]*C::arcsec);
        }
      }
      need = False;
    }
  }
}    

void MeasTable::calcPlanArg00(volatile Bool &need, 
			      Polynomial<Double> result[14],
			      const Double coeff[8][2]) {
  static const Double APA[3] = { 0.0, 0.02438175, 0.00000538691 };
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      for (uInt i=0; i<5; i++) result[i] = fundArg2000(i+1);
      for (uInt i=5; i<13; i++) {
        result[i] = Polynomial<Double>(1);
        for (uInt j=0; j<2; j++) {
          result[i].setCoefficient(j, coeff[i-5][j]);
        }
      }
      result[13] = Polynomial<Double>(2);
      for (uInt j=0; j<3; j++) {
        result[13].setCoefficient(j, APA[j]);
      }
      need = False;
    }
  }
}    

const Vector<Char> &MeasTable::mulArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[106];
  static const Char ARG[106][5] = {
    {0	,0	,0	,0	,1	},
    {0	,0	,0	,0	,2	},
    {-2	,0	,2	,0	,1	},
    {2	,0	,-2	,0	,0	},
    {-2	,0	,2	,0	,2	},
    
    {1	,-1	,0	,-1	,0	},
    {0	,-2	,2	,-2	,1	},
    {2	,0	,-2	,0	,1	},
    {0	,0	,2	,-2	,2	},
    {0	,1	,0	,0	,0	},
    
    {0	,1	,2	,-2	,2	},
    {0	,-1	,2	,-2	,2	},
    {0	,0	,2	,-2	,1	},
    {2	,0	,0	,-2	,0	},
    {0	,0	,2	,-2	,0	},
    
    {0	,2	,0	,0	,0	},
    {0	,1	,0	,0	,1	},
    {0	,2	,2	,-2	,2	},
    {0	,-1	,0	,0	,1	},
    {-2	,0	,0	,2	,1	},
    
    {0	,-1	,2	,-2	,1	},
    {2	,0	,0	,-2	,1	},
    {0	,1	,2	,-2	,1	},
    {1	,0	,0	,-1	,0	},
    {2	,1	,0	,-2	,0	},
    
    {0	,0	,-2	,2	,1	},
    {0	,1	,-2	,2	,0	},
    {0	,1	,0	,0	,2	},
    {-1	,0	,0	,1	,1	},
    {0	,1	,2	,-2	,0	},
    
    {0	,0	,2	,0	,2	},
    {1	,0	,0	,0	,0	},
    {0	,0	,2	,0	,1	},
    {1	,0	,2	,0	,2	},
    {1	,0	,0	,-2	,0	},
    
    {-1	,0	,2	,0	,2	},
    {0	,0	,0	,2	,0	},
    {1	,0	,0	,0	,1	},
    {-1	,0	,0	,0	,1	},
    {-1	,0	,2	,2	,2	},
    
    {1	,0	,2	,0	,1	},
    {0	,0	,2	,2	,2	},
    {2	,0	,0	,0	,0	},
    {1	,0	,2	,-2	,2	},
    {2	,0	,2	,0	,2	},
    
    {0	,0	,2	,0	,0	},
    {-1	,0	,2	,0	,1	},
    {-1	,0	,0	,2	,1	},
    {1	,0	,0	,-2	,1	},
    {-1	,0	,2	,2	,1	},
    
    {1	,1	,0	,-2	,0	},
    {0	,1	,2	,0	,2	},
    {0	,-1	,2	,0	,2	},
    {1	,0	,2	,2	,2	},
    {1	,0	,0	,2	,0	},
    
    {2	,0	,2	,-2	,2	},
    {0	,0	,0	,2	,1	},
    {0	,0	,2	,2	,1	},
    {1	,0	,2	,-2	,1	},
    {0	,0	,0	,-2	,1	},
    
    {1	,-1	,0	,0	,0	},
    {2	,0	,2	,0	,1	},
    {0	,1	,0	,-2	,0	},
    {1	,0	,-2	,0	,0	},
    {0	,0	,0	,1	,0	},
    
    {1	,1	,0	,0	,0	},
    {1	,0	,2	,0	,0	},
    {1	,-1	,2	,0	,2	},
    {-1	,-1	,2	,2	,2	},
    {-2	,0	,0	,0	,1	},
    
    {3	,0	,2	,0	,2	},
    {0	,-1	,2	,2	,2	},
    {1	,1	,2	,0	,2	},
    {-1	,0	,2	,-2	,1	},
    {2	,0	,0	,0	,1	},
    
    {1	,0	,0	,0	,2	},
    {3	,0	,0	,0	,0	},
    {0	,0	,2	,1	,2	},
    {-1	,0	,0	,0	,2	},
    {1	,0	,0	,-4	,0	},
    
    {-2	,0	,2	,2	,2	},
    {-1	,0	,2	,4	,2	},
    {2	,0	,0	,-4	,0	},
    {1	,1	,2	,-2	,2	},
    {1	,0	,2	,2	,1	},
    
    {-2	,0	,2	,4	,2	},
    {-1	,0	,4	,0	,2	},
    {1	,-1	,0	,-2	,0	},
    {2	,0	,2	,-2	,1	},
    {2	,0	,2	,2	,2	},
    
    {1	,0	,0	,2	,1	},
    {0	,0	,4	,-2	,2	},
    {3	,0	,2	,-2	,2	},
    {1	,0	,2	,-2	,0	},
    {0	,1	,2	,0	,1	},
    
    {-1	,-1	,0	,2	,1	},
    {0	,0	,-2	,0	,1	},
    {0	,0	,2	,-1	,2	},
    {0	,1	,0	,2	,0	},
    {1	,0	,-2	,-2	,0	},
    
    {0	,-1	,2	,0	,1	},
    {1	,1	,0	,-2	,1	},
    {1	,0	,-2	,2	,0	},
    {2	,0	,0	,2	,0	},
    {0	,0	,2	,4	,2	},
    
    {0	,1	,0	,1	,0	}
  };
  calcMulArg(needInit, argArray, &ARG[0], 106);
  DebugAssert(which < 106, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulArg2000A(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[678];
  static const Char ARG[678][5] = {
  //         Multiple of        
  //    L     L'    F     D   Omega  
     {  0,    0,    0,    0,    1},   //    1
     {  0,    0,    2,   -2,    2},   //    2
     {  0,    0,    2,    0,    2},   //    3
     {  0,    0,    0,    0,    2},   //    4
     {  0,    1,    0,    0,    0},   //    5
     {  0,    1,    2,   -2,    2},   //    6
     {  1,    0,    0,    0,    0},   //    7
     {  0,    0,    2,    0,    1},   //    8
     {  1,    0,    2,    0,    2},   //    9
     {  0,   -1,    2,   -2,    2},   //   10
     {  0,    0,    2,   -2,    1},   //   11
     { -1,    0,    2,    0,    2},   //   12
     { -1,    0,    0,    2,    0},   //   13
     {  1,    0,    0,    0,    1},   //   14
     { -1,    0,    0,    0,    1},   //   15
     { -1,    0,    2,    2,    2},   //   16
     {  1,    0,    2,    0,    1},   //   17
     { -2,    0,    2,    0,    1},   //   18
     {  0,    0,    0,    2,    0},   //   19
     {  0,    0,    2,    2,    2},   //   20
     {  0,   -2,    2,   -2,    2},   //   21
     { -2,    0,    0,    2,    0},   //   22
     {  2,    0,    2,    0,    2},   //   23
     {  1,    0,    2,   -2,    2},   //   24
     { -1,    0,    2,    0,    1},   //   25
     {  2,    0,    0,    0,    0},   //   26
     {  0,    0,    2,    0,    0},   //   27
     {  0,    1,    0,    0,    1},   //   28
     { -1,    0,    0,    2,    1},   //   29
     {  0,    2,    2,   -2,    2},   //   30
     {  0,    0,   -2,    2,    0},   //   31
     {  1,    0,    0,   -2,    1},   //   32
     {  0,   -1,    0,    0,    1},   //   33
     { -1,    0,    2,    2,    1},   //   34
     {  0,    2,    0,    0,    0},   //   35
     {  1,    0,    2,    2,    2},   //   36
     { -2,    0,    2,    0,    0},   //   37
     {  0,    1,    2,    0,    2},   //   38
     {  0,    0,    2,    2,    1},   //   39
     {  0,   -1,    2,    0,    2},   //   40
     {  0,    0,    0,    2,    1},   //   41
     {  1,    0,    2,   -2,    1},   //   42
     {  2,    0,    2,   -2,    2},   //   43
     { -2,    0,    0,    2,    1},   //   44
     {  2,    0,    2,    0,    1},   //   45
     {  0,   -1,    2,   -2,    1},   //   46
     {  0,    0,    0,   -2,    1},   //   47
     { -1,   -1,    0,    2,    0},   //   48
     {  2,    0,    0,   -2,    1},   //   49
     {  1,    0,    0,    2,    0},   //   50
     {  0,    1,    2,   -2,    1},   //   51
     {  1,   -1,    0,    0,    0},   //   52
     { -2,    0,    2,    0,    2},   //   53
     {  3,    0,    2,    0,    2},   //   54
     {  0,   -1,    0,    2,    0},   //   55
     {  1,   -1,    2,    0,    2},   //   56
     {  0,    0,    0,    1,    0},   //   57
     { -1,   -1,    2,    2,    2},   //   58
     { -1,    0,    2,    0,    0},   //   59
     {  0,   -1,    2,    2,    2},   //   60
     { -2,    0,    0,    0,    1},   //   61
     {  1,    1,    2,    0,    2},   //   62
     {  2,    0,    0,    0,    1},   //   63
     { -1,    1,    0,    1,    0},   //   64
     {  1,    1,    0,    0,    0},   //   65
     {  1,    0,    2,    0,    0},   //   66
     { -1,    0,    2,   -2,    1},   //   67
     {  1,    0,    0,    0,    2},   //   68
     { -1,    0,    0,    1,    0},   //   69
     {  0,    0,    2,    1,    2},   //   70
     { -1,    0,    2,    4,    2},   //   71
     { -1,    1,    0,    1,    1},   //   72
     {  0,   -2,    2,   -2,    1},   //   73
     {  1,    0,    2,    2,    1},   //   74
     { -2,    0,    2,    2,    2},   //   75
     { -1,    0,    0,    0,    2},   //   76
     {  1,    1,    2,   -2,    2},   //   77
     { -2,    0,    2,    4,    2},   //   78
     { -1,    0,    4,    0,    2},   //   79
     {  2,    0,    2,   -2,    1},   //   80
     {  2,    0,    2,    2,    2},   //   81
     {  1,    0,    0,    2,    1},   //   82
     {  3,    0,    0,    0,    0},   //   83
     {  3,    0,    2,   -2,    2},   //   84
     {  0,    0,    4,   -2,    2},   //   85
     {  0,    1,    2,    0,    1},   //   86
     {  0,    0,   -2,    2,    1},   //   87
     {  0,    0,    2,   -2,    3},   //   88
     { -1,    0,    0,    4,    0},   //   89
     {  2,    0,   -2,    0,    1},   //   90
     { -2,    0,    0,    4,    0},   //   91
     { -1,   -1,    0,    2,    1},   //   92
     { -1,    0,    0,    1,    1},   //   93
     {  0,    1,    0,    0,    2},   //   94
     {  0,    0,   -2,    0,    1},   //   95
     {  0,   -1,    2,    0,    1},   //   96
     {  0,    0,    2,   -1,    2},   //   97
     {  0,    0,    2,    4,    2},   //   98
     { -2,   -1,    0,    2,    0},   //   99
     {  1,    1,    0,   -2,    1},   //  100
     { -1,    1,    0,    2,    0},   //  101
     { -1,    1,    0,    1,    2},   //  102
     {  1,   -1,    0,    0,    1},   //  103
     {  1,   -1,    2,    2,    2},   //  104
     { -1,    1,    2,    2,    2},   //  105
     {  3,    0,    2,    0,    1},   //  106
     {  0,    1,   -2,    2,    0},   //  107
     { -1,    0,    0,   -2,    1},   //  108
     {  0,    1,    2,    2,    2},   //  109
     { -1,   -1,    2,    2,    1},   //  110
     {  0,   -1,    0,    0,    2},   //  111
     {  1,    0,    2,   -4,    1},   //  112
     { -1,    0,   -2,    2,    0},   //  113
     {  0,   -1,    2,    2,    1},   //  114
     {  2,   -1,    2,    0,    2},   //  115
     {  0,    0,    0,    2,    2},   //  116
     {  1,   -1,    2,    0,    1},   //  117
     { -1,    1,    2,    0,    2},   //  118
     {  0,    1,    0,    2,    0},   //  119
     {  0,   -1,   -2,    2,    0},   //  120
     {  0,    3,    2,   -2,    2},   //  121
     {  0,    0,    0,    1,    1},   //  122
     { -1,    0,    2,    2,    0},   //  123
     {  2,    1,    2,    0,    2},   //  124
     {  1,    1,    0,    0,    1},   //  125
     {  1,    1,    2,    0,    1},   //  126
     {  2,    0,    0,    2,    0},   //  127
     {  1,    0,   -2,    2,    0},   //  128
     { -1,    0,    0,    2,    2},   //  129
     {  0,    1,    0,    1,    0},   //  130
     {  0,    1,    0,   -2,    1},   //  131
     { -1,    0,    2,   -2,    2},   //  132
     {  0,    0,    0,   -1,    1},   //  133
     { -1,    1,    0,    0,    1},   //  134
     {  1,    0,    2,   -1,    2},   //  135
     {  1,   -1,    0,    2,    0},   //  136
     {  0,    0,    0,    4,    0},   //  137
     {  1,    0,    2,    1,    2},   //  138
     {  0,    0,    2,    1,    1},   //  139
     {  1,    0,    0,   -2,    2},   //  140
     { -1,    0,    2,    4,    1},   //  141
     {  1,    0,   -2,    0,    1},   //  142
     {  1,    1,    2,   -2,    1},   //  143
     {  0,    0,    2,    2,    0},   //  144
     { -1,    0,    2,   -1,    1},   //  145
     { -2,    0,    2,    2,    1},   //  146
     {  4,    0,    2,    0,    2},   //  147
     {  2,   -1,    0,    0,    0},   //  148
     {  2,    1,    2,   -2,    2},   //  149
     {  0,    1,    2,    1,    2},   //  150
     {  1,    0,    4,   -2,    2},   //  151
     { -1,   -1,    0,    0,    1},   //  152
     {  0,    1,    0,    2,    1},   //  153
     { -2,    0,    2,    4,    1},   //  154
     {  2,    0,    2,    0,    0},   //  155
     {  1,    0,    0,    1,    0},   //  156
     { -1,    0,    0,    4,    1},   //  157
     { -1,    0,    4,    0,    1},   //  158
     {  2,    0,    2,    2,    1},   //  159
     {  0,    0,    2,   -3,    2},   //  160
     { -1,   -2,    0,    2,    0},   //  161
     {  2,    1,    0,    0,    0},   //  162
     {  0,    0,    4,    0,    2},   //  163
     {  0,    0,    0,    0,    3},   //  164
     {  0,    3,    0,    0,    0},   //  165
     {  0,    0,    2,   -4,    1},   //  166
     {  0,   -1,    0,    2,    1},   //  167
     {  0,    0,    0,    4,    1},   //  168
     { -1,   -1,    2,    4,    2},   //  169
     {  1,    0,    2,    4,    2},   //  170
     { -2,    2,    0,    2,    0},   //  171
     { -2,   -1,    2,    0,    1},   //  172
     { -2,    0,    0,    2,    2},   //  173
     { -1,   -1,    2,    0,    2},   //  174
     {  0,    0,    4,   -2,    1},   //  175
     {  3,    0,    2,   -2,    1},   //  176
     { -2,   -1,    0,    2,    1},   //  177
     {  1,    0,    0,   -1,    1},   //  178
     {  0,   -2,    0,    2,    0},   //  179
     { -2,    0,    0,    4,    1},   //  180
     { -3,    0,    0,    0,    1},   //  181
     {  1,    1,    2,    2,    2},   //  182
     {  0,    0,    2,    4,    1},   //  183
     {  3,    0,    2,    2,    2},   //  184
     { -1,    1,    2,   -2,    1},   //  185
     {  2,    0,    0,   -4,    1},   //  186
     {  0,    0,    0,   -2,    2},   //  187
     {  2,    0,    2,   -4,    1},   //  188
     { -1,    1,    0,    2,    1},   //  189
     {  0,    0,    2,   -1,    1},   //  190
     {  0,   -2,    2,    2,    2},   //  191
     {  2,    0,    0,    2,    1},   //  192
     {  4,    0,    2,   -2,    2},   //  193
     {  2,    0,    0,   -2,    2},   //  194
     {  0,    2,    0,    0,    1},   //  195
     {  1,    0,    0,   -4,    1},   //  196
     {  0,    2,    2,   -2,    1},   //  197
     { -3,    0,    0,    4,    0},   //  198
     { -1,    1,    2,    0,    1},   //  199
     { -1,   -1,    0,    4,    0},   //  200
     { -1,   -2,    2,    2,    2},   //  201
     { -2,   -1,    2,    4,    2},   //  202
     {  1,   -1,    2,    2,    1},   //  203
     { -2,    1,    0,    2,    0},   //  204
     { -2,    1,    2,    0,    1},   //  205
     {  2,    1,    0,   -2,    1},   //  206
     { -3,    0,    2,    0,    1},   //  207
     { -2,    0,    2,   -2,    1},   //  208
     { -1,    1,    0,    2,    2},   //  209
     {  0,   -1,    2,   -1,    2},   //  210
     { -1,    0,    4,   -2,    2},   //  211
     {  0,   -2,    2,    0,    2},   //  212
     { -1,    0,    2,    1,    2},   //  213
     {  2,    0,    0,    0,    2},   //  214
     {  0,    0,    2,    0,    3},   //  215
     { -2,    0,    4,    0,    2},   //  216
     { -1,    0,   -2,    0,    1},   //  217
     { -1,    1,    2,    2,    1},   //  218
     {  3,    0,    0,    0,    1},   //  219
     { -1,    0,    2,    3,    2},   //  220
     {  2,   -1,    2,    0,    1},   //  221
     {  0,    1,    2,    2,    1},   //  222
     {  0,   -1,    2,    4,    2},   //  223
     {  2,   -1,    2,    2,    2},   //  224
     {  0,    2,   -2,    2,    0},   //  225
     { -1,   -1,    2,   -1,    1},   //  226
     {  0,   -2,    0,    0,    1},   //  227
     {  1,    0,    2,   -4,    2},   //  228
     {  1,   -1,    0,   -2,    1},   //  229
     { -1,   -1,    2,    0,    1},   //  230
     {  1,   -1,    2,   -2,    2},   //  231
     { -2,   -1,    0,    4,    0},   //  232
     { -1,    0,    0,    3,    0},   //  233
     { -2,   -1,    2,    2,    2},   //  234
     {  0,    2,    2,    0,    2},   //  235
     {  1,    1,    0,    2,    0},   //  236
     {  2,    0,    2,   -1,    2},   //  237
     {  1,    0,    2,    1,    1},   //  238
     {  4,    0,    0,    0,    0},   //  239
     {  2,    1,    2,    0,    1},   //  240
     {  3,   -1,    2,    0,    2},   //  241
     { -2,    2,    0,    2,    1},   //  242
     {  1,    0,    2,   -3,    1},   //  243
     {  1,    1,    2,   -4,    1},   //  244
     { -1,   -1,    2,   -2,    1},   //  245
     {  0,   -1,    0,   -1,    1},   //  246
     {  0,   -1,    0,   -2,    1},   //  247
     { -2,    0,    0,    0,    2},   //  248
     { -2,    0,   -2,    2,    0},   //  249
     { -1,    0,   -2,    4,    0},   //  250
     {  1,   -2,    0,    0,    0},   //  251
     {  0,    1,    0,    1,    1},   //  252
     { -1,    2,    0,    2,    0},   //  253
     {  1,   -1,    2,   -2,    1},   //  254
     {  1,    2,    2,   -2,    2},   //  255
     {  2,   -1,    2,   -2,    2},   //  256
     {  1,    0,    2,   -1,    1},   //  257
     {  2,    1,    2,   -2,    1},   //  258
     { -2,    0,    0,   -2,    1},   //  259
     {  1,   -2,    2,    0,    2},   //  260
     {  0,    1,    2,    1,    1},   //  261
     {  1,    0,    4,   -2,    1},   //  262
     { -2,    0,    4,    2,    2},   //  263
     {  1,    1,    2,    1,    2},   //  264
     {  1,    0,    0,    4,    0},   //  265
     {  1,    0,    2,    2,    0},   //  266
     {  2,    0,    2,    1,    2},   //  267
     {  3,    1,    2,    0,    2},   //  268
     {  4,    0,    2,    0,    1},   //  269
     { -2,   -1,    2,    0,    0},   //  270
     {  0,    1,   -2,    2,    1},   //  271
     {  1,    0,   -2,    1,    0},   //  272
     {  0,   -1,   -2,    2,    1},   //  273
     {  2,   -1,    0,   -2,    1},   //  274
     { -1,    0,    2,   -1,    2},   //  275
     {  1,    0,    2,   -3,    2},   //  276
     {  0,    1,    2,   -2,    3},   //  277
     {  0,    0,    2,   -3,    1},   //  278
     { -1,    0,   -2,    2,    1},   //  279
     {  0,    0,    2,   -4,    2},   //  280
     { -2,    1,    0,    0,    1},   //  281
     { -1,    0,    0,   -1,    1},   //  282
     {  2,    0,    2,   -4,    2},   //  283
     {  0,    0,    4,   -4,    4},   //  284
     {  0,    0,    4,   -4,    2},   //  285
     { -1,   -2,    0,    2,    1},   //  286
     { -2,    0,    0,    3,    0},   //  287
     {  1,    0,   -2,    2,    1},   //  288
     { -3,    0,    2,    2,    2},   //  289
     { -3,    0,    2,    2,    1},   //  290
     { -2,    0,    2,    2,    0},   //  291
     {  2,   -1,    0,    0,    1},   //  292
     { -2,    1,    2,    2,    2},   //  293
     {  1,    1,    0,    1,    0},   //  294
     {  0,    1,    4,   -2,    2},   //  295
     { -1,    1,    0,   -2,    1},   //  296
     {  0,    0,    0,   -4,    1},   //  297
     {  1,   -1,    0,    2,    1},   //  298
     {  1,    1,    0,    2,    1},   //  299
     { -1,    2,    2,    2,    2},   //  300
     {  3,    1,    2,   -2,    2},   //  301
     {  0,   -1,    0,    4,    0},   //  302
     {  2,   -1,    0,    2,    0},   //  303
     {  0,    0,    4,    0,    1},   //  304
     {  2,    0,    4,   -2,    2},   //  305
     { -1,   -1,    2,    4,    1},   //  306
     {  1,    0,    0,    4,    1},   //  307
     {  1,   -2,    2,    2,    2},   //  308
     {  0,    0,    2,    3,    2},   //  309
     { -1,    1,    2,    4,    2},   //  310
     {  3,    0,    0,    2,    0},   //  311
     { -1,    0,    4,    2,    2},   //  312
     {  1,    1,    2,    2,    1},   //  313
     { -2,    0,    2,    6,    2},   //  314
     {  2,    1,    2,    2,    2},   //  315
     { -1,    0,    2,    6,    2},   //  316
     {  1,    0,    2,    4,    1},   //  317
     {  2,    0,    2,    4,    2},   //  318
     {  1,    1,   -2,    1,    0},   //  319
     { -3,    1,    2,    1,    2},   //  320
     {  2,    0,   -2,    0,    2},   //  321
     { -1,    0,    0,    1,    2},   //  322
     { -4,    0,    2,    2,    1},   //  323
     { -1,   -1,    0,    1,    0},   //  324
     {  0,    0,   -2,    2,    2},   //  325
     {  1,    0,    0,   -1,    2},   //  326
     {  0,   -1,    2,   -2,    3},   //  327
     { -2,    1,    2,    0,    0},   //  328
     {  0,    0,    2,   -2,    4},   //  329
     { -2,   -2,    0,    2,    0},   //  330
     { -2,    0,   -2,    4,    0},   //  331
     {  0,   -2,   -2,    2,    0},   //  332
     {  1,    2,    0,   -2,    1},   //  333
     {  3,    0,    0,   -4,    1},   //  334
     { -1,    1,    2,   -2,    2},   //  335
     {  1,   -1,    2,   -4,    1},   //  336
     {  1,    1,    0,   -2,    2},   //  337
     { -3,    0,    2,    0,    0},   //  338
     { -3,    0,    2,    0,    2},   //  339
     { -2,    0,    0,    1,    0},   //  340
     {  0,    0,   -2,    1,    0},   //  341
     { -3,    0,    0,    2,    1},   //  342
     { -1,   -1,   -2,    2,    0},   //  343
     {  0,    1,    2,   -4,    1},   //  344
     {  2,    1,    0,   -4,    1},   //  345
     {  0,    2,    0,   -2,    1},   //  346
     {  1,    0,    0,   -3,    1},   //  347
     { -2,    0,    2,   -2,    2},   //  348
     { -2,   -1,    0,    0,    1},   //  349
     { -4,    0,    0,    2,    0},   //  350
     {  1,    1,    0,   -4,    1},   //  351
     { -1,    0,    2,   -4,    1},   //  352
     {  0,    0,    4,   -4,    1},   //  353
     {  0,    3,    2,   -2,    2},   //  354
     { -3,   -1,    0,    4,    0},   //  355
     { -3,    0,    0,    4,    1},   //  356
     {  1,   -1,   -2,    2,    0},   //  357
     { -1,   -1,    0,    2,    2},   //  358
     {  1,   -2,    0,    0,    1},   //  359
     {  1,   -1,    0,    0,    2},   //  360
     {  0,    0,    0,    1,    2},   //  361
     { -1,   -1,    2,    0,    0},   //  362
     {  1,   -2,    2,   -2,    2},   //  363
     {  0,   -1,    2,   -1,    1},   //  364
     { -1,    0,    2,    0,    3},   //  365
     {  1,    1,    0,    0,    2},   //  366
     { -1,    1,    2,    0,    0},   //  367
     {  1,    2,    0,    0,    0},   //  368
     { -1,    2,    2,    0,    2},   //  369
     { -1,    0,    4,   -2,    1},   //  370
     {  3,    0,    2,   -4,    2},   //  371
     {  1,    2,    2,   -2,    1},   //  372
     {  1,    0,    4,   -4,    2},   //  373
     { -2,   -1,    0,    4,    1},   //  374
     {  0,   -1,    0,    2,    2},   //  375
     { -2,    1,    0,    4,    0},   //  376
     { -2,   -1,    2,    2,    1},   //  377
     {  2,    0,   -2,    2,    0},   //  378
     {  1,    0,    0,    1,    1},   //  379
     {  0,    1,    0,    2,    2},   //  380
     {  1,   -1,    2,   -1,    2},   //  381
     { -2,    0,    4,    0,    1},   //  382
     {  2,    1,    0,    0,    1},   //  383
     {  0,    1,    2,    0,    0},   //  384
     {  0,   -1,    4,   -2,    2},   //  385
     {  0,    0,    4,   -2,    4},   //  386
     {  0,    2,    2,    0,    1},   //  387
     { -3,    0,    0,    6,    0},   //  388
     { -1,   -1,    0,    4,    1},   //  389
     {  1,   -2,    0,    2,    0},   //  390
     { -1,    0,    0,    4,    2},   //  391
     { -1,   -2,    2,    2,    1},   //  392
     { -1,    0,    0,   -2,    2},   //  393
     {  1,    0,   -2,   -2,    1},   //  394
     {  0,    0,   -2,   -2,    1},   //  395
     { -2,    0,   -2,    0,    1},   //  396
     {  0,    0,    0,    3,    1},   //  397
     {  0,    0,    0,    3,    0},   //  398
     { -1,    1,    0,    4,    0},   //  399
     { -1,   -1,    2,    2,    0},   //  400
     { -2,    0,    2,    3,    2},   //  401
     {  1,    0,    0,    2,    2},   //  402
     {  0,   -1,    2,    1,    2},   //  403
     {  3,   -1,    0,    0,    0},   //  404
     {  2,    0,    0,    1,    0},   //  405
     {  1,   -1,    2,    0,    0},   //  406
     {  0,    0,    2,    1,    0},   //  407
     {  1,    0,    2,    0,    3},   //  408
     {  3,    1,    0,    0,    0},   //  409
     {  3,   -1,    2,   -2,    2},   //  410
     {  2,    0,    2,   -1,    1},   //  411
     {  1,    1,    2,    0,    0},   //  412
     {  0,    0,    4,   -1,    2},   //  413
     {  1,    2,    2,    0,    2},   //  414
     { -2,    0,    0,    6,    0},   //  415
     {  0,   -1,    0,    4,    1},   //  416
     { -2,   -1,    2,    4,    1},   //  417
     {  0,   -2,    2,    2,    1},   //  418
     {  0,   -1,    2,    2,    0},   //  419
     { -1,    0,    2,    3,    1},   //  420
     { -2,    1,    2,    4,    2},   //  421
     {  2,    0,    0,    2,    2},   //  422
     {  2,   -2,    2,    0,    2},   //  423
     { -1,    1,    2,    3,    2},   //  424
     {  3,    0,    2,   -1,    2},   //  425
     {  4,    0,    2,   -2,    1},   //  426
     { -1,    0,    0,    6,    0},   //  427
     { -1,   -2,    2,    4,    2},   //  428
     { -3,    0,    2,    6,    2},   //  429
     { -1,    0,    2,    4,    0},   //  430
     {  3,    0,    0,    2,    1},   //  431
     {  3,   -1,    2,    0,    1},   //  432
     {  3,    0,    2,    0,    0},   //  433
     {  1,    0,    4,    0,    2},   //  434
     {  5,    0,    2,   -2,    2},   //  435
     {  0,   -1,    2,    4,    1},   //  436
     {  2,   -1,    2,    2,    1},   //  437
     {  0,    1,    2,    4,    2},   //  438
     {  1,   -1,    2,    4,    2},   //  439
     {  3,   -1,    2,    2,    2},   //  440
     {  3,    0,    2,    2,    1},   //  441
     {  5,    0,    2,    0,    2},   //  442
     {  0,    0,    2,    6,    2},   //  443
     {  4,    0,    2,    2,    2},   //  444
     {  0,   -1,    1,   -1,    1},   //  445
     { -1,    0,    1,    0,    3},   //  446
     {  0,   -2,    2,   -2,    3},   //  447
     {  1,    0,   -1,    0,    1},   //  448
     {  2,   -2,    0,   -2,    1},   //  449
     { -1,    0,    1,    0,    2},   //  450
     { -1,    0,    1,    0,    1},   //  451
     { -1,   -1,    2,   -1,    2},   //  452
     { -2,    2,    0,    2,    2},   //  453
     { -1,    0,    1,    0,    0},   //  454
     { -4,    1,    2,    2,    2},   //  455
     { -3,    0,    2,    1,    1},   //  456
     { -2,   -1,    2,    0,    2},   //  457
     {  1,    0,   -2,    1,    1},   //  458
     {  2,   -1,   -2,    0,    1},   //  459
     { -4,    0,    2,    2,    0},   //  460
     { -3,    1,    0,    3,    0},   //  461
     { -1,    0,   -1,    2,    0},   //  462
     {  0,   -2,    0,    0,    2},   //  463
     {  0,   -2,    0,    0,    2},   //  464
     { -3,    0,    0,    3,    0},   //  465
     { -2,   -1,    0,    2,    2},   //  466
     { -1,    0,   -2,    3,    0},   //  467
     { -4,    0,    0,    4,    0},   //  468
     {  2,    1,   -2,    0,    1},   //  469
     {  2,   -1,    0,   -2,    2},   //  470
     {  0,    0,    1,   -1,    0},   //  471
     { -1,    2,    0,    1,    0},   //  472
     { -2,    1,    2,    0,    2},   //  473
     {  1,    1,    0,   -1,    1},   //  474
     {  1,    0,    1,   -2,    1},   //  475
     {  0,    2,    0,    0,    2},   //  476
     {  1,   -1,    2,   -3,    1},   //  477
     { -1,    1,    2,   -1,    1},   //  478
     { -2,    0,    4,   -2,    2},   //  479
     { -2,    0,    4,   -2,    1},   //  480
     { -2,   -2,    0,    2,    1},   //  481
     { -2,    0,   -2,    4,    0},   //  482
     {  1,    2,    2,   -4,    1},   //  483
     {  1,    1,    2,   -4,    2},   //  484
     { -1,    2,    2,   -2,    1},   //  485
     {  2,    0,    0,   -3,    1},   //  486
     { -1,    2,    0,    0,    1},   //  487
     {  0,    0,    0,   -2,    0},   //  488
     { -1,   -1,    2,   -2,    2},   //  489
     { -1,    1,    0,    0,    2},   //  490
     {  0,    0,    0,   -1,    2},   //  491
     { -2,    1,    0,    1,    0},   //  492
     {  1,   -2,    0,   -2,    1},   //  493
     {  1,    0,   -2,    0,    2},   //  494
     { -3,    1,    0,    2,    0},   //  495
     { -1,    1,   -2,    2,    0},   //  496
     { -1,   -1,    0,    0,    2},   //  497
     { -3,    0,    0,    2,    0},   //  498
     { -3,   -1,    0,    2,    0},   //  499
     {  2,    0,    2,   -6,    1},   //  500
     {  0,    1,    2,   -4,    2},   //  501
     {  2,    0,    0,   -4,    2},   //  502
     { -2,    1,    2,   -2,    1},   //  503
     {  0,   -1,    2,   -4,    1},   //  504
     {  0,    1,    0,   -2,    2},   //  505
     { -1,    0,    0,   -2,    0},   //  506
     {  2,    0,   -2,   -2,    1},   //  507
     { -4,    0,    2,    0,    1},   //  508
     { -1,   -1,    0,   -1,    1},   //  509
     {  0,    0,   -2,    0,    2},   //  510
     { -3,    0,    0,    1,    0},   //  511
     { -1,    0,   -2,    1,    0},   //  512
     { -2,    0,   -2,    2,    1},   //  513
     {  0,    0,   -4,    2,    0},   //  514
     { -2,   -1,   -2,    2,    0},   //  515
     {  1,    0,    2,   -6,    1},   //  516
     { -1,    0,    2,   -4,    2},   //  517
     {  1,    0,    0,   -4,    2},   //  518
     {  2,    1,    2,   -4,    2},   //  519
     {  2,    1,    2,   -4,    1},   //  520
     {  0,    1,    4,   -4,    4},   //  521
     {  0,    1,    4,   -4,    2},   //  522
     { -1,   -1,   -2,    4,    0},   //  523
     { -1,   -3,    0,    2,    0},   //  524
     { -1,    0,   -2,    4,    1},   //  525
     { -2,   -1,    0,    3,    0},   //  526
     {  0,    0,   -2,    3,    0},   //  527
     { -2,    0,    0,    3,    1},   //  528
     {  0,   -1,    0,    1,    0},   //  529
     { -3,    0,    2,    2,    0},   //  530
     {  1,    1,   -2,    2,    0},   //  531
     { -1,    1,    0,    2,    2},   //  532
     {  1,   -2,    2,   -2,    1},   //  533
     {  0,    0,    1,    0,    2},   //  534
     {  0,    0,    1,    0,    1},   //  535
     {  0,    0,    1,    0,    0},   //  536
     { -1,    2,    0,    2,    1},   //  537
     {  0,    0,    2,    0,    2},   //  538
     { -2,    0,    2,    0,    2},   //  539
     {  2,    0,    0,   -1,    1},   //  540
     {  3,    0,    0,   -2,    1},   //  541
     {  1,    0,    2,   -2,    3},   //  542
     {  1,    2,    0,    0,    1},   //  543
     {  2,    0,    2,   -3,    2},   //  544
     { -1,    1,    4,   -2,    2},   //  545
     { -2,   -2,    0,    4,    0},   //  546
     {  0,   -3,    0,    2,    0},   //  547
     {  0,    0,   -2,    4,    0},   //  548
     { -1,   -1,    0,    3,    0},   //  549
     { -2,    0,    0,    4,    2},   //  550
     { -1,    0,    0,    3,    1},   //  551
     {  2,   -2,    0,    0,    0},   //  552
     {  1,   -1,    0,    1,    0},   //  553
     { -1,    0,    0,    2,    0},   //  554
     {  0,   -2,    2,    0,    1},   //  555
     { -1,    0,    1,    2,    1},   //  556
     { -1,    1,    0,    3,    0},   //  557
     { -1,   -1,    2,    1,    2},   //  558
     {  0,   -1,    2,    0,    0},   //  559
     { -2,    1,    2,    2,    1},   //  560
     {  2,   -2,    2,   -2,    2},   //  561
     {  1,    1,    0,    1,    1},   //  562
     {  1,    0,    1,    0,    1},   //  563
     {  1,    0,    1,    0,    0},   //  564
     {  0,    2,    0,    2,    0},   //  565
     {  2,   -1,    2,   -2,    1},   //  566
     {  0,   -1,    4,   -2,    1},   //  567
     {  0,    0,    4,   -2,    3},   //  568
     {  0,    1,    4,   -2,    1},   //  569
     {  4,    0,    2,   -4,    2},   //  570
     {  2,    2,    2,   -2,    2},   //  571
     {  2,    0,    4,   -4,    2},   //  572
     { -1,   -2,    0,    4,    0},   //  573
     { -1,   -3,    2,    2,    2},   //  574
     { -3,    0,    2,    4,    2},   //  575
     { -3,    0,    2,   -2,    1},   //  576
     { -1,   -1,    0,   -2,    1},   //  577
     { -3,    0,    0,    0,    2},   //  578
     { -3,    0,   -2,    2,    0},   //  579
     {  0,    1,    0,   -4,    1},   //  580
     { -2,    1,    0,   -2,    1},   //  581
     { -4,    0,    0,    0,    1},   //  582
     { -1,    0,    0,   -4,    1},   //  583
     { -3,    0,    0,   -2,    1},   //  584
     {  0,    0,    0,    3,    2},   //  585
     { -1,    1,    0,    4,    1},   //  586
     {  1,   -2,    2,    0,    1},   //  587
     {  0,    1,    0,    3,    0},   //  588
     { -1,    0,    2,    2,    3},   //  589
     {  0,    0,    2,    2,    2},   //  590
     { -2,    0,    2,    2,    2},   //  591
     { -1,    1,    2,    2,    0},   //  592
     {  3,    0,    0,    0,    2},   //  593
     {  2,    1,    0,    1,    0},   //  594
     {  2,   -1,    2,   -1,    2},   //  595
     {  0,    0,    2,    0,    1},   //  596
     {  0,    0,    3,    0,    3},   //  597
     {  0,    0,    3,    0,    2},   //  598
     { -1,    2,    2,    2,    1},   //  599
     { -1,    0,    4,    0,    0},   //  600
     {  1,    2,    2,    0,    1},   //  601
     {  3,    1,    2,   -2,    1},   //  602
     {  1,    1,    4,   -2,    2},   //  603
     { -2,   -1,    0,    6,    0},   //  604
     {  0,   -2,    0,    4,    0},   //  605
     { -2,    0,    0,    6,    1},   //  606
     { -2,   -2,    2,    4,    2},   //  607
     {  0,   -3,    2,    2,    2},   //  608
     {  0,    0,    0,    4,    2},   //  609
     { -1,   -1,    2,    3,    2},   //  610
     { -2,    0,    2,    4,    0},   //  611
     {  2,   -1,    0,    2,    1},   //  612
     {  1,    0,    0,    3,    0},   //  613
     {  0,    1,    0,    4,    1},   //  614
     {  0,    1,    0,    4,    0},   //  615
     {  1,   -1,    2,    1,    2},   //  616
     {  0,    0,    2,    2,    3},   //  617
     {  1,    0,    2,    2,    2},   //  618
     { -1,    0,    2,    2,    2},   //  619
     { -2,    0,    4,    2,    1},   //  620
     {  2,    1,    0,    2,    1},   //  621
     {  2,    1,    0,    2,    0},   //  622
     {  2,   -1,    2,    0,    0},   //  623
     {  1,    0,    2,    1,    0},   //  624
     {  0,    1,    2,    2,    0},   //  625
     {  2,    0,    2,    0,    3},   //  626
     {  3,    0,    2,    0,    2},   //  627
     {  1,    0,    2,    0,    2},   //  628
     {  1,    0,    3,    0,    3},   //  629
     {  1,    1,    2,    1,    1},   //  630
     {  0,    2,    2,    2,    2},   //  631
     {  2,    1,    2,    0,    0},   //  632
     {  2,    0,    4,   -2,    1},   //  633
     {  4,    1,    2,   -2,    2},   //  634
     { -1,   -1,    0,    6,    0},   //  635
     { -3,   -1,    2,    6,    2},   //  636
     { -1,    0,    0,    6,    1},   //  637
     { -3,    0,    2,    6,    1},   //  638
     {  1,   -1,    0,    4,    1},   //  639
     {  1,   -1,    0,    4,    0},   //  640
     { -2,    0,    2,    5,    2},   //  641
     {  1,   -2,    2,    2,    1},   //  642
     {  3,   -1,    0,    2,    0},   //  643
     {  1,   -1,    2,    2,    0},   //  644
     {  0,    0,    2,    3,    1},   //  645
     { -1,    1,    2,    4,    1},   //  646
     {  0,    1,    2,    3,    2},   //  647
     { -1,    0,    4,    2,    1},   //  648
     {  2,    0,    2,    1,    1},   //  649
     {  5,    0,    0,    0,    0},   //  650
     {  2,    1,    2,    1,    2},   //  651
     {  1,    0,    4,    0,    1},   //  652
     {  3,    1,    2,    0,    1},   //  653
     {  3,    0,    4,   -2,    2},   //  654
     { -2,   -1,    2,    6,    2},   //  655
     {  0,    0,    0,    6,    0},   //  656
     {  0,   -2,    2,    4,    2},   //  657
     { -2,    0,    2,    6,    1},   //  658
     {  2,    0,    0,    4,    1},   //  659
     {  2,    0,    0,    4,    0},   //  660
     {  2,   -2,    2,    2,    2},   //  661
     {  0,    0,    2,    4,    0},   //  662
     {  1,    0,    2,    3,    2},   //  663
     {  4,    0,    0,    2,    0},   //  664
     {  2,    0,    2,    2,    0},   //  665
     {  0,    0,    4,    2,    2},   //  666
     {  4,   -1,    2,    0,    2},   //  667
     {  3,    0,    2,    1,    2},   //  668
     {  2,    1,    2,    2,    1},   //  669
     {  4,    1,    2,    0,    2},   //  670
     { -1,   -1,    2,    6,    2},   //  671
     { -1,    0,    2,    6,    1},   //  672
     {  1,   -1,    2,    4,    1},   //  673
     {  1,    1,    2,    4,    2},   //  674
     {  3,    1,    2,    2,    2},   //  675
     {  5,    0,    2,    0,    1},   //  676
     {  2,   -1,    2,    4,    2},   //  677
     {  2,    0,    2,    4,    1}    //  678
  };
  calcMulArg(needInit, argArray, &ARG[0], 678);
  DebugAssert(which < 678, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulPlanArg2000A(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[687];
  static const Char ARG[687][14] = {
  // L   L'  F   D   Om  Me  Ve  E  Ma  Ju  Sa  Ur  Ne  pre
  {  0,  0,  0,  0,  0,  0,  0,  8,-16,  4,  5,  0,  0,  0},   //    1
  {  0,  0,  0,  0,  0,  0,  0, -8, 16, -4, -5,  0,  0,  2},   //    2
  {  0,  0,  0,  0,  0,  0,  0,  8,-16,  4,  5,  0,  0,  2},   //    3
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  2,  2},   //    4
  {  0,  0,  0,  0,  0,  0,  0, -4,  8, -1, -5,  0,  0,  2},   //    5
  {  0,  0,  0,  0,  0,  0,  0,  4, -8,  3,  0,  0,  0,  1},   //    6
  {  0,  0,  1, -1,  1,  0,  0,  3, -8,  3,  0,  0,  0,  0},   //    7
  { -1,  0,  0,  0,  0,  0, 10, -3,  0,  0,  0,  0,  0,  0},   //    8
  {  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  6, -3,  0,  2},   //    9
  {  0,  0,  0,  0,  0,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //   10
  {  0,  0,  1, -1,  1,  0,  0, -5,  8, -3,  0,  0,  0,  0},   //   11
  {  0,  0,  0,  0,  0,  0,  0, -4,  8, -3,  0,  0,  0,  1},   //   12
  {  0,  0,  0,  0,  0,  0,  0,  4, -8,  1,  5,  0,  0,  2},   //   13
  {  0,  0,  0,  0,  0,  0, -5,  6,  4,  0,  0,  0,  0,  2},   //   14
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -5,  0,  0,  2},   //   15
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -5,  0,  0,  1},   //   16
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  2, -5,  0,  0,  0},   //   17
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -5,  0,  0,  0},   //   18
  {  0,  0,  1, -1,  1,  0,  0, -1,  0, -2,  5,  0,  0,  0},   //   19
  {  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  5,  0,  0,  1},   //   20
  {  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  5,  0,  0,  2},   //   21
  {  2,  0, -1, -1,  0,  0,  0,  3, -7,  0,  0,  0,  0,  0},   //   22
  {  1,  0,  0, -2,  0,  0, 19,-21,  3,  0,  0,  0,  0,  0},   //   23
  {  0,  0,  1, -1,  1,  0,  2, -4,  0, -3,  0,  0,  0,  0},   //   24
  {  1,  0,  0, -1,  1,  0,  0, -1,  0,  2,  0,  0,  0,  0},   //   25
  {  0,  0,  1, -1,  1,  0,  0, -1,  0, -4, 10,  0,  0,  0},   //   26
  { -2,  0,  0,  2,  1,  0,  0,  2,  0,  0, -5,  0,  0,  0},   //   27
  {  0,  0,  0,  0,  0,  0,  3, -7,  4,  0,  0,  0,  0,  0},   //   28
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  1, -1,  0,  0,  0},   //   29
  { -2,  0,  0,  2,  1,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //   30
  { -1,  0,  0,  0,  0,  0, 18,-16,  0,  0,  0,  0,  0,  0},   //   31
  { -2,  0,  1,  1,  2,  0,  0,  1,  0, -2,  0,  0,  0,  0},   //   32
  { -1,  0,  1, -1,  1,  0, 18,-17,  0,  0,  0,  0,  0,  0},   //   33
  { -1,  0,  0,  1,  1,  0,  0,  2, -2,  0,  0,  0,  0,  0},   //   34
  {  0,  0,  0,  0,  0,  0, -8, 13,  0,  0,  0,  0,  0,  2},   //   35
  {  0,  0,  2, -2,  2,  0, -8, 11,  0,  0,  0,  0,  0,  0},   //   36
  {  0,  0,  0,  0,  0,  0, -8, 13,  0,  0,  0,  0,  0,  1},   //   37
  {  0,  0,  1, -1,  1,  0, -8, 12,  0,  0,  0,  0,  0,  0},   //   38
  {  0,  0,  0,  0,  0,  0,  8,-13,  0,  0,  0,  0,  0,  0},   //   39
  {  0,  0,  1, -1,  1,  0,  8,-14,  0,  0,  0,  0,  0,  0},   //   40
  {  0,  0,  0,  0,  0,  0,  8,-13,  0,  0,  0,  0,  0,  1},   //   41
  { -2,  0,  0,  2,  1,  0,  0,  2,  0, -4,  5,  0,  0,  0},   //   42
  { -2,  0,  0,  2,  2,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //   43
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -3,  1,  0,  0,  0},   //   44
  {  0,  0,  0,  0,  1,  0,  3, -5,  0,  2,  0,  0,  0,  0},   //   45
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -4,  3,  0,  0,  0},   //   46
  {  0,  0, -1,  1,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0},   //   47
  {  0,  0,  0,  0,  1,  0,  0, -1,  2,  0,  0,  0,  0,  0},   //   48
  {  0,  0,  1, -1,  2,  0,  0, -2,  2,  0,  0,  0,  0,  0},   //   49
  { -1,  0,  1,  0,  1,  0,  3, -5,  0,  0,  0,  0,  0,  0},   //   50
  { -1,  0,  0,  1,  0,  0,  3, -4,  0,  0,  0,  0,  0,  0},   //   51
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -2, -2,  0,  0,  0},   //   52
  { -2,  0,  2,  0,  2,  0,  0, -5,  9,  0,  0,  0,  0,  0},   //   53
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0,  0, -1,  0,  0},   //   54
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0},   //   55
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0,  0,  0,  2,  0},   //   56
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  1},   //   57
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2},   //   58
  { -1,  0,  0,  1,  0,  0,  0,  3, -4,  0,  0,  0,  0,  0},   //   59
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  0,  2,  0,  0,  0},   //   60
  {  0,  0,  1, -1,  2,  0,  0, -1,  0,  0,  2,  0,  0,  0},   //   61
  {  0,  0,  0,  0,  1,  0,  0, -9, 17,  0,  0,  0,  0,  0},   //   62
  {  0,  0,  0,  0,  2,  0, -3,  5,  0,  0,  0,  0,  0,  0},   //   63
  {  0,  0,  1, -1,  1,  0,  0, -1,  0, -1,  2,  0,  0,  0},   //   64
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -2,  0,  0,  0},   //   65
  {  1,  0,  0, -2,  0,  0, 17,-16,  0, -2,  0,  0,  0,  0},   //   66
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  1, -3,  0,  0,  0},   //   67
  { -2,  0,  0,  2,  1,  0,  0,  5, -6,  0,  0,  0,  0,  0},   //   68
  {  0,  0, -2,  2,  0,  0,  0,  9,-13,  0,  0,  0,  0,  0},   //   69
  {  0,  0,  1, -1,  2,  0,  0, -1,  0,  0,  1,  0,  0,  0},   //   70
  {  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0},   //   71
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  0,  1,  0,  0,  0},   //   72
  {  0,  0, -2,  2,  0,  0,  5, -6,  0,  0,  0,  0,  0,  0},   //   73
  {  0,  0, -1,  1,  1,  0,  5, -7,  0,  0,  0,  0,  0,  0},   //   74
  { -2,  0,  0,  2,  0,  0,  6, -8,  0,  0,  0,  0,  0,  0},   //   75
  {  2,  0,  1, -3,  1,  0, -6,  7,  0,  0,  0,  0,  0,  0},   //   76
  {  0,  0,  0,  0,  2,  0,  0,  0,  0,  1,  0,  0,  0,  0},   //   77
  {  0,  0, -1,  1,  1,  0,  0,  1,  0,  1,  0,  0,  0,  0},   //   78
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0,  0,  2,  0,  0},   //   79
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  1},   //   80
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  2},   //   81
  {  0,  0,  0,  0,  0,  0,  0, -8, 15,  0,  0,  0,  0,  2},   //   82
  {  0,  0,  0,  0,  0,  0,  0, -8, 15,  0,  0,  0,  0,  1},   //   83
  {  0,  0,  1, -1,  1,  0,  0, -9, 15,  0,  0,  0,  0,  0},   //   84
  {  0,  0,  0,  0,  0,  0,  0,  8,-15,  0,  0,  0,  0,  0},   //   85
  {  1,  0, -1, -1,  0,  0,  0,  8,-15,  0,  0,  0,  0,  0},   //   86
  {  2,  0,  0, -2,  0,  0,  2, -5,  0,  0,  0,  0,  0,  0},   //   87
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -5,  5,  0,  0,  0},   //   88
  {  2,  0,  0, -2,  1,  0,  0, -6,  8,  0,  0,  0,  0,  0},   //   89
  {  2,  0,  0, -2,  1,  0,  0, -2,  0,  3,  0,  0,  0,  0},   //   90
  { -2,  0,  1,  1,  0,  0,  0,  1,  0, -3,  0,  0,  0,  0},   //   91
  { -2,  0,  1,  1,  1,  0,  0,  1,  0, -3,  0,  0,  0,  0},   //   92
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //   93
  { -2,  0,  0,  2,  0,  0,  0,  6, -8,  0,  0,  0,  0,  0},   //   94
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -1, -5,  0,  0,  0},   //   95
  { -1,  0,  0,  1,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //   96
  { -1,  0,  1,  1,  1,  0,-20, 20,  0,  0,  0,  0,  0,  0},   //   97
  {  1,  0,  0, -2,  0,  0, 20,-21,  0,  0,  0,  0,  0,  0},   //   98
  {  0,  0,  0,  0,  1,  0,  0,  8,-15,  0,  0,  0,  0,  0},   //   99
  {  0,  0,  2, -2,  1,  0,  0,-10, 15,  0,  0,  0,  0,  0},   //  100
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0},   //  101
  {  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0},   //  102
  {  0,  0,  1, -1,  2,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  103
  {  0,  0,  1, -1,  1,  0,  0, -1,  0, -2,  4,  0,  0,  0},   //  104
  {  2,  0,  0, -2,  1,  0, -6,  8,  0,  0,  0,  0,  0,  0},   //  105
  {  0,  0, -2,  2,  1,  0,  5, -6,  0,  0,  0,  0,  0,  0},   //  106
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  1},   //  107
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0, -1,  0,  0,  0},   //  108
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0},   //  109
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0,  1,  0,  0,  0},   //  110
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1},   //  111
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  2},   //  112
  {  0,  0,  2, -2,  1,  0,  0, -9, 13,  0,  0,  0,  0,  0},   //  113
  {  0,  0,  0,  0,  1,  0,  0,  7,-13,  0,  0,  0,  0,  0},   //  114
  { -2,  0,  0,  2,  0,  0,  0,  5, -6,  0,  0,  0,  0,  0},   //  115
  {  0,  0,  0,  0,  0,  0,  0,  9,-17,  0,  0,  0,  0,  0},   //  116
  {  0,  0,  0,  0,  0,  0,  0, -9, 17,  0,  0,  0,  0,  2},   //  117
  {  1,  0,  0, -1,  1,  0,  0, -3,  4,  0,  0,  0,  0,  0},   //  118
  {  1,  0,  0, -1,  1,  0, -3,  4,  0,  0,  0,  0,  0,  0},   //  119
  {  0,  0,  0,  0,  2,  0,  0, -1,  2,  0,  0,  0,  0,  0},   //  120
  {  0,  0, -1,  1,  1,  0,  0,  0,  2,  0,  0,  0,  0,  0},   //  121
  {  0,  0, -2,  2,  0,  1,  0, -2,  0,  0,  0,  0,  0,  0},   //  122
  {  0,  0,  0,  0,  0,  0,  3, -5,  0,  2,  0,  0,  0,  0},   //  123
  { -2,  0,  0,  2,  1,  0,  0,  2,  0, -3,  1,  0,  0,  0},   //  124
  { -2,  0,  0,  2,  1,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  125
  {  0,  0,  0,  0,  1,  0,  8,-13,  0,  0,  0,  0,  0,  0},   //  126
  {  0,  0, -1,  1,  0,  0,  8,-12,  0,  0,  0,  0,  0,  0},   //  127
  {  0,  0,  2, -2,  1,  0, -8, 11,  0,  0,  0,  0,  0,  0},   //  128
  { -1,  0,  0,  1,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0},   //  129
  { -1,  0,  0,  0,  1,  0, 18,-16,  0,  0,  0,  0,  0,  0},   //  130
  {  0,  0,  1, -1,  1,  0,  0, -1,  0, -1,  1,  0,  0,  0},   //  131
  {  0,  0,  0,  0,  1,  0,  3, -7,  4,  0,  0,  0,  0,  0},   //  132
  { -2,  0,  1,  1,  1,  0,  0, -3,  7,  0,  0,  0,  0,  0},   //  133
  {  0,  0,  1, -1,  2,  0,  0, -1,  0, -2,  5,  0,  0,  0},   //  134
  {  0,  0,  0,  0,  1,  0,  0,  0,  0, -2,  5,  0,  0,  0},   //  135
  {  0,  0,  0,  0,  1,  0,  0, -4,  8, -3,  0,  0,  0,  0},   //  136
  {  1,  0,  0,  0,  1,  0,-10,  3,  0,  0,  0,  0,  0,  0},   //  137
  {  0,  0,  2, -2,  1,  0,  0, -2,  0,  0,  0,  0,  0,  0},   //  138
  { -1,  0,  0,  0,  1,  0, 10, -3,  0,  0,  0,  0,  0,  0},   //  139
  {  0,  0,  0,  0,  1,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  140
  {  0,  0,  0,  0,  1,  0,  0,  0,  0,  2, -5,  0,  0,  0},   //  141
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  2, -5,  0,  0,  0},   //  142
  {  2,  0, -1, -1,  1,  0,  0,  3, -7,  0,  0,  0,  0,  0},   //  143
  { -2,  0,  0,  2,  0,  0,  0,  2,  0,  0, -5,  0,  0,  0},   //  144
  {  0,  0,  0,  0,  1,  0, -3,  7, -4,  0,  0,  0,  0,  0},   //  145
  { -2,  0,  0,  2,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  146
  {  1,  0,  0,  0,  1,  0,-18, 16,  0,  0,  0,  0,  0,  0},   //  147
  { -2,  0,  1,  1,  1,  0,  0,  1,  0, -2,  0,  0,  0,  0},   //  148
  {  0,  0,  1, -1,  2,  0, -8, 12,  0,  0,  0,  0,  0,  0},   //  149
  {  0,  0,  0,  0,  1,  0, -8, 13,  0,  0,  0,  0,  0,  0},   //  150
  {  0,  0,  0,  0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  1},   //  151
  {  0,  0,  1, -1,  1,  0,  0,  0, -2,  0,  0,  0,  0,  0},   //  152
  {  0,  0,  0,  0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0},   //  153
  {  0,  0,  1, -1,  1,  0,  0, -2,  2,  0,  0,  0,  0,  0},   //  154
  {  0,  0,  0,  0,  0,  0,  0, -1,  2,  0,  0,  0,  0,  1},   //  155
  { -1,  0,  0,  1,  1,  0,  3, -4,  0,  0,  0,  0,  0,  0},   //  156
  { -1,  0,  0,  1,  1,  0,  0,  3, -4,  0,  0,  0,  0,  0},   //  157
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0, -2,  0,  0,  0},   //  158
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0,  2,  0,  0,  0},   //  159
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  1},   //  160
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  2},   //  161
  {  0,  0,  1, -1,  0,  0,  3, -6,  0,  0,  0,  0,  0,  0},   //  162
  {  0,  0,  0,  0,  1,  0, -3,  5,  0,  0,  0,  0,  0,  0},   //  163
  {  0,  0,  1, -1,  2,  0, -3,  4,  0,  0,  0,  0,  0,  0},   //  164
  {  0,  0,  0,  0,  1,  0,  0, -2,  4,  0,  0,  0,  0,  0},   //  165
  {  0,  0,  2, -2,  1,  0, -5,  6,  0,  0,  0,  0,  0,  0},   //  166
  {  0,  0, -1,  1,  0,  0,  5, -7,  0,  0,  0,  0,  0,  0},   //  167
  {  0,  0,  0,  0,  1,  0,  5, -8,  0,  0,  0,  0,  0,  0},   //  168
  { -2,  0,  0,  2,  1,  0,  6, -8,  0,  0,  0,  0,  0,  0},   //  169
  {  0,  0,  0,  0,  1,  0,  0, -8, 15,  0,  0,  0,  0,  0},   //  170
  { -2,  0,  0,  2,  1,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  171
  { -2,  0,  0,  2,  1,  0,  0,  6, -8,  0,  0,  0,  0,  0},   //  172
  {  1,  0,  0, -1,  1,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  173
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, -5,  0,  0,  0},   //  174
  {  0,  0,  1, -1,  1,  0,  0, -1,  0, -1,  0,  0,  0,  0},   //  175
  {  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  1},   //  176
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0},   //  177
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1},   //  178
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  179
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1},   //  180
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  2},   //  181
  {  0,  0,  1, -1,  2,  0,  0, -1,  0,  0, -1,  0,  0,  0},   //  182
  {  0,  0,  0,  0,  1,  0,  0,  0,  0,  0, -1,  0,  0,  0},   //  183
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  0, -1,  0,  0,  0},   //  184
  {  0,  0,  0,  0,  0,  0,  0, -7, 13,  0,  0,  0,  0,  2},   //  185
  {  0,  0,  0,  0,  0,  0,  0,  7,-13,  0,  0,  0,  0,  0},   //  186
  {  2,  0,  0, -2,  1,  0,  0, -5,  6,  0,  0,  0,  0,  0},   //  187
  {  0,  0,  2, -2,  1,  0,  0, -8, 11,  0,  0,  0,  0,  0},   //  188
  {  0,  0,  2, -2,  1, -1,  0,  2,  0,  0,  0,  0,  0,  0},   //  189
  { -2,  0,  0,  2,  0,  0,  0,  4, -4,  0,  0,  0,  0,  0},   //  190
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0},   //  191
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  0,  3,  0,  0,  0},   //  192
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  1},   //  193
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  2},   //  194
  { -2,  0,  0,  2,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  195
  {  0,  0,  0,  0,  2,  0,  0, -4,  8, -3,  0,  0,  0,  0},   //  196
  {  0,  0,  0,  0,  2,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  197
  {  2,  0,  0, -2,  1,  0,  0, -2,  0,  2,  0,  0,  0,  0},   //  198
  {  0,  0,  1, -1,  2,  0,  0, -1,  0,  2,  0,  0,  0,  0},   //  199
  {  0,  0,  1, -1,  2,  0,  0,  0, -2,  0,  0,  0,  0,  0},   //  200
  {  0,  0,  0,  0,  1,  0,  0,  1, -2,  0,  0,  0,  0,  0},   //  201
  {  0,  0, -1,  1,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0},   //  202
  {  0,  0, -1,  1,  0,  0,  0,  1,  0,  0, -2,  0,  0,  0},   //  203
  {  0,  0,  2, -2,  1,  0,  0, -2,  0,  0,  2,  0,  0,  0},   //  204
  {  0,  0,  1, -1,  1,  0,  3, -6,  0,  0,  0,  0,  0,  0},   //  205
  {  0,  0,  0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0,  1},   //  206
  {  0,  0,  0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0,  0},   //  207
  {  0,  0,  1, -1,  1,  0, -3,  4,  0,  0,  0,  0,  0,  0},   //  208
  {  0,  0,  0,  0,  0,  0, -3,  5,  0,  0,  0,  0,  0,  1},   //  209
  {  0,  0,  0,  0,  0,  0, -3,  5,  0,  0,  0,  0,  0,  2},   //  210
  {  0,  0,  2, -2,  2,  0, -3,  3,  0,  0,  0,  0,  0,  0},   //  211
  {  0,  0,  0,  0,  0,  0, -3,  5,  0,  0,  0,  0,  0,  2},   //  212
  {  0,  0,  0,  0,  0,  0,  0,  2, -4,  0,  0,  0,  0,  1},   //  213
  {  0,  0,  1, -1,  1,  0,  0,  1, -4,  0,  0,  0,  0,  0},   //  214
  {  0,  0,  0,  0,  0,  0,  0,  2, -4,  0,  0,  0,  0,  0},   //  215
  {  0,  0,  0,  0,  0,  0,  0, -2,  4,  0,  0,  0,  0,  1},   //  216
  {  0,  0,  1, -1,  1,  0,  0, -3,  4,  0,  0,  0,  0,  0},   //  217
  {  0,  0,  0,  0,  0,  0,  0, -2,  4,  0,  0,  0,  0,  1},   //  218
  {  0,  0,  0,  0,  0,  0,  0, -2,  4,  0,  0,  0,  0,  2},   //  219
  {  0,  0,  0,  0,  0,  0, -5,  8,  0,  0,  0,  0,  0,  2},   //  220
  {  0,  0,  2, -2,  2,  0, -5,  6,  0,  0,  0,  0,  0,  0},   //  221
  {  0,  0,  0,  0,  0,  0, -5,  8,  0,  0,  0,  0,  0,  2},   //  222
  {  0,  0,  0,  0,  0,  0, -5,  8,  0,  0,  0,  0,  0,  1},   //  223
  {  0,  0,  1, -1,  1,  0, -5,  7,  0,  0,  0,  0,  0,  0},   //  224
  {  0,  0,  0,  0,  0,  0, -5,  8,  0,  0,  0,  0,  0,  1},   //  225
  {  0,  0,  0,  0,  0,  0,  5, -8,  0,  0,  0,  0,  0,  0},   //  226
  {  0,  0,  1, -1,  2,  0,  0, -1,  0, -1,  0,  0,  0,  0},   //  227
  {  0,  0,  0,  0,  1,  0,  0,  0,  0, -1,  0,  0,  0,  0},   //  228
  {  0,  0, -1,  1,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  229
  {  0,  0,  2, -2,  1,  0,  0, -2,  0,  1,  0,  0,  0,  0},   //  230
  {  0,  0,  0,  0,  0,  0,  0, -6, 11,  0,  0,  0,  0,  2},   //  231
  {  0,  0,  0,  0,  0,  0,  0,  6,-11,  0,  0,  0,  0,  0},   //  232
  {  0,  0,  0,  0,  0, -1,  0,  4,  0,  0,  0,  0,  0,  2},   //  233
  {  0,  0,  0,  0,  0,  1,  0, -4,  0,  0,  0,  0,  0,  0},   //  234
  {  2,  0,  0, -2,  1,  0, -3,  3,  0,  0,  0,  0,  0,  0},   //  235
  { -2,  0,  0,  2,  0,  0,  0,  2,  0,  0, -2,  0,  0,  0},   //  236
  {  0,  0,  2, -2,  1,  0,  0, -7,  9,  0,  0,  0,  0,  0},   //  237
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, -5,  0,  0,  2},   //  238
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0},   //  239
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  1},   //  240
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  2,  0,  0,  0,  0},   //  241
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  1},   //  242
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  2},   //  243
  {  0,  0,  2, -2,  2,  0,  0, -2,  0,  2,  0,  0,  0,  0},   //  244
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  2},   //  245
  {  0,  0,  0,  0,  1,  0,  3, -5,  0,  0,  0,  0,  0,  0},   //  246
  {  0,  0, -1,  1,  0,  0,  3, -4,  0,  0,  0,  0,  0,  0},   //  247
  {  0,  0,  2, -2,  1,  0, -3,  3,  0,  0,  0,  0,  0,  0},   //  248
  {  0,  0,  0,  0,  1,  0,  0,  2, -4,  0,  0,  0,  0,  0},   //  249
  {  0,  0,  2, -2,  1,  0,  0, -4,  4,  0,  0,  0,  0,  0},   //  250
  {  0,  0,  1, -1,  2,  0, -5,  7,  0,  0,  0,  0,  0,  0},   //  251
  {  0,  0,  0,  0,  0,  0,  0,  3, -6,  0,  0,  0,  0,  0},   //  252
  {  0,  0,  0,  0,  0,  0,  0, -3,  6,  0,  0,  0,  0,  1},   //  253
  {  0,  0,  1, -1,  1,  0,  0, -4,  6,  0,  0,  0,  0,  0},   //  254
  {  0,  0,  0,  0,  0,  0,  0, -3,  6,  0,  0,  0,  0,  1},   //  255
  {  0,  0,  0,  0,  0,  0,  0, -3,  6,  0,  0,  0,  0,  2},   //  256
  {  0,  0, -1,  1,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  257
  {  0,  0,  0,  0,  1,  0,  2, -3,  0,  0,  0,  0,  0,  0},   //  258
  {  0,  0,  0,  0,  0,  0,  0, -5,  9,  0,  0,  0,  0,  2},   //  259
  {  0,  0,  0,  0,  0,  0,  0, -5,  9,  0,  0,  0,  0,  1},   //  260
  {  0,  0,  0,  0,  0,  0,  0,  5, -9,  0,  0,  0,  0,  0},   //  261
  {  0,  0, -1,  1,  0,  0,  0,  1,  0, -2,  0,  0,  0,  0},   //  262
  {  0,  0,  2, -2,  1,  0,  0, -2,  0,  2,  0,  0,  0,  0},   //  263
  { -2,  0,  1,  1,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  264
  {  0,  0, -2,  2,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  265
  {  0,  0,  0,  0,  0,  0, -6, 10,  0,  0,  0,  0,  0,  1},   //  266
  {  0,  0,  0,  0,  0,  0, -6, 10,  0,  0,  0,  0,  0,  2},   //  267
  {  0,  0,  0,  0,  0,  0, -2,  3,  0,  0,  0,  0,  0,  2},   //  268
  {  0,  0,  0,  0,  0,  0, -2,  3,  0,  0,  0,  0,  0,  1},   //  269
  {  0,  0,  1, -1,  1,  0, -2,  2,  0,  0,  0,  0,  0,  0},   //  270
  {  0,  0,  0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0,  0},   //  271
  {  0,  0,  0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0,  1},   //  272
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  1},   //  273
  {  0,  0,  1, -1,  1,  0,  0, -1,  0,  3,  0,  0,  0,  0},   //  274
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  1},   //  275
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  2},   //  276
  {  0,  0,  0,  0,  0,  0,  0,  4, -8,  0,  0,  0,  0,  0},   //  277
  {  0,  0,  0,  0,  0,  0,  0, -4,  8,  0,  0,  0,  0,  2},   //  278
  {  0,  0, -2,  2,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  279
  {  0,  0,  0,  0,  0,  0,  0, -4,  7,  0,  0,  0,  0,  2},   //  280
  {  0,  0,  0,  0,  0,  0,  0, -4,  7,  0,  0,  0,  0,  1},   //  281
  {  0,  0,  0,  0,  0,  0,  0,  4, -7,  0,  0,  0,  0,  0},   //  282
  {  0,  0,  0,  0,  1,  0, -2,  3,  0,  0,  0,  0,  0,  0},   //  283
  {  0,  0,  2, -2,  1,  0,  0, -2,  0,  3,  0,  0,  0,  0},   //  284
  {  0,  0,  0,  0,  0,  0,  0, -5, 10,  0,  0,  0,  0,  2},   //  285
  {  0,  0,  0,  0,  1,  0, -1,  2,  0,  0,  0,  0,  0,  0},   //  286
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  2},   //  287
  {  0,  0,  0,  0,  0,  0,  0, -3,  5,  0,  0,  0,  0,  2},   //  288
  {  0,  0,  0,  0,  0,  0,  0, -3,  5,  0,  0,  0,  0,  1},   //  289
  {  0,  0,  0,  0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0},   //  290
  {  0,  0,  0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0,  1},   //  291
  {  0,  0,  1, -1,  1,  0,  1, -3,  0,  0,  0,  0,  0,  0},   //  292
  {  0,  0,  0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0,  0},   //  293
  {  0,  0,  0,  0,  0,  0, -1,  2,  0,  0,  0,  0,  0,  1},   //  294
  {  0,  0,  0,  0,  0,  0, -1,  2,  0,  0,  0,  0,  0,  2},   //  295
  {  0,  0,  0,  0,  0,  0, -7, 11,  0,  0,  0,  0,  0,  2},   //  296
  {  0,  0,  0,  0,  0,  0, -7, 11,  0,  0,  0,  0,  0,  1},   //  297
  {  0,  0, -2,  2,  0,  0,  4, -4,  0,  0,  0,  0,  0,  0},   //  298
  {  0,  0,  0,  0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0},   //  299
  {  0,  0,  2, -2,  1,  0, -4,  4,  0,  0,  0,  0,  0,  0},   //  300
  {  0,  0, -1,  1,  0,  0,  4, -5,  0,  0,  0,  0,  0,  0},   //  301
  {  0,  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0},   //  302
  {  0,  0,  0,  0,  0,  0, -4,  7,  0,  0,  0,  0,  0,  1},   //  303
  {  0,  0,  1, -1,  1,  0, -4,  6,  0,  0,  0,  0,  0,  0},   //  304
  {  0,  0,  0,  0,  0,  0, -4,  7,  0,  0,  0,  0,  0,  2},   //  305
  {  0,  0,  0,  0,  0,  0, -4,  6,  0,  0,  0,  0,  0,  2},   //  306
  {  0,  0,  0,  0,  0,  0, -4,  6,  0,  0,  0,  0,  0,  1},   //  307
  {  0,  0,  1, -1,  1,  0, -4,  5,  0,  0,  0,  0,  0,  0},   //  308
  {  0,  0,  0,  0,  0,  0, -4,  6,  0,  0,  0,  0,  0,  1},   //  309
  {  0,  0,  0,  0,  0,  0,  4, -6,  0,  0,  0,  0,  0,  0},   //  310
  { -2,  0,  0,  2,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  311
  {  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0},   //  312
  {  0,  0, -1,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},   //  313
  {  0,  0,  0,  0,  1,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  314
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  5,  0,  0,  0,  2},   //  315
  {  0,  0,  0,  0,  0,  0,  0,  1, -3,  0,  0,  0,  0,  0},   //  316
  {  0,  0,  0,  0,  0,  0,  0, -1,  3,  0,  0,  0,  0,  2},   //  317
  {  0,  0,  0,  0,  0,  0,  0, -7, 12,  0,  0,  0,  0,  2},   //  318
  {  0,  0,  0,  0,  0,  0, -1,  1,  0,  0,  0,  0,  0,  2},   //  319
  {  0,  0,  0,  0,  0,  0, -1,  1,  0,  0,  0,  0,  0,  1},   //  320
  {  0,  0,  1, -1,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0},   //  321
  {  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  322
  {  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  1},   //  323
  {  0,  0,  1, -1,  1,  0,  1, -2,  0,  0,  0,  0,  0,  0},   //  324
  {  0,  0,  0,  0,  0,  0,  0, -2,  5,  0,  0,  0,  0,  2},   //  325
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  4,  0,  0,  0,  2},   //  326
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -4,  0,  0,  0,  0},   //  327
  {  0,  0,  0,  0,  1,  0, -1,  1,  0,  0,  0,  0,  0,  0},   //  328
  {  0,  0,  0,  0,  0,  0,  0, -6, 10,  0,  0,  0,  0,  2},   //  329
  {  0,  0,  0,  0,  0,  0,  0, -6, 10,  0,  0,  0,  0,  0},   //  330
  {  0,  0,  2, -2,  1,  0,  0, -3,  0,  3,  0,  0,  0,  0},   //  331
  {  0,  0,  0,  0,  0,  0,  0, -3,  7,  0,  0,  0,  0,  2},   //  332
  { -2,  0,  0,  2,  0,  0,  4, -4,  0,  0,  0,  0,  0,  0},   //  333
  {  0,  0,  0,  0,  0,  0,  0, -5,  8,  0,  0,  0,  0,  2},   //  334
  {  0,  0,  0,  0,  0,  0,  0,  5, -8,  0,  0,  0,  0,  0},   //  335
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  3,  0,  0,  0,  2},   //  336
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  3,  0,  0,  0,  1},   //  337
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -3,  0,  0,  0,  0},   //  338
  {  0,  0,  0,  0,  0,  0,  2, -4,  0,  0,  0,  0,  0,  0},   //  339
  {  0,  0,  0,  0,  0,  0, -2,  4,  0,  0,  0,  0,  0,  1},   //  340
  {  0,  0,  1, -1,  1,  0, -2,  3,  0,  0,  0,  0,  0,  0},   //  341
  {  0,  0,  0,  0,  0,  0, -2,  4,  0,  0,  0,  0,  0,  2},   //  342
  {  0,  0,  0,  0,  0,  0, -6,  9,  0,  0,  0,  0,  0,  2},   //  343
  {  0,  0,  0,  0,  0,  0, -6,  9,  0,  0,  0,  0,  0,  1},   //  344
  {  0,  0,  0,  0,  0,  0,  6, -9,  0,  0,  0,  0,  0,  0},   //  345
  {  0,  0,  0,  0,  1,  0,  0,  1,  0, -2,  0,  0,  0,  0},   //  346
  {  0,  0,  2, -2,  1,  0, -2,  2,  0,  0,  0,  0,  0,  0},   //  347
  {  0,  0,  0,  0,  0,  0,  0, -4,  6,  0,  0,  0,  0,  2},   //  348
  {  0,  0,  0,  0,  0,  0,  0,  4, -6,  0,  0,  0,  0,  0},   //  349
  {  0,  0,  0,  0,  1,  0,  3, -4,  0,  0,  0,  0,  0,  0},   //  350
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  2,  0,  0,  0,  2},   //  351
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -2,  0,  0,  0,  0},   //  352
  {  0,  0,  0,  0,  1,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  353
  {  0,  0,  0,  0,  0,  0, -5,  9,  0,  0,  0,  0,  0,  2},   //  354
  {  0,  0,  0,  0,  0,  0,  0,  3, -4,  0,  0,  0,  0,  0},   //  355
  {  0,  0,  0,  0,  0,  0, -3,  4,  0,  0,  0,  0,  0,  2},   //  356
  {  0,  0,  0,  0,  0,  0, -3,  4,  0,  0,  0,  0,  0,  1},   //  357
  {  0,  0,  0,  0,  0,  0,  3, -4,  0,  0,  0,  0,  0,  0},   //  358
  {  0,  0,  0,  0,  0,  0,  3, -4,  0,  0,  0,  0,  0,  1},   //  359
  {  0,  0,  0,  0,  1,  0,  0,  2, -2,  0,  0,  0,  0,  0},   //  360
  {  0,  0,  0,  0,  1,  0,  0, -1,  0,  2,  0,  0,  0,  0},   //  361
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  0, -3,  0,  0,  0},   //  362
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  1, -5,  0,  0,  0},   //  363
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  1,  0,  0,  0,  1},   //  364
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  365
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0,  0,  0,  1},   //  366
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -3,  5,  0,  0,  0},   //  367
  {  0,  0,  0,  0,  1,  0, -3,  4,  0,  0,  0,  0,  0,  0},   //  368
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  0, -2,  0,  0,  0},   //  369
  {  0,  0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0},   //  370
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  0, -1,  0,  0,  0},   //  371
  {  0,  0,  0,  0,  1,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  372
  {  0,  0,  0,  0,  1,  0,  0, -2,  2,  0,  0,  0,  0,  0},   //  373
  {  0,  0,  0,  0,  0,  0, -8, 14,  0,  0,  0,  0,  0,  2},   //  374
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  2, -5,  0,  0,  0},   //  375
  {  0,  0,  0,  0,  0,  0,  0,  5, -8,  3,  0,  0,  0,  0},   //  376
  {  0,  0,  0,  0,  0,  0,  0,  5, -8,  3,  0,  0,  0,  2},   //  377
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  1},   //  378
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  379
  {  0,  0,  0,  0,  0,  0,  0,  3, -8,  3,  0,  0,  0,  0},   //  380
  {  0,  0,  0,  0,  0,  0,  0, -3,  8, -3,  0,  0,  0,  2},   //  381
  {  0,  0,  0,  0,  0,  0,  0,  1,  0, -2,  5,  0,  0,  2},   //  382
  {  0,  0,  0,  0,  0,  0, -8, 12,  0,  0,  0,  0,  0,  2},   //  383
  {  0,  0,  0,  0,  0,  0, -8, 12,  0,  0,  0,  0,  0,  0},   //  384
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  1, -2,  0,  0,  0},   //  385
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  0,  2},   //  386
  {  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0},   //  387
  {  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2},   //  388
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  2,  0,  0,  2},   //  389
  {  0,  0,  2, -2,  1,  0, -5,  5,  0,  0,  0,  0,  0,  0},   //  390
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0},   //  391
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  1},   //  392
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  2},   //  393
  {  0,  0,  0,  0,  0,  0,  3, -6,  0,  0,  0,  0,  0,  0},   //  394
  {  0,  0,  0,  0,  0,  0, -3,  6,  0,  0,  0,  0,  0,  1},   //  395
  {  0,  0,  0,  0,  0,  0, -3,  6,  0,  0,  0,  0,  0,  2},   //  396
  {  0,  0,  0,  0,  0,  0,  0, -1,  4,  0,  0,  0,  0,  2},   //  397
  {  0,  0,  0,  0,  0,  0, -5,  7,  0,  0,  0,  0,  0,  2},   //  398
  {  0,  0,  0,  0,  0,  0, -5,  7,  0,  0,  0,  0,  0,  1},   //  399
  {  0,  0,  1, -1,  1,  0, -5,  6,  0,  0,  0,  0,  0,  0},   //  400
  {  0,  0,  0,  0,  0,  0,  5, -7,  0,  0,  0,  0,  0,  0},   //  401
  {  0,  0,  2, -2,  1,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  402
  {  0,  0,  0,  0,  0,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  403
  {  0,  0,  0,  0,  0, -1,  0,  3,  0,  0,  0,  0,  0,  2},   //  404
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  2},   //  405
  {  0,  0,  0,  0,  0,  0,  0, -2,  6,  0,  0,  0,  0,  2},   //  406
  {  0,  0,  0,  0,  1,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  407
  {  0,  0,  0,  0,  0,  0,  0, -6,  9,  0,  0,  0,  0,  2},   //  408
  {  0,  0,  0,  0,  0,  0,  0,  6, -9,  0,  0,  0,  0,  0},   //  409
  {  0,  0,  0,  0,  0,  0, -2,  2,  0,  0,  0,  0,  0,  1},   //  410
  {  0,  0,  1, -1,  1,  0, -2,  1,  0,  0,  0,  0,  0,  0},   //  411
  {  0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  412
  {  0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0,  1},   //  413
  {  0,  0,  0,  0,  0,  0,  0,  1,  0,  3,  0,  0,  0,  2},   //  414
  {  0,  0,  0,  0,  0,  0,  0, -5,  7,  0,  0,  0,  0,  2},   //  415
  {  0,  0,  0,  0,  0,  0,  0,  5, -7,  0,  0,  0,  0,  0},   //  416
  {  0,  0,  0,  0,  1,  0, -2,  2,  0,  0,  0,  0,  0,  0},   //  417
  {  0,  0,  0,  0,  0,  0,  0,  4, -5,  0,  0,  0,  0,  0},   //  418
  {  0,  0,  0,  0,  0,  0,  1, -3,  0,  0,  0,  0,  0,  0},   //  419
  {  0,  0,  0,  0,  0,  0, -1,  3,  0,  0,  0,  0,  0,  1},   //  420
  {  0,  0,  1, -1,  1,  0, -1,  2,  0,  0,  0,  0,  0,  0},   //  421
  {  0,  0,  0,  0,  0,  0, -1,  3,  0,  0,  0,  0,  0,  2},   //  422
  {  0,  0,  0,  0,  0,  0, -7, 10,  0,  0,  0,  0,  0,  2},   //  423
  {  0,  0,  0,  0,  0,  0, -7, 10,  0,  0,  0,  0,  0,  1},   //  424
  {  0,  0,  0,  0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0},   //  425
  {  0,  0,  0,  0,  0,  0, -4,  8,  0,  0,  0,  0,  0,  2},   //  426
  {  0,  0,  0,  0,  0,  0, -4,  5,  0,  0,  0,  0,  0,  2},   //  427
  {  0,  0,  0,  0,  0,  0, -4,  5,  0,  0,  0,  0,  0,  1},   //  428
  {  0,  0,  0,  0,  0,  0,  4, -5,  0,  0,  0,  0,  0,  0},   //  429
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  2},   //  430
  {  0,  0,  0,  0,  0,  0,  0, -2,  0,  5,  0,  0,  0,  2},   //  431
  {  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  2},   //  432
  {  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},   //  433
  {  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  2},   //  434
  {  0,  0,  0,  0,  0,  0, -9, 13,  0,  0,  0,  0,  0,  2},   //  435
  {  0,  0,  0,  0,  0,  0,  0, -1,  5,  0,  0,  0,  0,  2},   //  436
  {  0,  0,  0,  0,  0,  0,  0, -2,  0,  4,  0,  0,  0,  2},   //  437
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -4,  0,  0,  0,  0},   //  438
  {  0,  0,  0,  0,  0,  0,  0, -2,  7,  0,  0,  0,  0,  2},   //  439
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  440
  {  0,  0,  0,  0,  0,  0, -2,  5,  0,  0,  0,  0,  0,  1},   //  441
  {  0,  0,  0,  0,  0,  0, -2,  5,  0,  0,  0,  0,  0,  2},   //  442
  {  0,  0,  0,  0,  0,  0, -6,  8,  0,  0,  0,  0,  0,  2},   //  443
  {  0,  0,  0,  0,  0,  0, -6,  8,  0,  0,  0,  0,  0,  1},   //  444
  {  0,  0,  0,  0,  0,  0,  6, -8,  0,  0,  0,  0,  0,  0},   //  445
  {  0,  0,  0,  0,  1,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  446
  {  0,  0,  0,  0,  0,  0,  0, -3,  9,  0,  0,  0,  0,  2},   //  447
  {  0,  0,  0,  0,  0,  0,  0,  5, -6,  0,  0,  0,  0,  0},   //  448
  {  0,  0,  0,  0,  0,  0,  0,  5, -6,  0,  0,  0,  0,  2},   //  449
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  450
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  1},   //  451
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  2},   //  452
  {  0,  0,  0,  0,  0,  0, -5, 10,  0,  0,  0,  0,  0,  2},   //  453
  {  0,  0,  0,  0,  0,  0,  0,  4, -4,  0,  0,  0,  0,  0},   //  454
  {  0,  0,  0,  0,  0,  0,  0,  4, -4,  0,  0,  0,  0,  2},   //  455
  {  0,  0,  0,  0,  0,  0, -3,  3,  0,  0,  0,  0,  0,  1},   //  456
  {  0,  0,  0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  457
  {  0,  0,  0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0,  1},   //  458
  {  0,  0,  0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0,  2},   //  459
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0, -3,  0,  0,  0},   //  460
  {  0,  0,  0,  0,  0,  0,  0, -5, 13,  0,  0,  0,  0,  2},   //  461
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -1,  0,  0,  0,  0},   //  462
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -1,  0,  0,  0,  2},   //  463
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0, -2,  0,  0,  0},   //  464
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0, -2,  0,  0,  1},   //  465
  {  0,  0,  0,  0,  0,  0,  0,  3, -2,  0,  0,  0,  0,  0},   //  466
  {  0,  0,  0,  0,  0,  0,  0,  3, -2,  0,  0,  0,  0,  2},   //  467
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0, -1,  0,  0,  2},   //  468
  {  0,  0,  0,  0,  0,  0,  0, -6, 15,  0,  0,  0,  0,  2},   //  469
  {  0,  0,  0,  0,  0,  0, -8, 15,  0,  0,  0,  0,  0,  2},   //  470
  {  0,  0,  0,  0,  0,  0, -3,  9, -4,  0,  0,  0,  0,  2},   //  471
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  2, -5,  0,  0,  2},   //  472
  {  0,  0,  0,  0,  0,  0,  0, -2,  8, -1, -5,  0,  0,  2},   //  473
  {  0,  0,  0,  0,  0,  0,  0,  6, -8,  3,  0,  0,  0,  2},   //  474
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0},   //  475
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0},   //  476
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  1},   //  477
  {  0,  0,  1, -1,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  478
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  1},   //  479
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  2},   //  480
  {  0,  0,  0,  0,  0,  0,  0, -6, 16, -4, -5,  0,  0,  2},   //  481
  {  0,  0,  0,  0,  0,  0,  0, -2,  8, -3,  0,  0,  0,  2},   //  482
  {  0,  0,  0,  0,  0,  0,  0, -2,  8, -3,  0,  0,  0,  2},   //  483
  {  0,  0,  0,  0,  0,  0,  0,  6, -8,  1,  5,  0,  0,  2},   //  484
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  5,  0,  0,  2},   //  485
  {  0,  0,  0,  0,  0,  0,  3, -5,  4,  0,  0,  0,  0,  2},   //  486
  {  0,  0,  0,  0,  0,  0, -8, 11,  0,  0,  0,  0,  0,  2},   //  487
  {  0,  0,  0,  0,  0,  0, -8, 11,  0,  0,  0,  0,  0,  1},   //  488
  {  0,  0,  0,  0,  0,  0, -8, 11,  0,  0,  0,  0,  0,  2},   //  489
  {  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  2},   //  490
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  1,  0,  0,  2},   //  491
  {  0,  0,  0,  0,  0,  0,  3, -3,  0,  2,  0,  0,  0,  2},   //  492
  {  0,  0,  2, -2,  1,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  493
  {  0,  0,  1, -1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  494
  {  0,  0,  2, -2,  1,  0,  0, -4,  8, -3,  0,  0,  0,  0},   //  495
  {  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  2},   //  496
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  1,  0,  0,  0,  2},   //  497
  {  0,  0,  0,  0,  0,  0, -3,  7,  0,  0,  0,  0,  0,  2},   //  498
  {  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  2},   //  499
  {  0,  0,  0,  0,  0,  0, -5,  6,  0,  0,  0,  0,  0,  2},   //  500
  {  0,  0,  0,  0,  0,  0, -5,  6,  0,  0,  0,  0,  0,  1},   //  501
  {  0,  0,  0,  0,  0,  0,  5, -6,  0,  0,  0,  0,  0,  0},   //  502
  {  0,  0,  0,  0,  0,  0,  5, -6,  0,  0,  0,  0,  0,  2},   //  503
  {  0,  0,  0,  0,  0,  0,  0,  2,  0,  2,  0,  0,  0,  2},   //  504
  {  0,  0,  0,  0,  0,  0,  0, -1,  6,  0,  0,  0,  0,  2},   //  505
  {  0,  0,  0,  0,  0,  0,  0,  7, -9,  0,  0,  0,  0,  2},   //  506
  {  0,  0,  0,  0,  0,  0,  2, -1,  0,  0,  0,  0,  0,  0},   //  507
  {  0,  0,  0,  0,  0,  0,  2, -1,  0,  0,  0,  0,  0,  2},   //  508
  {  0,  0,  0,  0,  0,  0,  0,  6, -7,  0,  0,  0,  0,  2},   //  509
  {  0,  0,  0,  0,  0,  0,  0,  5, -5,  0,  0,  0,  0,  2},   //  510
  {  0,  0,  0,  0,  0,  0, -1,  4,  0,  0,  0,  0,  0,  1},   //  511
  {  0,  0,  0,  0,  0,  0, -1,  4,  0,  0,  0,  0,  0,  2},   //  512
  {  0,  0,  0,  0,  0,  0, -7,  9,  0,  0,  0,  0,  0,  2},   //  513
  {  0,  0,  0,  0,  0,  0, -7,  9,  0,  0,  0,  0,  0,  1},   //  514
  {  0,  0,  0,  0,  0,  0,  0,  4, -3,  0,  0,  0,  0,  2},   //  515
  {  0,  0,  0,  0,  0,  0,  0,  3, -1,  0,  0,  0,  0,  2},   //  516
  {  0,  0,  0,  0,  0,  0, -4,  4,  0,  0,  0,  0,  0,  1},   //  517
  {  0,  0,  0,  0,  0,  0,  4, -4,  0,  0,  0,  0,  0,  0},   //  518
  {  0,  0,  0,  0,  0,  0,  4, -4,  0,  0,  0,  0,  0,  1},   //  519
  {  0,  0,  0,  0,  0,  0,  4, -4,  0,  0,  0,  0,  0,  2},   //  520
  {  0,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  2},   //  521
  {  0,  0,  0,  0,  0,  0,  0, -3,  0,  5,  0,  0,  0,  2},   //  522
  {  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0},   //  523
  {  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  1},   //  524
  {  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  2},   //  525
  {  0,  0,  0,  0,  0,  0, -9, 12,  0,  0,  0,  0,  0,  2},   //  526
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -4,  0,  0,  0,  0},   //  527
  {  0,  0,  2, -2,  1,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  528
  {  0,  0,  0,  0,  0,  0,  0,  7, -8,  0,  0,  0,  0,  2},   //  529
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -3,  0,  0,  0,  0},   //  530
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -3,  0,  0,  0,  2},   //  531
  {  0,  0,  0,  0,  0,  0, -2,  6,  0,  0,  0,  0,  0,  2},   //  532
  {  0,  0,  0,  0,  0,  0, -6,  7,  0,  0,  0,  0,  0,  1},   //  533
  {  0,  0,  0,  0,  0,  0,  6, -7,  0,  0,  0,  0,  0,  0},   //  534
  {  0,  0,  0,  0,  0,  0,  0,  6, -6,  0,  0,  0,  0,  2},   //  535
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -2,  0,  0,  0,  0},   //  536
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -2,  0,  0,  0,  2},   //  537
  {  0,  0,  0,  0,  0,  0,  0,  5, -4,  0,  0,  0,  0,  2},   //  538
  {  0,  0,  0,  0,  0,  0,  3, -2,  0,  0,  0,  0,  0,  0},   //  539
  {  0,  0,  0,  0,  0,  0,  3, -2,  0,  0,  0,  0,  0,  2},   //  540
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -1,  0,  0,  0,  2},   //  541
  {  0,  0,  0,  0,  0,  0,  0,  3,  0, -1,  0,  0,  0,  2},   //  542
  {  0,  0,  0,  0,  0,  0,  0,  3,  0,  0, -2,  0,  0,  2},   //  543
  {  0,  0,  0,  0,  0,  0,  0,  4, -2,  0,  0,  0,  0,  2},   //  544
  {  0,  0,  0,  0,  0,  0,  0,  3,  0,  0, -1,  0,  0,  2},   //  545
  {  0,  0,  2, -2,  1,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  546
  {  0,  0,  0,  0,  0,  0, -8, 16,  0,  0,  0,  0,  0,  2},   //  547
  {  0,  0,  0,  0,  0,  0,  0,  3,  0,  2, -5,  0,  0,  2},   //  548
  {  0,  0,  0,  0,  0,  0,  0,  7, -8,  3,  0,  0,  0,  2},   //  549
  {  0,  0,  0,  0,  0,  0,  0, -5, 16, -4, -5,  0,  0,  2},   //  550
  {  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  2},   //  551
  {  0,  0,  0,  0,  0,  0,  0, -1,  8, -3,  0,  0,  0,  2},   //  552
  {  0,  0,  0,  0,  0,  0, -8, 10,  0,  0,  0,  0,  0,  2},   //  553
  {  0,  0,  0,  0,  0,  0, -8, 10,  0,  0,  0,  0,  0,  1},   //  554
  {  0,  0,  0,  0,  0,  0, -8, 10,  0,  0,  0,  0,  0,  2},   //  555
  {  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  2},   //  556
  {  0,  0,  0,  0,  0,  0,  0,  3,  0,  1,  0,  0,  0,  2},   //  557
  {  0,  0,  0,  0,  0,  0, -3,  8,  0,  0,  0,  0,  0,  2},   //  558
  {  0,  0,  0,  0,  0,  0, -5,  5,  0,  0,  0,  0,  0,  1},   //  559
  {  0,  0,  0,  0,  0,  0,  5, -5,  0,  0,  0,  0,  0,  0},   //  560
  {  0,  0,  0,  0,  0,  0,  5, -5,  0,  0,  0,  0,  0,  1},   //  561
  {  0,  0,  0,  0,  0,  0,  5, -5,  0,  0,  0,  0,  0,  2},   //  562
  {  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0},   //  563
  {  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  1},   //  564
  {  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  2},   //  565
  {  0,  0,  0,  0,  0,  0,  0,  7, -7,  0,  0,  0,  0,  2},   //  566
  {  0,  0,  0,  0,  0,  0,  0,  7, -7,  0,  0,  0,  0,  2},   //  567
  {  0,  0,  0,  0,  0,  0,  0,  6, -5,  0,  0,  0,  0,  2},   //  568
  {  0,  0,  0,  0,  0,  0,  7, -8,  0,  0,  0,  0,  0,  0},   //  569
  {  0,  0,  0,  0,  0,  0,  0,  5, -3,  0,  0,  0,  0,  2},   //  570
  {  0,  0,  0,  0,  0,  0,  4, -3,  0,  0,  0,  0,  0,  2},   //  571
  {  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  0,  2},   //  572
  {  0,  0,  0,  0,  0,  0, -9, 11,  0,  0,  0,  0,  0,  2},   //  573
  {  0,  0,  0,  0,  0,  0, -9, 11,  0,  0,  0,  0,  0,  1},   //  574
  {  0,  0,  0,  0,  0,  0,  0,  4,  0, -4,  0,  0,  0,  2},   //  575
  {  0,  0,  0,  0,  0,  0,  0,  4,  0, -3,  0,  0,  0,  2},   //  576
  {  0,  0,  0,  0,  0,  0, -6,  6,  0,  0,  0,  0,  0,  1},   //  577
  {  0,  0,  0,  0,  0,  0,  6, -6,  0,  0,  0,  0,  0,  0},   //  578
  {  0,  0,  0,  0,  0,  0,  6, -6,  0,  0,  0,  0,  0,  1},   //  579
  {  0,  0,  0,  0,  0,  0,  0,  4,  0, -2,  0,  0,  0,  2},   //  580
  {  0,  0,  0,  0,  0,  0,  0,  6, -4,  0,  0,  0,  0,  2},   //  581
  {  0,  0,  0,  0,  0,  0,  3, -1,  0,  0,  0,  0,  0,  0},   //  582
  {  0,  0,  0,  0,  0,  0,  3, -1,  0,  0,  0,  0,  0,  1},   //  583
  {  0,  0,  0,  0,  0,  0,  3, -1,  0,  0,  0,  0,  0,  2},   //  584
  {  0,  0,  0,  0,  0,  0,  0,  4,  0, -1,  0,  0,  0,  2},   //  585
  {  0,  0,  0,  0,  0,  0,  0,  4,  0,  0, -2,  0,  0,  2},   //  586
  {  0,  0,  0,  0,  0,  0,  0,  5, -2,  0,  0,  0,  0,  2},   //  587
  {  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0},   //  588
  {  0,  0,  0,  0,  0,  0,  8, -9,  0,  0,  0,  0,  0,  0},   //  589
  {  0,  0,  0,  0,  0,  0,  5, -4,  0,  0,  0,  0,  0,  2},   //  590
  {  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  2},   //  591
  {  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  1},   //  592
  {  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  1},   //  593
  {  0,  0,  0,  0,  0,  0, -7,  7,  0,  0,  0,  0,  0,  1},   //  594
  {  0,  0,  0,  0,  0,  0,  7, -7,  0,  0,  0,  0,  0,  0},   //  595
  {  0,  0,  0,  0,  0,  0,  4, -2,  0,  0,  0,  0,  0,  1},   //  596
  {  0,  0,  0,  0,  0,  0,  4, -2,  0,  0,  0,  0,  0,  2},   //  597
  {  0,  0,  0,  0,  0,  0,  4, -2,  0,  0,  0,  0,  0,  0},   //  598
  {  0,  0,  0,  0,  0,  0,  4, -2,  0,  0,  0,  0,  0,  0},   //  599
  {  0,  0,  0,  0,  0,  0,  0,  5,  0, -4,  0,  0,  0,  2},   //  600
  {  0,  0,  0,  0,  0,  0,  0,  5,  0, -3,  0,  0,  0,  2},   //  601
  {  0,  0,  0,  0,  0,  0,  0,  5,  0, -2,  0,  0,  0,  2},   //  602
  {  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  2},   //  603
  {  0,  0,  0,  0,  0,  0, -8,  8,  0,  0,  0,  0,  0,  1},   //  604
  {  0,  0,  0,  0,  0,  0,  8, -8,  0,  0,  0,  0,  0,  0},   //  605
  {  0,  0,  0,  0,  0,  0,  5, -3,  0,  0,  0,  0,  0,  1},   //  606
  {  0,  0,  0,  0,  0,  0,  5, -3,  0,  0,  0,  0,  0,  2},   //  607
  {  0,  0,  0,  0,  0,  0, -9,  9,  0,  0,  0,  0,  0,  1},   //  608
  {  0,  0,  0,  0,  0,  0, -9,  9,  0,  0,  0,  0,  0,  1},   //  609
  {  0,  0,  0,  0,  0,  0, -9,  9,  0,  0,  0,  0,  0,  1},   //  610
  {  0,  0,  0,  0,  0,  0,  9, -9,  0,  0,  0,  0,  0,  0},   //  611
  {  0,  0,  0,  0,  0,  0,  6, -4,  0,  0,  0,  0,  0,  1},   //  612
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  2},   //  613
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0},   //  614
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0},   //  615
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  1},   //  616
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  2},   //  617
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0},   //  618
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  1},   //  619
  {  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  2},   //  620
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2},   //  621
  {  1,  0,  0, -2,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  622
  {  1,  0,  0, -2,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  623
  {  1,  0,  0, -2,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  624
  {  1,  0,  0, -2,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  625
  { -1,  0,  0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  626
  { -1,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  627
  { -1,  0,  0,  2,  0,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  628
  {  1,  0,  0, -2,  0,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  629
  { -2,  0,  0,  2,  0,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  630
  { -1,  0,  0,  0,  0,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  631
  { -1,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  632
  { -1,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  633
  { -1,  0,  0,  2,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  634
  {  1,  0, -1,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  635
  { -1,  0,  0,  2,  0,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  636
  { -2,  0,  0,  0,  0,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  637
  {  1,  0,  0,  0,  0,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  638
  { -1,  0,  1, -1,  1,  0,  0, -1,  0,  0,  0,  0,  0,  0},   //  639
  {  1,  0,  1, -1,  1,  0,  0, -1,  0,  0,  0,  0,  0,  0},   //  640
  { -1,  0,  0,  0,  0,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  641
  { -1,  0,  0,  2,  1,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  642
  {  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  643
  { -1,  0,  0,  2,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  644
  { -1,  0,  0,  2,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  645
  {  1,  0,  0, -2,  1,  0,  0, -2,  0,  2,  0,  0,  0,  0},   //  646
  {  1,  0,  2, -2,  2,  0, -3,  3,  0,  0,  0,  0,  0,  0},   //  647
  {  1,  0,  2, -2,  2,  0,  0, -2,  0,  2,  0,  0,  0,  0},   //  648
  {  1,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  649
  {  1,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  650
  {  0,  0,  0, -2,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  651
  {  0,  0,  0, -2,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  652
  {  0,  0,  2,  0,  2,  0, -2,  2,  0,  0,  0,  0,  0,  0},   //  653
  {  0,  0,  2,  0,  2,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  654
  {  0,  0,  2,  0,  2,  0, -1,  1,  0,  0,  0,  0,  0,  0},   //  655
  {  0,  0,  2,  0,  2,  0, -2,  3,  0,  0,  0,  0,  0,  0},   //  656
  {  0,  0,  0,  2,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  657
  {  0,  0,  1,  1,  2,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  658
  {  1,  0,  2,  0,  2,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  659
  { -1,  0,  2,  0,  2,  0, 10, -3,  0,  0,  0,  0,  0,  0},   //  660
  {  0,  0,  1,  1,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  661
  {  1,  0,  2,  0,  2,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  662
  {  0,  0,  2,  0,  2,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  663
  {  0,  0,  2,  0,  2,  0,  0, -4,  8, -3,  0,  0,  0,  0},   //  664
  { -1,  0,  2,  0,  2,  0,  0, -4,  8, -3,  0,  0,  0,  0},   //  665
  {  2,  0,  2, -2,  2,  0,  0, -2,  0,  3,  0,  0,  0,  0},   //  666
  {  1,  0,  2,  0,  1,  0,  0, -2,  0,  3,  0,  0,  0,  0},   //  667
  {  0,  0,  1,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  668
  { -1,  0,  2,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  669
  { -2,  0,  2,  2,  2,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  670
  {  0,  0,  2,  0,  2,  0,  2, -3,  0,  0,  0,  0,  0,  0},   //  671
  {  0,  0,  2,  0,  2,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  672
  {  0,  0,  2,  0,  2,  0,  0,  1,  0, -1,  0,  0,  0,  0},   //  673
  {  0,  0,  2,  0,  2,  0,  2, -2,  0,  0,  0,  0,  0,  0},   //  674
  { -1,  0,  2,  2,  2,  0,  0, -1,  0,  1,  0,  0,  0,  0},   //  675
  {  1,  0,  2,  0,  2,  0, -1,  1,  0,  0,  0,  0,  0,  0},   //  676
  { -1,  0,  2,  2,  2,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  677
  {  2,  0,  2,  0,  2,  0,  0,  2,  0, -3,  0,  0,  0,  0},   //  678
  {  1,  0,  2,  0,  2,  0,  0, -4,  8, -3,  0,  0,  0,  0},   //  679
  {  1,  0,  2,  0,  2,  0,  0,  4, -8,  3,  0,  0,  0,  0},   //  680
  {  1,  0,  1,  1,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  681
  {  0,  0,  2,  0,  2,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  682
  {  2,  0,  2,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},   //  683
  { -1,  0,  2,  2,  2,  0,  0,  2,  0, -2,  0,  0,  0,  0},   //  684
  { -1,  0,  2,  2,  2,  0,  3, -3,  0,  0,  0,  0,  0,  0},   //  685
  {  1,  0,  2,  0,  2,  0,  1, -1,  0,  0,  0,  0,  0,  0},   //  686
  {  0,  0,  2,  2,  2,  0,  0,  2,  0, -2,  0,  0,  0,  0}    //  687
  };
  calcMulPlanArg(needInit, argArray, &ARG[0], 687);
  DebugAssert(which < 687, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulArg2000B(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[77];
  static const Char ARG[77][5] = {
  //         Multiple of        
  //      L     L'    F     D   Omega  
       {  0,    0,    0,    0,    1},                 //   1
       {  0,    0,    2,   -2,    2},                 //   2
       {  0,    0,    2,    0,    2},                 //   3
       {  0,    0,    0,    0,    2},                 //   4
       {  0,    1,    0,    0,    0},                 //   5
       {  0,    1,    2,   -2,    2},                 //   6
       {  1,    0,    0,    0,    0},                 //   7
       {  0,    0,    2,    0,    1},                 //   8
       {  1,    0,    2,    0,    2},                 //   9
       {  0,   -1,    2,   -2,    2},                 //  10
       {  0,    0,    2,   -2,    1},                 //  11
       { -1,    0,    2,    0,    2},                 //  12
       { -1,    0,    0,    2,    0},                 //  13
       {  1,    0,    0,    0,    1},                 //  14
       { -1,    0,    0,    0,    1},                 //  15
       { -1,    0,    2,    2,    2},                 //  16
       {  1,    0,    2,    0,    1},                 //  17
       { -2,    0,    2,    0,    1},                 //  18
       {  0,    0,    0,    2,    0},                 //  19
       {  0,    0,    2,    2,    2},                 //  20
       {  0,   -2,    2,   -2,    2},                 //  21
       { -2,    0,    0,    2,    0},                 //  22
       {  2,    0,    2,    0,    2},                 //  23
       {  1,    0,    2,   -2,    2},                 //  24
       { -1,    0,    2,    0,    1},                 //  25
       {  2,    0,    0,    0,    0},                 //  26
       {  0,    0,    2,    0,    0},                 //  27
       {  0,    1,    0,    0,    1},                 //  28
       { -1,    0,    0,    2,    1},                 //  29
       {  0,    2,    2,   -2,    2},                 //  30
       {  0,    0,   -2,    2,    0},                 //  31
       {  1,    0,    0,   -2,    1},                 //  32
       {  0,   -1,    0,    0,    1},                 //  33
       { -1,    0,    2,    2,    1},                 //  34
       {  0,    2,    0,    0,    0},                 //  35
       {  1,    0,    2,    2,    2},                 //  36
       { -2,    0,    2,    0,    0},                 //  37
       {  0,    1,    2,    0,    2},                 //  38
       {  0,    0,    2,    2,    1},                 //  39
       {  0,   -1,    2,    0,    2},                 //  40
       {  0,    0,    0,    2,    1},                 //  41
       {  1,    0,    2,   -2,    1},                 //  42
       {  2,    0,    2,   -2,    2},                 //  43
       { -2,    0,    0,    2,    1},                 //  44
       {  2,    0,    2,    0,    1},                 //  45
       {  0,   -1,    2,   -2,    1},                 //  46
       {  0,    0,    0,   -2,    1},                 //  47
       { -1,   -1,    0,    2,    0},                 //  48
       {  2,    0,    0,   -2,    1},                 //  49
       {  1,    0,    0,    2,    0},                 //  50
       {  0,    1,    2,   -2,    1},                 //  51
       {  1,   -1,    0,    0,    0},                 //  52
       { -2,    0,    2,    0,    2},                 //  53
       {  3,    0,    2,    0,    2},                 //  54
       {  0,   -1,    0,    2,    0},                 //  55
       {  1,   -1,    2,    0,    2},                 //  56
       {  0,    0,    0,    1,    0},                 //  57
       { -1,   -1,    2,    2,    2},                 //  58
       { -1,    0,    2,    0,    0},                 //  59
       {  0,   -1,    2,    2,    2},                 //  60
       { -2,    0,    0,    0,    1},                 //  61
       {  1,    1,    2,    0,    2},                 //  62
       {  2,    0,    0,    0,    1},                 //  63
       { -1,    1,    0,    1,    0},                 //  64
       {  1,    1,    0,    0,    0},                 //  65
       {  1,    0,    2,    0,    0},                 //  66
       { -1,    0,    2,   -2,    1},                 //  67
       {  1,    0,    0,    0,    2},                 //  68
       { -1,    0,    0,    1,    0},                 //  69
       {  0,    0,    2,    1,    2},                 //  70
       { -1,    0,    2,    4,    2},                 //  71
       { -1,    1,    0,    1,    1},                 //  72
       {  0,   -2,    2,   -2,    1},                 //  73
       {  1,    0,    2,    2,    1},                 //  74
       { -2,    0,    2,    2,    2},                 //  75
       { -1,    0,    0,    0,    2},                 //  76
       {  1,    1,    2,   -2,    2}                  //  77
  };
  calcMulArg(needInit, argArray, &ARG[0], 77);
  DebugAssert(which < 77, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulArgEqEqCT2000(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[34];
  static const Char ARG[34][14] = {
  // L   L'  F   D   Om  Me  Ve  E  Ma  Ju  Sa  Ur  Ne  pre
   { 0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  1
   { 0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  2
   { 0,  0,  2, -2,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  3
   { 0,  0,  2, -2,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  4
   { 0,  0,  2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  5
   { 0,  0,  2,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  6
   { 0,  0,  2,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  7
   { 0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  8
   { 0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   //  9
   { 0,  1,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 10
   { 1,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 11
   { 1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 12
   { 0,  1,  2, -2,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 13
   { 0,  1,  2, -2,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 14
   { 0,  0,  4, -4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 15
   { 0,  0,  1, -1,  1,  0, -8, 12,  0,  0,  0,  0,  0,  0 },   // 16
   { 0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 17
   { 0,  0,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 18
   { 1,  0,  2,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 19
   { 1,  0,  2,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 20
   { 0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 21
   { 0,  1, -2,  2, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 22
   { 0,  1, -2,  2, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 23
   { 0,  0,  0,  0,  0,  0,  8,-13,  0,  0,  0,  0,  0, -1 },   // 24
   { 0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 25
   { 2,  0, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 26
   { 1,  0,  0, -2,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 27
   { 0,  1,  2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 28
   { 1,  0,  0, -2, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 29
   { 0,  0,  4, -2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 30
   { 0,  0,  2, -2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 31
   { 1,  0, -2,  0, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 32
   { 1,  0, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0 },   // 33
   { 0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 }    // T^1 term
  };
  calcMulPlanArg(needInit, argArray, &ARG[0], 34);
  DebugAssert(which < 34, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulArg1950(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[69];
  static const Char ARG[69][5] = {
    {0	,0	,0	,0	,1	},
    {0	,0	,0	,0	,2	},
    {-2	,0	,2	,0	,1	},
    {2	,0	,-2	,0	,0	},
    {0  ,-2     ,2	,-2	,1	},
    
    {-2	,0	,2	,0	,2	},
    {1	,-1	,0	,-1	,0	},
    {0	,0	,2	,-2	,2	},
    {0	,1	,0	,0	,0	},
    {0	,1	,2	,-2	,2	},
    
    {0	,-1	,2	,-2	,2	},
    {0	,0	,2	,-2	,1	},
    {2	,0	,0	,-2	,0	},
    {0	,0	,2	,-2	,0	},
    {0	,2	,0	,0	,0	},
    
    {0	,1	,0	,0	,1	},
    {0	,2	,2	,-2	,2	},
    {0	,-1	,0	,0	,1	},
    {-2	,0	,0	,2	,1	},
    {0	,-1	,2	,-2	,1	},
    
    {2	,0	,0	,-2	,1	},
    {0	,1	,2	,-2	,1	},
    {1	,0	,0	,-1	,0	},
    {0	,0	,2	,0	,2	},
    {1	,0	,0	,0	,0	},
    
    {0	,0	,2	,0	,1	},
    {1	,0	,2	,0	,2	},
    {1	,0	,0	,-2	,0	},
    {-1	,0	,2	,0	,2	},
    {0	,0	,0	,2	,0	},
    
    {1	,0	,0	,0	,1	},
    {-1	,0	,0	,0	,1	},
    {-1	,0	,2	,2	,2	},
    {1	,0	,2	,0	,1	},
    {0	,0	,2	,2	,2	},
    
    {2	,0	,0	,0	,0	},
    {1	,0	,2	,-2	,2	},
    {2	,0	,2	,0	,2	},
    {0	,0	,2	,0	,0	},
    {-1	,0	,2	,0	,1	},
    
    {-1	,0	,0	,2	,1	},
    {1	,0	,0	,-2	,1	},
    {-1	,0	,2	,2	,1	},
    {1	,1	,0	,-2	,0	},
    {0	,1	,2	,0	,2	},
    
    {1	,0	,0	,2	,0	},
    {0	,0	,0	,2	,1	},
    {0	,-1	,2	,0	,2	},
    {1	,0	,2	,2	,2	},
    {2	,0	,2	,-2	,2	},
    
    {0	,0	,0	,-2	,1	},
    {0	,0	,2	,2	,1	},
    {1	,0	,2	,-2	,1	},
    {0	,0	,0	,1	,0	},
    {0	,1	,0	,-2	,0	},
    
    {1	,-1	,0	,0	,0	},
    {1	,0	,-2	,0	,0	},
    {2	,0	,2	,0	,1	},
    {1	,0	,2	,0	,0	},
    {1	,1	,0	,0	,0	},
    
    {1	,-1	,2	,0	,2	},
    {-2	,0	,0	,0	,1	},
    {-1	,0	,2	,-2	,1	},
    {2	,0	,0	,0	,1	},
    {-1	,-1	,2	,2	,2	},
    
    {0	,-1	,2	,2	,2	},
    {1	,0	,0	,0	,2	},
    {1	,1	,2	,0	,2	},
    {3	,0	,2	,0	,2	}
  };
  calcMulArg(needInit, argArray, &ARG[0], 69);
  DebugAssert(which < 69, AipsError);
  return argArray[which];
}

void MeasTable::calcMulArg(volatile Bool &need, Vector<Char> result[],
			   const Char coeff[][5], Int row){
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      Int i,j;
      for (i=0; i<row; i++) {
        result[i].resize(5);
        for (j=0; j<5; j++) {
          result[i](j) = coeff[i][j];
        }
      }
      need = False;
    }
  }
}

void MeasTable::calcMulPlanArg(volatile Bool &need, Vector<Char> result[],
			       const Char coeff[][14], Int row){
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      Int i,j;
      for (i=0; i<row; i++) {
        result[i].resize(14);
        for (j=0; j<14; j++) {
          result[i](j) = coeff[i][j];
        }
      }
      need = False;
    }
  }
}

const Vector<Double> &MeasTable::mulSC(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[106];
  static Polynomial<Double> polyArray[30];
  static const Long MULTD[15][5] = {
    {0  ,-171996 ,-1742 ,92025 ,89},
    {1  ,2062    ,2     ,-895  ,5},
    {8  ,-13187  ,-16   ,5736  ,-31},
    {9  ,1426    ,-34   ,54    ,-1},
    {10 ,-517    ,12    ,224   ,-6},
    {11 ,217     ,-5    ,-95   ,3},
    {12 ,129     ,1     ,-70   ,0},
    {15 ,17      ,-1    ,0     ,0},
    {17 ,-16     ,1     ,7     ,0},
    {30 ,-2274   ,-2    ,977   ,-5},
    {31 ,712     ,1     ,-7    ,0},
    {32 ,-386    ,-4    ,200   ,0},
    {33 ,-301    ,0     ,129   ,-1},
    {37 ,63      ,1     ,-33   ,0},
    {38 ,-58     ,-1    ,32    ,0}
  };
  static const Short MULSC[106][2] = {
    {0	,0	},
    {0	,0	},
    {46	,-24	},
    {11	,0	},
    {-3	,1	},
    
    {-3	,0	},
    {-2	,1	},
    {1	,0	},
    {0	,0	},
    {0	,0	},
    
    {0	,0	},
    {0	,0	},
    {0	,0	},
    {48	,1	},
    {-22	,0	},
    
    {0	,0	},
    {-15	,9	},
    {0	,0	},
    {-12	,6	},
    {-6	,3	},
    
    {-5	,3	},
    {4	,-2	},
    {4	,-2	},
    {-4	,0	},
    {1	,0	},
    
    {1	,0	},
    {-1	,0	},
    {1	,0	},
    {1	,0	},
    {-1	,0	},
    
    {0	,0	},
    {0	,0	},
    {0	,0	},
    {0	,0	},
    {-158	,-1	},
    
    {123	,-53	},
    {63	,-2	},
    {0	,0	},
    {0	,0	},
    {-59	,26	},
    
    {-51	,27	},
    {-38	,16	},
    {29	,-1	},
    {29	,-12	},
    {-31	,13	},
    
    {26	,-1	},
    {21	,-10	},
    {16	,-8	},
    {-13	,7	},
    {-10	,5	},
    
    {-7	,0	},
    {7	,-3	},
    {-7	,3	},
    {-8	,3	},
    {6	,0	},
    
    {6	,-3	},
    {-6	,3	},
    {-7	,3	},
    {6	,-3	},
    {-5	,3	},
    
    {5	,0	},
    {-5	,3	},
    {-4	,0	},
    {4	,0	},
    {-4	,0	},
    
    {-3	,0	},
    {3	,0	},
    {-3	,1	},
    {-3	,1	},
    {-2	,1	},
    
    {-3	,1	},
    {-3	,1	},
    {2	,-1	},
    {-2	,1	},
    {2	,-1	},
    
    {-2	,1	},
    {2	,0	},
    {2	,-1	},
    {1	,-1	},
    {-1	,0	},
    
    {1	,-1	},
    {-2	,1	},
    {-1	,0	},
    {1	,-1	},
    {-1	,1	},
    
    {-1	,1	},
    {1	,0	},
    {1	,0	},
    {1	,-1	},
    {-1	,0	},
    
    {-1	,0	},
    {1	,0	},
    {1	,0	},
    {-1	,0	},
    {1	,0	},
    
    {1	,0	},
    {-1	,0	},
    {-1	,0	},
    {-1	,0	},
    {-1	,0	},
    
    {-1	,0	},
    {-1	,0	},
    {-1	,0	},
    {1	,0	},
    {-1	,0	},
    
    {1	,0}
  };
  calcMulSC(needInit, checkT, T, argArray, 106, polyArray,
	    &MULTD[0], 15, &MULSC[0]);
  DebugAssert(which < 106, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulSC2000B(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[77];
  static Polynomial<Double> polyArray[2*77];
  static const Long MULSC[77][6] = {
  //          Longitude                Obliquity
  //  sin       t.sin     cos     cos     t.cos   sin
  {-172064161, -174666,  33386, 92052331,  9086, 15377},   //   1
  { -13170906,   -1675, -13696,  5730336, -3015, -4587},   //   2
  {  -2276413,    -234,   2796,   978459,  -485,  1374},   //   3
  {   2074554,     207,   -698,  -897492,   470,  -291},   //   4
  {   1475877,   -3633,  11817,    73871,  -184, -1924},   //   5
  {   -516821,    1226,   -524,   224386,  -677,  -174},   //   6
  {    711159,      73,   -872,    -6750,     0,   358},   //   7
  {   -387298,    -367,    380,   200728,    18,   318},   //   8
  {   -301461,     -36,    816,   129025,   -63,   367},   //   9
  {    215829,    -494,    111,   -95929,   299,   132},   //  10
  {    128227,     137,    181,   -68982,    -9,    39},   //  11
  {    123457,      11,     19,   -53311,    32,    -4},   //  12
  {    156994,      10,   -168,    -1235,     0,    82},   //  13
  {     63110,      63,     27,   -33228,     0,    -9},   //  14
  {    -57976,     -63,   -189,    31429,     0,   -75},   //  15
  {    -59641,     -11,    149,    25543,   -11,    66},   //  16
  {    -51613,     -42,    129,    26366,     0,    78},   //  17
  {     45893,      50,     31,   -24236,   -10,    20},   //  18
  {     63384,      11,   -150,    -1220,     0,    29},   //  19
  {    -38571,      -1,    158,    16452,   -11,    68},   //  20
  {     32481,       0,      0,   -13870,     0,     0},   //  21
  {    -47722,       0,    -18,      477,     0,   -25},   //  22
  {    -31046,      -1,    131,    13238,   -11,    59},   //  23
  {     28593,       0,     -1,   -12338,    10,    -3},   //  24
  {     20441,      21,     10,   -10758,     0,    -3},   //  25
  {     29243,       0,    -74,     -609,     0,    13},   //  26
  {     25887,       0,    -66,     -550,     0,    11},   //  27
  {    -14053,     -25,     79,     8551,    -2,   -45},   //  28
  {     15164,      10,     11,    -8001,     0,    -1},   //  29
  {    -15794,      72,    -16,     6850,   -42,    -5},   //  30
  {     21783,       0,     13,     -167,     0,    13},   //  31
  {    -12873,     -10,    -37,     6953,     0,   -14},   //  32
  {    -12654,      11,     63,     6415,     0,    26},   //  33
  {    -10204,       0,     25,     5222,     0,    15},   //  34
  {     16707,     -85,    -10,      168,    -1,    10},   //  35
  {     -7691,       0,     44,     3268,     0,    19},   //  36
  {    -11024,       0,    -14,      104,     0,     2},   //  37
  {      7566,     -21,    -11,    -3250,     0,    -5},   //  38
  {     -6637,     -11,     25,     3353,     0,    14},   //  39
  {     -7141,      21,      8,     3070,     0,     4},   //  40
  {     -6302,     -11,      2,     3272,     0,     4},   //  41
  {      5800,      10,      2,    -3045,     0,    -1},   //  42
  {      6443,       0,     -7,    -2768,     0,    -4},   //  43
  {     -5774,     -11,    -15,     3041,     0,    -5},   //  44
  {     -5350,       0,     21,     2695,     0,    12},   //  45
  {     -4752,     -11,     -3,     2719,     0,    -3},   //  46
  {     -4940,     -11,    -21,     2720,     0,    -9},   //  47
  {      7350,       0,     -8,      -51,     0,     4},   //  48
  {      4065,       0,      6,    -2206,     0,     1},   //  49
  {      6579,       0,    -24,     -199,     0,     2},   //  50
  {      3579,       0,      5,    -1900,     0,     1},   //  51
  {      4725,       0,     -6,      -41,     0,     3},   //  52
  {     -3075,       0,     -2,     1313,     0,    -1},   //  53
  {     -2904,       0,     15,     1233,     0,     7},   //  54
  {      4348,       0,    -10,      -81,     0,     2},   //  55
  {     -2878,       0,      8,     1232,     0,     4},   //  56
  {     -4230,       0,      5,      -20,     0,    -2},   //  57
  {     -2819,       0,      7,     1207,     0,     3},   //  58
  {     -4056,       0,      5,       40,     0,    -2},   //  59
  {     -2647,       0,     11,     1129,     0,     5},   //  60
  {     -2294,       0,    -10,     1266,     0,    -4},   //  61
  {      2481,       0,     -7,    -1062,     0,    -3},   //  62
  {      2179,       0,     -2,    -1129,     0,    -2},   //  63
  {      3276,       0,      1,       -9,     0,     0},   //  64
  {     -3389,       0,      5,       35,     0,    -2},   //  65
  {      3339,       0,    -13,     -107,     0,     1},   //  66
  {     -1987,       0,     -6,     1073,     0,    -2},   //  67
  {     -1981,       0,      0,      854,     0,     0},   //  68
  {      4026,       0,   -353,     -553,     0,  -139},   //  69
  {      1660,       0,     -5,     -710,     0,    -2},   //  70
  {     -1521,       0,      9,      647,     0,     4},   //  71
  {      1314,       0,      0,     -700,     0,     0},   //  72
  {     -1283,       0,      0,      672,     0,     0},   //  73
  {     -1331,       0,      8,      663,     0,     4},   //  74
  {      1383,       0,     -2,     -594,     0,    -2},   //  75
  {      1405,       0,      4,     -610,     0,     2},   //  76
  {      1290,       0,      0,     -556,     0,     0}    //  77
  };
  calcMulSC2000(needInit, checkT, T, argArray, 77, polyArray, &MULSC[0]);
  DebugAssert(which < 77, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulSC2000A(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[678];
  static Polynomial<Double> polyArray[2*678];
  // Luni-Solar nutation coefficients, unit 1e-7 arcsec
  static const Long MULSC[678][6] = {
  //           Longitude                Obliquity
  //    sin     t.sin     cos      cos    t.cos   sin
  {-172064161, -174666,  33386, 92052331,  9086, 15377},   //    1
  { -13170906,   -1675, -13696,  5730336, -3015, -4587},   //    2
  {  -2276413,    -234,   2796,   978459,  -485,  1374},   //    3
  {   2074554,     207,   -698,  -897492,   470,  -291},   //    4
  {   1475877,   -3633,  11817,    73871,  -184, -1924},   //    5
  {   -516821,    1226,   -524,   224386,  -677,  -174},   //    6
  {    711159,      73,   -872,    -6750,     0,   358},   //    7
  {   -387298,    -367,    380,   200728,    18,   318},   //    8
  {   -301461,     -36,    816,   129025,   -63,   367},   //    9
  {    215829,    -494,    111,   -95929,   299,   132},   //   10
  {    128227,     137,    181,   -68982,    -9,    39},   //   11
  {    123457,      11,     19,   -53311,    32,    -4},   //   12
  {    156994,      10,   -168,    -1235,     0,    82},   //   13
  {     63110,      63,     27,   -33228,     0,    -9},   //   14
  {    -57976,     -63,   -189,    31429,     0,   -75},   //   15
  {    -59641,     -11,    149,    25543,   -11,    66},   //   16
  {    -51613,     -42,    129,    26366,     0,    78},   //   17
  {     45893,      50,     31,   -24236,   -10,    20},   //   18
  {     63384,      11,   -150,    -1220,     0,    29},   //   19
  {    -38571,      -1,    158,    16452,   -11,    68},   //   20
  {     32481,       0,      0,   -13870,     0,     0},   //   21
  {    -47722,       0,    -18,      477,     0,   -25},   //   22
  {    -31046,      -1,    131,    13238,   -11,    59},   //   23
  {     28593,       0,     -1,   -12338,    10,    -3},   //   24
  {     20441,      21,     10,   -10758,     0,    -3},   //   25
  {     29243,       0,    -74,     -609,     0,    13},   //   26
  {     25887,       0,    -66,     -550,     0,    11},   //   27
  {    -14053,     -25,     79,     8551,    -2,   -45},   //   28
  {     15164,      10,     11,    -8001,     0,    -1},   //   29
  {    -15794,      72,    -16,     6850,   -42,    -5},   //   30
  {     21783,       0,     13,     -167,     0,    13},   //   31
  {    -12873,     -10,    -37,     6953,     0,   -14},   //   32
  {    -12654,      11,     63,     6415,     0,    26},   //   33
  {    -10204,       0,     25,     5222,     0,    15},   //   34
  {     16707,     -85,    -10,      168,    -1,    10},   //   35
  {     -7691,       0,     44,     3268,     0,    19},   //   36
  {    -11024,       0,    -14,      104,     0,     2},   //   37
  {      7566,     -21,    -11,    -3250,     0,    -5},   //   38
  {     -6637,     -11,     25,     3353,     0,    14},   //   39
  {     -7141,      21,      8,     3070,     0,     4},   //   40
  {     -6302,     -11,      2,     3272,     0,     4},   //   41
  {      5800,      10,      2,    -3045,     0,    -1},   //   42
  {      6443,       0,     -7,    -2768,     0,    -4},   //   43
  {     -5774,     -11,    -15,     3041,     0,    -5},   //   44
  {     -5350,       0,     21,     2695,     0,    12},   //   45
  {     -4752,     -11,     -3,     2719,     0,    -3},   //   46
  {     -4940,     -11,    -21,     2720,     0,    -9},   //   47
  {      7350,       0,     -8,      -51,     0,     4},   //   48
  {      4065,       0,      6,    -2206,     0,     1},   //   49
  {      6579,       0,    -24,     -199,     0,     2},   //   50
  {      3579,       0,      5,    -1900,     0,     1},   //   51
  {      4725,       0,     -6,      -41,     0,     3},   //   52
  {     -3075,       0,     -2,     1313,     0,    -1},   //   53
  {     -2904,       0,     15,     1233,     0,     7},   //   54
  {      4348,       0,    -10,      -81,     0,     2},   //   55
  {     -2878,       0,      8,     1232,     0,     4},   //   56
  {     -4230,       0,      5,      -20,     0,    -2},   //   57
  {     -2819,       0,      7,     1207,     0,     3},   //   58
  {     -4056,       0,      5,       40,     0,    -2},   //   59
  {     -2647,       0,     11,     1129,     0,     5},   //   60
  {     -2294,       0,    -10,     1266,     0,    -4},   //   61
  {      2481,       0,     -7,    -1062,     0,    -3},   //   62
  {      2179,       0,     -2,    -1129,     0,    -2},   //   63
  {      3276,       0,      1,       -9,     0,     0},   //   64
  {     -3389,       0,      5,       35,     0,    -2},   //   65
  {      3339,       0,    -13,     -107,     0,     1},   //   66
  {     -1987,       0,     -6,     1073,     0,    -2},   //   67
  {     -1981,       0,      0,      854,     0,     0},   //   68
  {      4026,       0,   -353,     -553,     0,  -139},   //   69
  {      1660,       0,     -5,     -710,     0,    -2},   //   70
  {     -1521,       0,      9,      647,     0,     4},   //   71
  {      1314,       0,      0,     -700,     0,     0},   //   72
  {     -1283,       0,      0,      672,     0,     0},   //   73
  {     -1331,       0,      8,      663,     0,     4},   //   74
  {      1383,       0,     -2,     -594,     0,    -2},   //   75
  {      1405,       0,      4,     -610,     0,     2},   //   76
  {      1290,       0,      0,     -556,     0,     0},   //   77
  {     -1214,       0,      5,      518,     0,     2},   //   78
  {      1146,       0,     -3,     -490,     0,    -1},   //   79
  {      1019,       0,     -1,     -527,     0,    -1},   //   80
  {     -1100,       0,      9,      465,     0,     4},   //   81
  {      -970,       0,      2,      496,     0,     1},   //   82
  {      1575,       0,     -6,      -50,     0,     0},   //   83
  {       934,       0,     -3,     -399,     0,    -1},   //   84
  {       922,       0,     -1,     -395,     0,    -1},   //   85
  {       815,       0,     -1,     -422,     0,    -1},   //   86
  {       834,       0,      2,     -440,     0,     1},   //   87
  {      1248,       0,      0,     -170,     0,     1},   //   88
  {      1338,       0,     -5,      -39,     0,     0},   //   89
  {       716,       0,     -2,     -389,     0,    -1},   //   90
  {      1282,       0,     -3,      -23,     0,     1},   //   91
  {       742,       0,      1,     -391,     0,     0},   //   92
  {      1020,       0,    -25,     -495,     0,   -10},   //   93
  {       715,       0,     -4,     -326,     0,     2},   //   94
  {      -666,       0,     -3,      369,     0,    -1},   //   95
  {      -667,       0,      1,      346,     0,     1},   //   96
  {      -704,       0,      0,      304,     0,     0},   //   97
  {      -694,       0,      5,      294,     0,     2},   //   98
  {     -1014,       0,     -1,        4,     0,    -1},   //   99
  {      -585,       0,     -2,      316,     0,    -1},   //  100
  {      -949,       0,      1,        8,     0,    -1},   //  101
  {      -595,       0,      0,      258,     0,     0},   //  102
  {       528,       0,      0,     -279,     0,     0},   //  103
  {      -590,       0,      4,      252,     0,     2},   //  104
  {       570,       0,     -2,     -244,     0,    -1},   //  105
  {      -502,       0,      3,      250,     0,     2},   //  106
  {      -875,       0,      1,       29,     0,     0},   //  107
  {      -492,       0,     -3,      275,     0,    -1},   //  108
  {       535,       0,     -2,     -228,     0,    -1},   //  109
  {      -467,       0,      1,      240,     0,     1},   //  110
  {       591,       0,      0,     -253,     0,     0},   //  111
  {      -453,       0,     -1,      244,     0,    -1},   //  112
  {       766,       0,      1,        9,     0,     0},   //  113
  {      -446,       0,      2,      225,     0,     1},   //  114
  {      -488,       0,      2,      207,     0,     1},   //  115
  {      -468,       0,      0,      201,     0,     0},   //  116
  {      -421,       0,      1,      216,     0,     1},   //  117
  {       463,       0,      0,     -200,     0,     0},   //  118
  {      -673,       0,      2,       14,     0,     0},   //  119
  {       658,       0,      0,       -2,     0,     0},   //  120
  {      -438,       0,      0,      188,     0,     0},   //  121
  {      -390,       0,      0,      205,     0,     0},   //  122
  {       639,     -11,     -2,      -19,     0,     0},   //  123
  {       412,       0,     -2,     -176,     0,    -1},   //  124
  {      -361,       0,      0,      189,     0,     0},   //  125
  {       360,       0,     -1,     -185,     0,    -1},   //  126
  {       588,       0,     -3,      -24,     0,     0},   //  127
  {      -578,       0,      1,        5,     0,     0},   //  128
  {      -396,       0,      0,      171,     0,     0},   //  129
  {       565,       0,     -1,       -6,     0,     0},   //  130
  {      -335,       0,     -1,      184,     0,    -1},   //  131
  {       357,       0,      1,     -154,     0,     0},   //  132
  {       321,       0,      1,     -174,     0,     0},   //  133
  {      -301,       0,     -1,      162,     0,     0},   //  134
  {      -334,       0,      0,      144,     0,     0},   //  135
  {       493,       0,     -2,      -15,     0,     0},   //  136
  {       494,       0,     -2,      -19,     0,     0},   //  137
  {       337,       0,     -1,     -143,     0,    -1},   //  138
  {       280,       0,     -1,     -144,     0,     0},   //  139
  {       309,       0,      1,     -134,     0,     0},   //  140
  {      -263,       0,      2,      131,     0,     1},   //  141
  {       253,       0,      1,     -138,     0,     0},   //  142
  {       245,       0,      0,     -128,     0,     0},   //  143
  {       416,       0,     -2,      -17,     0,     0},   //  144
  {      -229,       0,      0,      128,     0,     0},   //  145
  {       231,       0,      0,     -120,     0,     0},   //  146
  {      -259,       0,      2,      109,     0,     1},   //  147
  {       375,       0,     -1,       -8,     0,     0},   //  148
  {       252,       0,      0,     -108,     0,     0},   //  149
  {      -245,       0,      1,      104,     0,     0},   //  150
  {       243,       0,     -1,     -104,     0,     0},   //  151
  {       208,       0,      1,     -112,     0,     0},   //  152
  {       199,       0,      0,     -102,     0,     0},   //  153
  {      -208,       0,      1,      105,     0,     0},   //  154
  {       335,       0,     -2,      -14,     0,     0},   //  155
  {      -325,       0,      1,        7,     0,     0},   //  156
  {      -187,       0,      0,       96,     0,     0},   //  157
  {       197,       0,     -1,     -100,     0,     0},   //  158
  {      -192,       0,      2,       94,     0,     1},   //  159
  {      -188,       0,      0,       83,     0,     0},   //  160
  {       276,       0,      0,       -2,     0,     0},   //  161
  {      -286,       0,      1,        6,     0,     0},   //  162
  {       186,       0,     -1,      -79,     0,     0},   //  163
  {      -219,       0,      0,       43,     0,     0},   //  164
  {       276,       0,      0,        2,     0,     0},   //  165
  {      -153,       0,     -1,       84,     0,     0},   //  166
  {      -156,       0,      0,       81,     0,     0},   //  167
  {      -154,       0,      1,       78,     0,     0},   //  168
  {      -174,       0,      1,       75,     0,     0},   //  169
  {      -163,       0,      2,       69,     0,     1},   //  170
  {      -228,       0,      0,        1,     0,     0},   //  171
  {        91,       0,     -4,      -54,     0,    -2},   //  172
  {       175,       0,      0,      -75,     0,     0},   //  173
  {      -159,       0,      0,       69,     0,     0},   //  174
  {       141,       0,      0,      -72,     0,     0},   //  175
  {       147,       0,      0,      -75,     0,     0},   //  176
  {      -132,       0,      0,       69,     0,     0},   //  177
  {       159,       0,    -28,      -54,     0,    11},   //  178
  {       213,       0,      0,       -4,     0,     0},   //  179
  {       123,       0,      0,      -64,     0,     0},   //  180
  {      -118,       0,     -1,       66,     0,     0},   //  181
  {       144,       0,     -1,      -61,     0,     0},   //  182
  {      -121,       0,      1,       60,     0,     0},   //  183
  {      -134,       0,      1,       56,     0,     1},   //  184
  {      -105,       0,      0,       57,     0,     0},   //  185
  {      -102,       0,      0,       56,     0,     0},   //  186
  {       120,       0,      0,      -52,     0,     0},   //  187
  {       101,       0,      0,      -54,     0,     0},   //  188
  {      -113,       0,      0,       59,     0,     0},   //  189
  {      -106,       0,      0,       61,     0,     0},   //  190
  {      -129,       0,      1,       55,     0,     0},   //  191
  {      -114,       0,      0,       57,     0,     0},   //  192
  {       113,       0,     -1,      -49,     0,     0},   //  193
  {      -102,       0,      0,       44,     0,     0},   //  194
  {       -94,       0,      0,       51,     0,     0},   //  195
  {      -100,       0,     -1,       56,     0,     0},   //  196
  {        87,       0,      0,      -47,     0,     0},   //  197
  {       161,       0,      0,       -1,     0,     0},   //  198
  {        96,       0,      0,      -50,     0,     0},   //  199
  {       151,       0,     -1,       -5,     0,     0},   //  200
  {      -104,       0,      0,       44,     0,     0},   //  201
  {      -110,       0,      0,       48,     0,     0},   //  202
  {      -100,       0,      1,       50,     0,     0},   //  203
  {        92,       0,     -5,       12,     0,    -2},   //  204
  {        82,       0,      0,      -45,     0,     0},   //  205
  {        82,       0,      0,      -45,     0,     0},   //  206
  {       -78,       0,      0,       41,     0,     0},   //  207
  {       -77,       0,      0,       43,     0,     0},   //  208
  {         2,       0,      0,       54,     0,     0},   //  209
  {        94,       0,      0,      -40,     0,     0},   //  210
  {       -93,       0,      0,       40,     0,     0},   //  211
  {       -83,       0,     10,       40,     0,    -2},   //  212
  {        83,       0,      0,      -36,     0,     0},   //  213
  {       -91,       0,      0,       39,     0,     0},   //  214
  {       128,       0,      0,       -1,     0,     0},   //  215
  {       -79,       0,      0,       34,     0,     0},   //  216
  {       -83,       0,      0,       47,     0,     0},   //  217
  {        84,       0,      0,      -44,     0,     0},   //  218
  {        83,       0,      0,      -43,     0,     0},   //  219
  {        91,       0,      0,      -39,     0,     0},   //  220
  {       -77,       0,      0,       39,     0,     0},   //  221
  {        84,       0,      0,      -43,     0,     0},   //  222
  {       -92,       0,      1,       39,     0,     0},   //  223
  {       -92,       0,      1,       39,     0,     0},   //  224
  {       -94,       0,      0,        0,     0,     0},   //  225
  {        68,       0,      0,      -36,     0,     0},   //  226
  {       -61,       0,      0,       32,     0,     0},   //  227
  {        71,       0,      0,      -31,     0,     0},   //  228
  {        62,       0,      0,      -34,     0,     0},   //  229
  {       -63,       0,      0,       33,     0,     0},   //  230
  {       -73,       0,      0,       32,     0,     0},   //  231
  {       115,       0,      0,       -2,     0,     0},   //  232
  {      -103,       0,      0,        2,     0,     0},   //  233
  {        63,       0,      0,      -28,     0,     0},   //  234
  {        74,       0,      0,      -32,     0,     0},   //  235
  {      -103,       0,     -3,        3,     0,    -1},   //  236
  {       -69,       0,      0,       30,     0,     0},   //  237
  {        57,       0,      0,      -29,     0,     0},   //  238
  {        94,       0,      0,       -4,     0,     0},   //  239
  {        64,       0,      0,      -33,     0,     0},   //  240
  {       -63,       0,      0,       26,     0,     0},   //  241
  {       -38,       0,      0,       20,     0,     0},   //  242
  {       -43,       0,      0,       24,     0,     0},   //  243
  {       -45,       0,      0,       23,     0,     0},   //  244
  {        47,       0,      0,      -24,     0,     0},   //  245
  {       -48,       0,      0,       25,     0,     0},   //  246
  {        45,       0,      0,      -26,     0,     0},   //  247
  {        56,       0,      0,      -25,     0,     0},   //  248
  {        88,       0,      0,        2,     0,     0},   //  249
  {       -75,       0,      0,        0,     0,     0},   //  250
  {        85,       0,      0,        0,     0,     0},   //  251
  {        49,       0,      0,      -26,     0,     0},   //  252
  {       -74,       0,     -3,       -1,     0,    -1},   //  253
  {       -39,       0,      0,       21,     0,     0},   //  254
  {        45,       0,      0,      -20,     0,     0},   //  255
  {        51,       0,      0,      -22,     0,     0},   //  256
  {       -40,       0,      0,       21,     0,     0},   //  257
  {        41,       0,      0,      -21,     0,     0},   //  258
  {       -42,       0,      0,       24,     0,     0},   //  259
  {       -51,       0,      0,       22,     0,     0},   //  260
  {       -42,       0,      0,       22,     0,     0},   //  261
  {        39,       0,      0,      -21,     0,     0},   //  262
  {        46,       0,      0,      -18,     0,     0},   //  263
  {       -53,       0,      0,       22,     0,     0},   //  264
  {        82,       0,      0,       -4,     0,     0},   //  265
  {        81,       0,     -1,       -4,     0,     0},   //  266
  {        47,       0,      0,      -19,     0,     0},   //  267
  {        53,       0,      0,      -23,     0,     0},   //  268
  {       -45,       0,      0,       22,     0,     0},   //  269
  {       -44,       0,      0,       -2,     0,     0},   //  270
  {       -33,       0,      0,       16,     0,     0},   //  271
  {       -61,       0,      0,        1,     0,     0},   //  272
  {        28,       0,      0,      -15,     0,     0},   //  273
  {       -38,       0,      0,       19,     0,     0},   //  274
  {       -33,       0,      0,       21,     0,     0},   //  275
  {       -60,       0,      0,        0,     0,     0},   //  276
  {        48,       0,      0,      -10,     0,     0},   //  277
  {        27,       0,      0,      -14,     0,     0},   //  278
  {        38,       0,      0,      -20,     0,     0},   //  279
  {        31,       0,      0,      -13,     0,     0},   //  280
  {       -29,       0,      0,       15,     0,     0},   //  281
  {        28,       0,      0,      -15,     0,     0},   //  282
  {       -32,       0,      0,       15,     0,     0},   //  283
  {        45,       0,      0,       -8,     0,     0},   //  284
  {       -44,       0,      0,       19,     0,     0},   //  285
  {        28,       0,      0,      -15,     0,     0},   //  286
  {       -51,       0,      0,        0,     0,     0},   //  287
  {       -36,       0,      0,       20,     0,     0},   //  288
  {        44,       0,      0,      -19,     0,     0},   //  289
  {        26,       0,      0,      -14,     0,     0},   //  290
  {       -60,       0,      0,        2,     0,     0},   //  291
  {        35,       0,      0,      -18,     0,     0},   //  292
  {       -27,       0,      0,       11,     0,     0},   //  293
  {        47,       0,      0,       -1,     0,     0},   //  294
  {        36,       0,      0,      -15,     0,     0},   //  295
  {       -36,       0,      0,       20,     0,     0},   //  296
  {       -35,       0,      0,       19,     0,     0},   //  297
  {       -37,       0,      0,       19,     0,     0},   //  298
  {        32,       0,      0,      -16,     0,     0},   //  299
  {        35,       0,      0,      -14,     0,     0},   //  300
  {        32,       0,      0,      -13,     0,     0},   //  301
  {        65,       0,      0,       -2,     0,     0},   //  302
  {        47,       0,      0,       -1,     0,     0},   //  303
  {        32,       0,      0,      -16,     0,     0},   //  304
  {        37,       0,      0,      -16,     0,     0},   //  305
  {       -30,       0,      0,       15,     0,     0},   //  306
  {       -32,       0,      0,       16,     0,     0},   //  307
  {       -31,       0,      0,       13,     0,     0},   //  308
  {        37,       0,      0,      -16,     0,     0},   //  309
  {        31,       0,      0,      -13,     0,     0},   //  310
  {        49,       0,      0,       -2,     0,     0},   //  311
  {        32,       0,      0,      -13,     0,     0},   //  312
  {        23,       0,      0,      -12,     0,     0},   //  313
  {       -43,       0,      0,       18,     0,     0},   //  314
  {        26,       0,      0,      -11,     0,     0},   //  315
  {       -32,       0,      0,       14,     0,     0},   //  316
  {       -29,       0,      0,       14,     0,     0},   //  317
  {       -27,       0,      0,       12,     0,     0},   //  318
  {        30,       0,      0,        0,     0,     0},   //  319
  {       -11,       0,      0,        5,     0,     0},   //  320
  {       -21,       0,      0,       10,     0,     0},   //  321
  {       -34,       0,      0,       15,     0,     0},   //  322
  {       -10,       0,      0,        6,     0,     0},   //  323
  {       -36,       0,      0,        0,     0,     0},   //  324
  {        -9,       0,      0,        4,     0,     0},   //  325
  {       -12,       0,      0,        5,     0,     0},   //  326
  {       -21,       0,      0,        5,     0,     0},   //  327
  {       -29,       0,      0,       -1,     0,     0},   //  328
  {       -15,       0,      0,        3,     0,     0},   //  329
  {       -20,       0,      0,        0,     0,     0},   //  330
  {        28,       0,      0,        0,     0,    -2},   //  331
  {        17,       0,      0,        0,     0,     0},   //  332
  {       -22,       0,      0,       12,     0,     0},   //  333
  {       -14,       0,      0,        7,     0,     0},   //  334
  {        24,       0,      0,      -11,     0,     0},   //  335
  {        11,       0,      0,       -6,     0,     0},   //  336
  {        14,       0,      0,       -6,     0,     0},   //  337
  {        24,       0,      0,        0,     0,     0},   //  338
  {        18,       0,      0,       -8,     0,     0},   //  339
  {       -38,       0,      0,        0,     0,     0},   //  340
  {       -31,       0,      0,        0,     0,     0},   //  341
  {       -16,       0,      0,        8,     0,     0},   //  342
  {        29,       0,      0,        0,     0,     0},   //  343
  {       -18,       0,      0,       10,     0,     0},   //  344
  {       -10,       0,      0,        5,     0,     0},   //  345
  {       -17,       0,      0,       10,     0,     0},   //  346
  {         9,       0,      0,       -4,     0,     0},   //  347
  {        16,       0,      0,       -6,     0,     0},   //  348
  {        22,       0,      0,      -12,     0,     0},   //  349
  {        20,       0,      0,        0,     0,     0},   //  350
  {       -13,       0,      0,        6,     0,     0},   //  351
  {       -17,       0,      0,        9,     0,     0},   //  352
  {       -14,       0,      0,        8,     0,     0},   //  353
  {         0,       0,      0,       -7,     0,     0},   //  354
  {        14,       0,      0,        0,     0,     0},   //  355
  {        19,       0,      0,      -10,     0,     0},   //  356
  {       -34,       0,      0,        0,     0,     0},   //  357
  {       -20,       0,      0,        8,     0,     0},   //  358
  {         9,       0,      0,       -5,     0,     0},   //  359
  {       -18,       0,      0,        7,     0,     0},   //  360
  {        13,       0,      0,       -6,     0,     0},   //  361
  {        17,       0,      0,        0,     0,     0},   //  362
  {       -12,       0,      0,        5,     0,     0},   //  363
  {        15,       0,      0,       -8,     0,     0},   //  364
  {       -11,       0,      0,        3,     0,     0},   //  365
  {        13,       0,      0,       -5,     0,     0},   //  366
  {       -18,       0,      0,        0,     0,     0},   //  367
  {       -35,       0,      0,        0,     0,     0},   //  368
  {         9,       0,      0,       -4,     0,     0},   //  369
  {       -19,       0,      0,       10,     0,     0},   //  370
  {       -26,       0,      0,       11,     0,     0},   //  371
  {         8,       0,      0,       -4,     0,     0},   //  372
  {       -10,       0,      0,        4,     0,     0},   //  373
  {        10,       0,      0,       -6,     0,     0},   //  374
  {       -21,       0,      0,        9,     0,     0},   //  375
  {       -15,       0,      0,        0,     0,     0},   //  376
  {         9,       0,      0,       -5,     0,     0},   //  377
  {       -29,       0,      0,        0,     0,     0},   //  378
  {       -19,       0,      0,       10,     0,     0},   //  379
  {        12,       0,      0,       -5,     0,     0},   //  380
  {        22,       0,      0,       -9,     0,     0},   //  381
  {       -10,       0,      0,        5,     0,     0},   //  382
  {       -20,       0,      0,       11,     0,     0},   //  383
  {       -20,       0,      0,        0,     0,     0},   //  384
  {       -17,       0,      0,        7,     0,     0},   //  385
  {        15,       0,      0,       -3,     0,     0},   //  386
  {         8,       0,      0,       -4,     0,     0},   //  387
  {        14,       0,      0,        0,     0,     0},   //  388
  {       -12,       0,      0,        6,     0,     0},   //  389
  {        25,       0,      0,        0,     0,     0},   //  390
  {       -13,       0,      0,        6,     0,     0},   //  391
  {       -14,       0,      0,        8,     0,     0},   //  392
  {        13,       0,      0,       -5,     0,     0},   //  393
  {       -17,       0,      0,        9,     0,     0},   //  394
  {       -12,       0,      0,        6,     0,     0},   //  395
  {       -10,       0,      0,        5,     0,     0},   //  396
  {        10,       0,      0,       -6,     0,     0},   //  397
  {       -15,       0,      0,        0,     0,     0},   //  398
  {       -22,       0,      0,        0,     0,     0},   //  399
  {        28,       0,      0,       -1,     0,     0},   //  400
  {        15,       0,      0,       -7,     0,     0},   //  401
  {        23,       0,      0,      -10,     0,     0},   //  402
  {        12,       0,      0,       -5,     0,     0},   //  403
  {        29,       0,      0,       -1,     0,     0},   //  404
  {       -25,       0,      0,        1,     0,     0},   //  405
  {        22,       0,      0,        0,     0,     0},   //  406
  {       -18,       0,      0,        0,     0,     0},   //  407
  {        15,       0,      0,        3,     0,     0},   //  408
  {       -23,       0,      0,        0,     0,     0},   //  409
  {        12,       0,      0,       -5,     0,     0},   //  410
  {        -8,       0,      0,        4,     0,     0},   //  411
  {       -19,       0,      0,        0,     0,     0},   //  412
  {       -10,       0,      0,        4,     0,     0},   //  413
  {        21,       0,      0,       -9,     0,     0},   //  414
  {        23,       0,      0,       -1,     0,     0},   //  415
  {       -16,       0,      0,        8,     0,     0},   //  416
  {       -19,       0,      0,        9,     0,     0},   //  417
  {       -22,       0,      0,       10,     0,     0},   //  418
  {        27,       0,      0,       -1,     0,     0},   //  419
  {        16,       0,      0,       -8,     0,     0},   //  420
  {        19,       0,      0,       -8,     0,     0},   //  421
  {         9,       0,      0,       -4,     0,     0},   //  422
  {        -9,       0,      0,        4,     0,     0},   //  423
  {        -9,       0,      0,        4,     0,     0},   //  424
  {        -8,       0,      0,        4,     0,     0},   //  425
  {        18,       0,      0,       -9,     0,     0},   //  426
  {        16,       0,      0,       -1,     0,     0},   //  427
  {       -10,       0,      0,        4,     0,     0},   //  428
  {       -23,       0,      0,        9,     0,     0},   //  429
  {        16,       0,      0,       -1,     0,     0},   //  430
  {       -12,       0,      0,        6,     0,     0},   //  431
  {        -8,       0,      0,        4,     0,     0},   //  432
  {        30,       0,      0,       -2,     0,     0},   //  433
  {        24,       0,      0,      -10,     0,     0},   //  434
  {        10,       0,      0,       -4,     0,     0},   //  435
  {       -16,       0,      0,        7,     0,     0},   //  436
  {       -16,       0,      0,        7,     0,     0},   //  437
  {        17,       0,      0,       -7,     0,     0},   //  438
  {       -24,       0,      0,       10,     0,     0},   //  439
  {       -12,       0,      0,        5,     0,     0},   //  440
  {       -24,       0,      0,       11,     0,     0},   //  441
  {       -23,       0,      0,        9,     0,     0},   //  442
  {       -13,       0,      0,        5,     0,     0},   //  443
  {       -15,       0,      0,        7,     0,     0},   //  444
  {         0,       0,  -1988,        0,     0, -1679},   //  445
  {         0,       0,    -63,        0,     0,   -27},   //  446
  {        -4,       0,      0,        0,     0,     0},   //  447
  {         0,       0,      5,        0,     0,     4},   //  448
  {         5,       0,      0,       -3,     0,     0},   //  449
  {         0,       0,    364,        0,     0,   176},   //  450
  {         0,       0,  -1044,        0,     0,  -891},   //  451
  {        -3,       0,      0,        1,     0,     0},   //  452
  {         4,       0,      0,       -2,     0,     0},   //  453
  {         0,       0,    330,        0,     0,     0},   //  454
  {         5,       0,      0,       -2,     0,     0},   //  455
  {         3,       0,      0,       -2,     0,     0},   //  456
  {        -3,       0,      0,        1,     0,     0},   //  457
  {        -5,       0,      0,        2,     0,     0},   //  458
  {         3,       0,      0,       -1,     0,     0},   //  459
  {         3,       0,      0,        0,     0,     0},   //  460
  {         3,       0,      0,        0,     0,     0},   //  461
  {         0,       0,      5,        0,     0,     0},   //  462
  {         0,       0,      0,        1,     0,     0},   //  463
  {         4,       0,      0,       -2,     0,     0},   //  464
  {         6,       0,      0,        0,     0,     0},   //  465
  {         5,       0,      0,       -2,     0,     0},   //  466
  {        -7,       0,      0,        0,     0,     0},   //  467
  {       -12,       0,      0,        0,     0,     0},   //  468
  {         5,       0,      0,       -3,     0,     0},   //  469
  {         3,       0,      0,       -1,     0,     0},   //  470
  {        -5,       0,      0,        0,     0,     0},   //  471
  {         3,       0,      0,        0,     0,     0},   //  472
  {        -7,       0,      0,        3,     0,     0},   //  473
  {         7,       0,      0,       -4,     0,     0},   //  474
  {         0,       0,    -12,        0,     0,   -10},   //  475
  {         4,       0,      0,       -2,     0,     0},   //  476
  {         3,       0,      0,       -2,     0,     0},   //  477
  {        -3,       0,      0,        2,     0,     0},   //  478
  {        -7,       0,      0,        3,     0,     0},   //  479
  {        -4,       0,      0,        2,     0,     0},   //  480
  {        -3,       0,      0,        1,     0,     0},   //  481
  {         0,       0,      0,        0,     0,     0},   //  482
  {        -3,       0,      0,        1,     0,     0},   //  483
  {         7,       0,      0,       -3,     0,     0},   //  484
  {        -4,       0,      0,        2,     0,     0},   //  485
  {         4,       0,      0,       -2,     0,     0},   //  486
  {        -5,       0,      0,        3,     0,     0},   //  487
  {         5,       0,      0,        0,     0,     0},   //  488
  {        -5,       0,      0,        2,     0,     0},   //  489
  {         5,       0,      0,       -2,     0,     0},   //  490
  {        -8,       0,      0,        3,     0,     0},   //  491
  {         9,       0,      0,        0,     0,     0},   //  492
  {         6,       0,      0,       -3,     0,     0},   //  493
  {        -5,       0,      0,        2,     0,     0},   //  494
  {         3,       0,      0,        0,     0,     0},   //  495
  {        -7,       0,      0,        0,     0,     0},   //  496
  {        -3,       0,      0,        1,     0,     0},   //  497
  {         5,       0,      0,        0,     0,     0},   //  498
  {         3,       0,      0,        0,     0,     0},   //  499
  {        -3,       0,      0,        2,     0,     0},   //  500
  {         4,       0,      0,       -2,     0,     0},   //  501
  {         3,       0,      0,       -1,     0,     0},   //  502
  {        -5,       0,      0,        2,     0,     0},   //  503
  {         4,       0,      0,       -2,     0,     0},   //  504
  {         9,       0,      0,       -3,     0,     0},   //  505
  {         4,       0,      0,        0,     0,     0},   //  506
  {         4,       0,      0,       -2,     0,     0},   //  507
  {        -3,       0,      0,        2,     0,     0},   //  508
  {        -4,       0,      0,        2,     0,     0},   //  509
  {         9,       0,      0,       -3,     0,     0},   //  510
  {        -4,       0,      0,        0,     0,     0},   //  511
  {        -4,       0,      0,        0,     0,     0},   //  512
  {         3,       0,      0,       -2,     0,     0},   //  513
  {         8,       0,      0,        0,     0,     0},   //  514
  {         3,       0,      0,        0,     0,     0},   //  515
  {        -3,       0,      0,        2,     0,     0},   //  516
  {         3,       0,      0,       -1,     0,     0},   //  517
  {         3,       0,      0,       -1,     0,     0},   //  518
  {        -3,       0,      0,        1,     0,     0},   //  519
  {         6,       0,      0,       -3,     0,     0},   //  520
  {         3,       0,      0,        0,     0,     0},   //  521
  {        -3,       0,      0,        1,     0,     0},   //  522
  {        -7,       0,      0,        0,     0,     0},   //  523
  {         9,       0,      0,        0,     0,     0},   //  524
  {        -3,       0,      0,        2,     0,     0},   //  525
  {        -3,       0,      0,        0,     0,     0},   //  526
  {        -4,       0,      0,        0,     0,     0},   //  527
  {        -5,       0,      0,        3,     0,     0},   //  528
  {       -13,       0,      0,        0,     0,     0},   //  529
  {        -7,       0,      0,        0,     0,     0},   //  530
  {        10,       0,      0,        0,     0,     0},   //  531
  {         3,       0,      0,       -1,     0,     0},   //  532
  {        10,       0,     13,        6,     0,    -5},   //  533
  {         0,       0,     30,        0,     0,    14},   //  534
  {         0,       0,   -162,        0,     0,  -138},   //  535
  {         0,       0,     75,        0,     0,     0},   //  536
  {        -7,       0,      0,        4,     0,     0},   //  537
  {        -4,       0,      0,        2,     0,     0},   //  538
  {         4,       0,      0,       -2,     0,     0},   //  539
  {         5,       0,      0,       -2,     0,     0},   //  540
  {         5,       0,      0,       -3,     0,     0},   //  541
  {        -3,       0,      0,        0,     0,     0},   //  542
  {        -3,       0,      0,        2,     0,     0},   //  543
  {        -4,       0,      0,        2,     0,     0},   //  544
  {        -5,       0,      0,        2,     0,     0},   //  545
  {         6,       0,      0,        0,     0,     0},   //  546
  {         9,       0,      0,        0,     0,     0},   //  547
  {         5,       0,      0,        0,     0,     0},   //  548
  {        -7,       0,      0,        0,     0,     0},   //  549
  {        -3,       0,      0,        1,     0,     0},   //  550
  {        -4,       0,      0,        2,     0,     0},   //  551
  {         7,       0,      0,        0,     0,     0},   //  552
  {        -4,       0,      0,        0,     0,     0},   //  553
  {         4,       0,      0,        0,     0,     0},   //  554
  {        -6,       0,     -3,        3,     0,     1},   //  555
  {         0,       0,     -3,        0,     0,    -2},   //  556
  {        11,       0,      0,        0,     0,     0},   //  557
  {         3,       0,      0,       -1,     0,     0},   //  558
  {        11,       0,      0,        0,     0,     0},   //  559
  {        -3,       0,      0,        2,     0,     0},   //  560
  {        -1,       0,      3,        3,     0,    -1},   //  561
  {         4,       0,      0,       -2,     0,     0},   //  562
  {         0,       0,    -13,        0,     0,   -11},   //  563
  {         3,       0,      6,        0,     0,     0},   //  564
  {        -7,       0,      0,        0,     0,     0},   //  565
  {         5,       0,      0,       -3,     0,     0},   //  566
  {        -3,       0,      0,        1,     0,     0},   //  567
  {         3,       0,      0,        0,     0,     0},   //  568
  {         5,       0,      0,       -3,     0,     0},   //  569
  {        -7,       0,      0,        3,     0,     0},   //  570
  {         8,       0,      0,       -3,     0,     0},   //  571
  {        -4,       0,      0,        2,     0,     0},   //  572
  {        11,       0,      0,        0,     0,     0},   //  573
  {        -3,       0,      0,        1,     0,     0},   //  574
  {         3,       0,      0,       -1,     0,     0},   //  575
  {        -4,       0,      0,        2,     0,     0},   //  576
  {         8,       0,      0,       -4,     0,     0},   //  577
  {         3,       0,      0,       -1,     0,     0},   //  578
  {        11,       0,      0,        0,     0,     0},   //  579
  {        -6,       0,      0,        3,     0,     0},   //  580
  {        -4,       0,      0,        2,     0,     0},   //  581
  {        -8,       0,      0,        4,     0,     0},   //  582
  {        -7,       0,      0,        3,     0,     0},   //  583
  {        -4,       0,      0,        2,     0,     0},   //  584
  {         3,       0,      0,       -1,     0,     0},   //  585
  {         6,       0,      0,       -3,     0,     0},   //  586
  {        -6,       0,      0,        3,     0,     0},   //  587
  {         6,       0,      0,        0,     0,     0},   //  588
  {         6,       0,      0,       -1,     0,     0},   //  589
  {         5,       0,      0,       -2,     0,     0},   //  590
  {        -5,       0,      0,        2,     0,     0},   //  591
  {        -4,       0,      0,        0,     0,     0},   //  592
  {        -4,       0,      0,        2,     0,     0},   //  593
  {         4,       0,      0,        0,     0,     0},   //  594
  {         6,       0,      0,       -3,     0,     0},   //  595
  {        -4,       0,      0,        2,     0,     0},   //  596
  {         0,       0,    -26,        0,     0,   -11},   //  597
  {         0,       0,    -10,        0,     0,    -5},   //  598
  {         5,       0,      0,       -3,     0,     0},   //  599
  {       -13,       0,      0,        0,     0,     0},   //  600
  {         3,       0,      0,       -2,     0,     0},   //  601
  {         4,       0,      0,       -2,     0,     0},   //  602
  {         7,       0,      0,       -3,     0,     0},   //  603
  {         4,       0,      0,        0,     0,     0},   //  604
  {         5,       0,      0,        0,     0,     0},   //  605
  {        -3,       0,      0,        2,     0,     0},   //  606
  {        -6,       0,      0,        2,     0,     0},   //  607
  {        -5,       0,      0,        2,     0,     0},   //  608
  {        -7,       0,      0,        3,     0,     0},   //  609
  {         5,       0,      0,       -2,     0,     0},   //  610
  {        13,       0,      0,        0,     0,     0},   //  611
  {        -4,       0,      0,        2,     0,     0},   //  612
  {        -3,       0,      0,        0,     0,     0},   //  613
  {         5,       0,      0,       -2,     0,     0},   //  614
  {       -11,       0,      0,        0,     0,     0},   //  615
  {         5,       0,      0,       -2,     0,     0},   //  616
  {         4,       0,      0,        0,     0,     0},   //  617
  {         4,       0,      0,       -2,     0,     0},   //  618
  {        -4,       0,      0,        2,     0,     0},   //  619
  {         6,       0,      0,       -3,     0,     0},   //  620
  {         3,       0,      0,       -2,     0,     0},   //  621
  {       -12,       0,      0,        0,     0,     0},   //  622
  {         4,       0,      0,        0,     0,     0},   //  623
  {        -3,       0,      0,        0,     0,     0},   //  624
  {        -4,       0,      0,        0,     0,     0},   //  625
  {         3,       0,      0,        0,     0,     0},   //  626
  {         3,       0,      0,       -1,     0,     0},   //  627
  {        -3,       0,      0,        1,     0,     0},   //  628
  {         0,       0,     -5,        0,     0,    -2},   //  629
  {        -7,       0,      0,        4,     0,     0},   //  630
  {         6,       0,      0,       -3,     0,     0},   //  631
  {        -3,       0,      0,        0,     0,     0},   //  632
  {         5,       0,      0,       -3,     0,     0},   //  633
  {         3,       0,      0,       -1,     0,     0},   //  634
  {         3,       0,      0,        0,     0,     0},   //  635
  {        -3,       0,      0,        1,     0,     0},   //  636
  {        -5,       0,      0,        3,     0,     0},   //  637
  {        -3,       0,      0,        2,     0,     0},   //  638
  {        -3,       0,      0,        2,     0,     0},   //  639
  {        12,       0,      0,        0,     0,     0},   //  640
  {         3,       0,      0,       -1,     0,     0},   //  641
  {        -4,       0,      0,        2,     0,     0},   //  642
  {         4,       0,      0,        0,     0,     0},   //  643
  {         6,       0,      0,        0,     0,     0},   //  644
  {         5,       0,      0,       -3,     0,     0},   //  645
  {         4,       0,      0,       -2,     0,     0},   //  646
  {        -6,       0,      0,        3,     0,     0},   //  647
  {         4,       0,      0,       -2,     0,     0},   //  648
  {         6,       0,      0,       -3,     0,     0},   //  649
  {         6,       0,      0,        0,     0,     0},   //  650
  {        -6,       0,      0,        3,     0,     0},   //  651
  {         3,       0,      0,       -2,     0,     0},   //  652
  {         7,       0,      0,       -4,     0,     0},   //  653
  {         4,       0,      0,       -2,     0,     0},   //  654
  {        -5,       0,      0,        2,     0,     0},   //  655
  {         5,       0,      0,        0,     0,     0},   //  656
  {        -6,       0,      0,        3,     0,     0},   //  657
  {        -6,       0,      0,        3,     0,     0},   //  658
  {        -4,       0,      0,        2,     0,     0},   //  659
  {        10,       0,      0,        0,     0,     0},   //  660
  {        -4,       0,      0,        2,     0,     0},   //  661
  {         7,       0,      0,        0,     0,     0},   //  662
  {         7,       0,      0,       -3,     0,     0},   //  663
  {         4,       0,      0,        0,     0,     0},   //  664
  {        11,       0,      0,        0,     0,     0},   //  665
  {         5,       0,      0,       -2,     0,     0},   //  666
  {        -6,       0,      0,        2,     0,     0},   //  667
  {         4,       0,      0,       -2,     0,     0},   //  668
  {         3,       0,      0,       -2,     0,     0},   //  669
  {         5,       0,      0,       -2,     0,     0},   //  670
  {        -4,       0,      0,        2,     0,     0},   //  671
  {        -4,       0,      0,        2,     0,     0},   //  672
  {        -3,       0,      0,        2,     0,     0},   //  673
  {         4,       0,      0,       -2,     0,     0},   //  674
  {         3,       0,      0,       -1,     0,     0},   //  675
  {        -3,       0,      0,        1,     0,     0},   //  676
  {        -3,       0,      0,        1,     0,     0},   //  677
  {        -3,       0,      0,        2,     0,     0}    //  678
  };
  calcMulSC2000(needInit, checkT, T, argArray, 678, polyArray, &MULSC[0]);
  DebugAssert(which < 678, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulPlanSC2000A(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[687];
  // Luni-Solar nutation coefficients, unit 1e-7 arcsec
  static const Short MULSC[687][4] = {
  //        Longitude               Obliquity
  //    sin          cos         sin         cos
     {  1440,          0,          0,          0},   //    1
     {    56,       -117,        -42,        -40},   //    2
     {   125,        -43,          0,        -54},   //    3
     {     0,          5,          0,          0},   //    4
     {     3,         -7,         -3,          0},   //    5
     {     3,          0,          0,         -2},   //    6
     {  -114,          0,          0,         61},   //    7
     {  -219,         89,          0,          0},   //    8
     {    -3,          0,          0,          0},   //    9
     {  -462,       1604,          0,          0},   //   10
     {    99,          0,          0,        -53},   //   11
     {    -3,          0,          0,          2},   //   12
     {     0,          6,          2,          0},   //   13
     {     3,          0,          0,          0},   //   14
     {   -12,          0,          0,          0},   //   15
     {    14,       -218,        117,          8},   //   16
     {    31,       -481,       -257,        -17},   //   17
     {  -491,        128,          0,          0},   //   18
     { -3084,       5123,       2735,       1647},   //   19
     { -1444,       2409,      -1286,       -771},   //   20
     {    11,        -24,        -11,         -9},   //   21
     {    26,         -9,          0,          0},   //   22
     {   103,        -60,          0,          0},   //   23
     {     0,        -13,         -7,          0},   //   24
     {   -26,        -29,        -16,         14},   //   25
     {     9,        -27,        -14,         -5},   //   26
     {    12,          0,          0,         -6},   //   27
     {    -7,          0,          0,          0},   //   28
     {     0,         24,          0,          0},   //   29
     {   284,          0,          0,       -151},   //   30
     {   226,        101,          0,          0},   //   31
     {     0,         -8,         -2,          0},   //   32
     {     0,         -6,         -3,          0},   //   33
     {     5,          0,          0,         -3},   //   34
     {   -41,        175,         76,         17},   //   35
     {     0,         15,          6,          0},   //   36
     {   425,        212,       -133,        269},   //   37
     {  1200,        598,        319,       -641},   //   38
     {   235,        334,          0,          0},   //   39
     {    11,        -12,         -7,         -6},   //   40
     {     5,         -6,          3,          3},   //   41
     {    -5,          0,          0,          3},   //   42
     {     6,          0,          0,         -3},   //   43
     {    15,          0,          0,          0},   //   44
     {    13,          0,          0,         -7},   //   45
     {    -6,         -9,          0,          0},   //   46
     {   266,        -78,          0,          0},   //   47
     {  -460,       -435,       -232,        246},   //   48
     {     0,         15,          7,          0},   //   49
     {    -3,          0,          0,          2},   //   50
     {     0,        131,          0,          0},   //   51
     {     4,          0,          0,          0},   //   52
     {     0,          3,          0,          0},   //   53
     {     0,          4,          2,          0},   //   54
     {     0,          3,          0,          0},   //   55
     {   -17,        -19,        -10,          9},   //   56
     {    -9,        -11,          6,         -5},   //   57
     {    -6,          0,          0,          3},   //   58
     {   -16,          8,          0,          0},   //   59
     {     0,          3,          0,          0},   //   60
     {    11,         24,         11,         -5},   //   61
     {    -3,         -4,         -2,          1},   //   62
     {     3,          0,          0,         -1},   //   63
     {     0,         -8,         -4,          0},   //   64
     {     0,          3,          0,          0},   //   65
     {     0,          5,          0,          0},   //   66
     {     0,          3,          2,          0},   //   67
     {    -6,          4,          2,          3},   //   68
     {    -3,         -5,          0,          0},   //   69
     {    -5,          0,          0,          2},   //   70
     {     4,         24,         13,         -2},   //   71
     {   -42,         20,          0,          0},   //   72
     {   -10,        233,          0,          0},   //   73
     {    -3,          0,          0,          1},   //   74
     {    78,        -18,          0,          0},   //   75
     {     0,          3,          1,          0},   //   76
     {     0,         -3,         -1,          0},   //   77
     {     0,         -4,         -2,          1},   //   78
     {     0,         -8,         -4,         -1},   //   79
     {     0,         -5,          3,          0},   //   80
     {    -7,          0,          0,          3},   //   81
     {   -14,          8,          3,          6},   //   82
     {     0,          8,         -4,          0},   //   83
     {     0,         19,         10,          0},   //   84
     {    45,        -22,          0,          0},   //   85
     {    -3,          0,          0,          0},   //   86
     {     0,         -3,          0,          0},   //   87
     {     0,          3,          0,          0},   //   88
     {     3,          5,          3,         -2},   //   89
     {    89,        -16,         -9,        -48},   //   90
     {     0,          3,          0,          0},   //   91
     {    -3,          7,          4,          2},   //   92
     {  -349,        -62,          0,          0},   //   93
     {   -15,         22,          0,          0},   //   94
     {    -3,          0,          0,          0},   //   95
     {   -53,          0,          0,          0},   //   96
     {     5,          0,          0,         -3},   //   97
     {     0,         -8,          0,          0},   //   98
     {    15,         -7,         -4,         -8},   //   99
     {    -3,          0,          0,          1},   //  100
     {   -21,        -78,          0,          0},   //  101
     {    20,        -70,        -37,        -11},   //  102
     {     0,          6,          3,          0},   //  103
     {     5,          3,          2,         -2},   //  104
     {   -17,         -4,         -2,          9},   //  105
     {     0,          6,          3,          0},   //  106
     {    32,         15,         -8,         17},   //  107
     {   174,         84,         45,        -93},   //  108
     {    11,         56,          0,          0},   //  109
     {   -66,        -12,         -6,         35},   //  110
     {    47,          8,          4,        -25},   //  111
     {     0,          8,          4,          0},   //  112
     {    10,        -22,        -12,         -5},   //  113
     {    -3,          0,          0,          2},   //  114
     {   -24,         12,          0,          0},   //  115
     {     5,         -6,          0,          0},   //  116
     {     3,          0,          0,         -2},   //  117
     {     4,          3,          1,         -2},   //  118
     {     0,         29,         15,          0},   //  119
     {    -5,         -4,         -2,          2},   //  120
     {     8,         -3,         -1,         -5},   //  121
     {     0,         -3,          0,          0},   //  122
     {    10,          0,          0,          0},   //  123
     {     3,          0,          0,         -2},   //  124
     {    -5,          0,          0,          3},   //  125
     {    46,         66,         35,        -25},   //  126
     {   -14,          7,          0,          0},   //  127
     {     0,          3,          2,          0},   //  128
     {    -5,          0,          0,          0},   //  129
     {   -68,        -34,        -18,         36},   //  130
     {     0,         14,          7,          0},   //  131
     {    10,         -6,         -3,         -5},   //  132
     {    -5,         -4,         -2,          3},   //  133
     {    -3,          5,          2,          1},   //  134
     {    76,         17,          9,        -41},   //  135
     {    84,        298,        159,        -45},   //  136
     {     3,          0,          0,         -1},   //  137
     {    -3,          0,          0,          2},   //  138
     {    -3,          0,          0,          1},   //  139
     {   -82,        292,        156,         44},   //  140
     {   -73,         17,          9,         39},   //  141
     {    -9,        -16,          0,          0},   //  142
     {     3,          0,         -1,         -2},   //  143
     {    -3,          0,          0,          0},   //  144
     {    -9,         -5,         -3,          5},   //  145
     {  -439,          0,          0,          0},   //  146
     {    57,        -28,        -15,        -30},   //  147
     {     0,         -6,         -3,          0},   //  148
     {    -4,          0,          0,          2},   //  149
     {   -40,         57,         30,         21},   //  150
     {    23,          7,          3,        -13},   //  151
     {   273,         80,         43,       -146},   //  152
     {  -449,        430,          0,          0},   //  153
     {    -8,        -47,        -25,          4},   //  154
     {     6,         47,         25,         -3},   //  155
     {     0,         23,         13,          0},   //  156
     {    -3,          0,          0,          2},   //  157
     {     3,         -4,         -2,         -2},   //  158
     {   -48,       -110,        -59,         26},   //  159
     {    51,        114,         61,        -27},   //  160
     {  -133,          0,          0,         57},   //  161
     {     0,          4,          0,          0},   //  162
     {   -21,         -6,         -3,         11},   //  163
     {     0,         -3,         -1,          0},   //  164
     {   -11,        -21,        -11,          6},   //  165
     {   -18,       -436,       -233,          9},   //  166
     {    35,         -7,          0,          0},   //  167
     {     0,          5,          3,          0},   //  168
     {    11,         -3,         -1,         -6},   //  169
     {    -5,         -3,         -1,          3},   //  170
     {   -53,         -9,         -5,         28},   //  171
     {     0,          3,          2,          1},   //  172
     {     4,          0,          0,         -2},   //  173
     {     0,         -4,          0,          0},   //  174
     {   -50,        194,        103,         27},   //  175
     {   -13,         52,         28,          7},   //  176
     {   -91,        248,          0,          0},   //  177
     {     6,         49,         26,         -3},   //  178
     {    -6,        -47,        -25,          3},   //  179
     {     0,          5,          3,          0},   //  180
     {    52,         23,         10,        -23},   //  181
     {    -3,          0,          0,          1},   //  182
     {     0,          5,          3,          0},   //  183
     {    -4,          0,          0,          0},   //  184
     {    -4,          8,          3,          2},   //  185
     {    10,          0,          0,          0},   //  186
     {     3,          0,          0,         -2},   //  187
     {     0,          8,          4,          0},   //  188
     {     0,          8,          4,          1},   //  189
     {    -4,          0,          0,          0},   //  190
     {    -4,          0,          0,          0},   //  191
     {    -8,          4,          2,          4},   //  192
     {     8,         -4,         -2,         -4},   //  193
     {     0,         15,          7,          0},   //  194
     {  -138,          0,          0,          0},   //  195
     {     0,         -7,         -3,          0},   //  196
     {     0,         -7,         -3,          0},   //  197
     {    54,          0,          0,        -29},   //  198
     {     0,         10,          4,          0},   //  199
     {    -7,          0,          0,          3},   //  200
     {   -37,         35,         19,         20},   //  201
     {     0,          4,          0,          0},   //  202
     {    -4,          9,          0,          0},   //  203
     {     8,          0,          0,         -4},   //  204
     {    -9,        -14,         -8,          5},   //  205
     {    -3,         -9,         -5,          3},   //  206
     {  -145,         47,          0,          0},   //  207
     {   -10,         40,         21,          5},   //  208
     {    11,        -49,        -26,         -7},   //  209
     { -2150,          0,          0,        932},   //  210
     {   -12,          0,          0,          5},   //  211
     {    85,          0,          0,        -37},   //  212
     {     4,          0,          0,         -2},   //  213
     {     3,          0,          0,         -2},   //  214
     {   -86,        153,          0,          0},   //  215
     {    -6,          9,          5,          3},   //  216
     {     9,        -13,         -7,         -5},   //  217
     {    -8,         12,          6,          4},   //  218
     {   -51,          0,          0,         22},   //  219
     {   -11,       -268,       -116,          5},   //  220
     {     0,         12,          5,          0},   //  221
     {     0,          7,          3,          0},   //  222
     {    31,          6,          3,        -17},   //  223
     {   140,         27,         14,        -75},   //  224
     {    57,         11,          6,        -30},   //  225
     {   -14,        -39,          0,          0},   //  226
     {     0,         -6,         -2,          0},   //  227
     {     4,         15,          8,         -2},   //  228
     {     0,          4,          0,          0},   //  229
     {    -3,          0,          0,          1},   //  230
     {     0,         11,          5,          0},   //  231
     {     9,          6,          0,          0},   //  232
     {    -4,         10,          4,          2},   //  233
     {     5,          3,          0,          0},   //  234
     {    16,          0,          0,         -9},   //  235
     {    -3,          0,          0,          0},   //  236
     {     0,          3,          2,         -1},   //  237
     {     7,          0,          0,         -3},   //  238
     {   -25,         22,          0,          0},   //  239
     {    42,        223,        119,        -22},   //  240
     {   -27,       -143,        -77,         14},   //  241
     {     9,         49,         26,         -5},   //  242
     { -1166,          0,          0,        505},   //  243
     {    -5,          0,          0,          2},   //  244
     {    -6,          0,          0,          3},   //  245
     {    -8,          0,          1,          4},   //  246
     {     0,         -4,          0,          0},   //  247
     {   117,          0,          0,        -63},   //  248
     {    -4,          8,          4,          2},   //  249
     {     3,          0,          0,         -2},   //  250
     {    -5,          0,          0,          2},   //  251
     {     0,         31,          0,          0},   //  252
     {    -5,          0,          1,          3},   //  253
     {     4,          0,          0,         -2},   //  254
     {    -4,          0,          0,          2},   //  255
     {   -24,        -13,         -6,         10},   //  256
     {     3,          0,          0,          0},   //  257
     {     0,        -32,        -17,          0},   //  258
     {     8,         12,          5,         -3},   //  259
     {     3,          0,          0,         -1},   //  260
     {     7,         13,          0,          0},   //  261
     {    -3,         16,          0,          0},   //  262
     {    50,          0,          0,        -27},   //  263
     {     0,         -5,         -3,          0},   //  264
     {    13,          0,          0,          0},   //  265
     {     0,          5,          3,          1},   //  266
     {    24,          5,          2,        -11},   //  267
     {     5,        -11,         -5,         -2},   //  268
     {    30,         -3,         -2,        -16},   //  269
     {    18,          0,          0,         -9},   //  270
     {     8,        614,          0,          0},   //  271
     {     3,         -3,         -1,         -2},   //  272
     {     6,         17,          9,         -3},   //  273
     {    -3,         -9,         -5,          2},   //  274
     {     0,          6,          3,         -1},   //  275
     {  -127,         21,          9,         55},   //  276
     {     3,          5,          0,          0},   //  277
     {    -6,        -10,         -4,          3},   //  278
     {     5,          0,          0,          0},   //  279
     {    16,          9,          4,         -7},   //  280
     {     3,          0,          0,         -2},   //  281
     {     0,         22,          0,          0},   //  282
     {     0,         19,         10,          0},   //  283
     {     7,          0,          0,         -4},   //  284
     {     0,         -5,         -2,          0},   //  285
     {     0,          3,          1,          0},   //  286
     {    -9,          3,          1,          4},   //  287
     {    17,          0,          0,         -7},   //  288
     {     0,         -3,         -2,         -1},   //  289
     {   -20,         34,          0,          0},   //  290
     {   -10,          0,          1,          5},   //  291
     {    -4,          0,          0,          2},   //  292
     {    22,        -87,          0,          0},   //  293
     {    -4,          0,          0,          2},   //  294
     {    -3,         -6,         -2,          1},   //  295
     {   -16,         -3,         -1,          7},   //  296
     {     0,         -3,         -2,          0},   //  297
     {     4,          0,          0,          0},   //  298
     {   -68,         39,          0,          0},   //  299
     {    27,          0,          0,        -14},   //  300
     {     0,         -4,          0,          0},   //  301
     {   -25,          0,          0,          0},   //  302
     {   -12,         -3,         -2,          6},   //  303
     {     3,          0,          0,         -1},   //  304
     {     3,         66,         29,         -1},   //  305
     {   490,          0,          0,       -213},   //  306
     {   -22,         93,         49,         12},   //  307
     {    -7,         28,         15,          4},   //  308
     {    -3,         13,          7,          2},   //  309
     {   -46,         14,          0,          0},   //  310
     {    -5,          0,          0,          0},   //  311
     {     2,          1,          0,          0},   //  312
     {     0,         -3,          0,          0},   //  313
     {   -28,          0,          0,         15},   //  314
     {     5,          0,          0,         -2},   //  315
     {     0,          3,          0,          0},   //  316
     {   -11,          0,          0,          5},   //  317
     {     0,          3,          1,          0},   //  318
     {    -3,          0,          0,          1},   //  319
     {    25,        106,         57,        -13},   //  320
     {     5,         21,         11,         -3},   //  321
     {  1485,          0,          0,          0},   //  322
     {    -7,        -32,        -17,          4},   //  323
     {     0,          5,          3,          0},   //  324
     {    -6,         -3,         -2,          3},   //  325
     {    30,         -6,         -2,        -13},   //  326
     {    -4,          4,          0,          0},   //  327
     {   -19,          0,          0,         10},   //  328
     {     0,          4,          2,         -1},   //  329
     {     0,          3,          0,          0},   //  330
     {     4,          0,          0,         -2},   //  331
     {     0,         -3,         -1,          0},   //  332
     {    -3,          0,          0,          0},   //  333
     {     5,          3,          1,         -2},   //  334
     {     0,         11,          0,          0},   //  335
     {   118,          0,          0,        -52},   //  336
     {     0,         -5,         -3,          0},   //  337
     {   -28,         36,          0,          0},   //  338
     {     5,         -5,          0,          0},   //  339
     {    14,        -59,        -31,         -8},   //  340
     {     0,          9,          5,          1},   //  341
     {  -458,          0,          0,        198},   //  342
     {     0,        -45,        -20,          0},   //  343
     {     9,          0,          0,         -5},   //  344
     {     0,         -3,          0,          0},   //  345
     {     0,         -4,         -2,         -1},   //  346
     {    11,          0,          0,         -6},   //  347
     {     6,          0,          0,         -2},   //  348
     {   -16,         23,          0,          0},   //  349
     {     0,         -4,         -2,          0},   //  350
     {    -5,          0,          0,          2},   //  351
     {  -166,        269,          0,          0},   //  352
     {    15,          0,          0,         -8},   //  353
     {    10,          0,          0,         -4},   //  354
     {   -78,         45,          0,          0},   //  355
     {     0,         -5,         -2,          0},   //  356
     {     7,          0,          0,         -4},   //  357
     {    -5,        328,          0,          0},   //  358
     {     3,          0,          0,         -2},   //  359
     {     5,          0,          0,         -2},   //  360
     {     0,          3,          1,          0},   //  361
     {    -3,          0,          0,          0},   //  362
     {    -3,          0,          0,          0},   //  363
     {     0,         -4,         -2,          0},   //  364
     { -1223,        -26,          0,          0},   //  365
     {     0,          7,          3,          0},   //  366
     {     3,          0,          0,          0},   //  367
     {     0,          3,          2,          0},   //  368
     {    -6,         20,          0,          0},   //  369
     {  -368,          0,          0,          0},   //  370
     {   -75,          0,          0,          0},   //  371
     {    11,          0,          0,         -6},   //  372
     {     3,          0,          0,         -2},   //  373
     {    -3,          0,          0,          1},   //  374
     {   -13,        -30,          0,          0},   //  375
     {    21,          3,          0,          0},   //  376
     {    -3,          0,          0,          1},   //  377
     {    -4,          0,          0,          2},   //  378
     {     8,        -27,          0,          0},   //  379
     {   -19,        -11,          0,          0},   //  380
     {    -4,          0,          0,          2},   //  381
     {     0,          5,          2,          0},   //  382
     {    -6,          0,          0,          2},   //  383
     {    -8,          0,          0,          0},   //  384
     {    -1,          0,          0,          0},   //  385
     {   -14,          0,          0,          6},   //  386
     {     6,          0,          0,          0},   //  387
     {   -74,          0,          0,         32},   //  388
     {     0,         -3,         -1,          0},   //  389
     {     4,          0,          0,         -2},   //  390
     {     8,         11,          0,          0},   //  391
     {     0,          3,          2,          0},   //  392
     {  -262,          0,          0,        114},   //  393
     {     0,         -4,          0,          0},   //  394
     {    -7,          0,          0,          4},   //  395
     {     0,        -27,        -12,          0},   //  396
     {   -19,         -8,         -4,          8},   //  397
     {   202,          0,          0,        -87},   //  398
     {    -8,         35,         19,          5},   //  399
     {     0,          4,          2,          0},   //  400
     {    16,         -5,          0,          0},   //  401
     {     5,          0,          0,         -3},   //  402
     {     0,         -3,          0,          0},   //  403
     {     1,          0,          0,          0},   //  404
     {   -35,        -48,        -21,         15},   //  405
     {    -3,         -5,         -2,          1},   //  406
     {     6,          0,          0,         -3},   //  407
     {     3,          0,          0,         -1},   //  408
     {     0,         -5,          0,          0},   //  409
     {    12,         55,         29,         -6},   //  410
     {     0,          5,          3,          0},   //  411
     {  -598,          0,          0,          0},   //  412
     {    -3,        -13,         -7,          1},   //  413
     {    -5,         -7,         -3,          2},   //  414
     {     3,          0,          0,         -1},   //  415
     {     5,         -7,          0,          0},   //  416
     {     4,          0,          0,         -2},   //  417
     {    16,         -6,          0,          0},   //  418
     {     8,         -3,          0,          0},   //  419
     {     8,        -31,        -16,         -4},   //  420
     {     0,          3,          1,          0},   //  421
     {   113,          0,          0,        -49},   //  422
     {     0,        -24,        -10,          0},   //  423
     {     4,          0,          0,         -2},   //  424
     {    27,          0,          0,          0},   //  425
     {    -3,          0,          0,          1},   //  426
     {     0,         -4,         -2,          0},   //  427
     {     5,          0,          0,         -2},   //  428
     {     0,         -3,          0,          0},   //  429
     {   -13,          0,          0,          6},   //  430
     {     5,          0,          0,         -2},   //  431
     {   -18,        -10,         -4,          8},   //  432
     {    -4,        -28,          0,          0},   //  433
     {    -5,          6,          3,          2},   //  434
     {    -3,          0,          0,          1},   //  435
     {    -5,         -9,         -4,          2},   //  436
     {    17,          0,          0,         -7},   //  437
     {    11,          4,          0,          0},   //  438
     {     0,         -6,         -2,          0},   //  439
     {    83,         15,          0,          0},   //  440
     {    -4,          0,          0,          2},   //  441
     {     0,       -114,        -49,          0},   //  442
     {   117,          0,          0,        -51},   //  443
     {    -5,         19,         10,          2},   //  444
     {    -3,          0,          0,          0},   //  445
     {    -3,          0,          0,          2},   //  446
     {     0,         -3,         -1,          0},   //  447
     {     3,          0,          0,          0},   //  448
     {     0,         -6,         -2,          0},   //  449
     {   393,          3,          0,          0},   //  450
     {    -4,         21,         11,          2},   //  451
     {    -6,          0,         -1,          3},   //  452
     {    -3,          8,          4,          1},   //  453
     {     8,          0,          0,          0},   //  454
     {    18,        -29,        -13,         -8},   //  455
     {     8,         34,         18,         -4},   //  456
     {    89,          0,          0,          0},   //  457
     {     3,         12,          6,         -1},   //  458
     {    54,        -15,         -7,        -24},   //  459
     {     0,          3,          0,          0},   //  460
     {     3,          0,          0,         -1},   //  461
     {     0,         35,          0,          0},   //  462
     {  -154,        -30,        -13,         67},   //  463
     {    15,          0,          0,          0},   //  464
     {     0,          4,          2,          0},   //  465
     {     0,          9,          0,          0},   //  466
     {    80,        -71,        -31,        -35},   //  467
     {     0,        -20,         -9,          0},   //  468
     {    11,          5,          2,         -5},   //  469
     {    61,        -96,        -42,        -27},   //  470
     {    14,          9,          4,         -6},   //  471
     {   -11,         -6,         -3,          5},   //  472
     {     0,         -3,         -1,          0},   //  473
     {   123,       -415,       -180,        -53},   //  474
     {     0,          0,          0,        -35},   //  475
     {    -5,          0,          0,          0},   //  476
     {     7,        -32,        -17,         -4},   //  477
     {     0,         -9,         -5,          0},   //  478
     {     0,         -4,          2,          0},   //  479
     {   -89,          0,          0,         38},   //  480
     {     0,        -86,        -19,         -6},   //  481
     {     0,          0,        -19,          6},   //  482
     {  -123,       -416,       -180,         53},   //  483
     {     0,         -3,         -1,          0},   //  484
     {    12,         -6,         -3,         -5},   //  485
     {   -13,          9,          4,          6},   //  486
     {     0,        -15,         -7,          0},   //  487
     {     3,          0,          0,         -1},   //  488
     {   -62,        -97,        -42,         27},   //  489
     {   -11,          5,          2,          5},   //  490
     {     0,        -19,         -8,          0},   //  491
     {    -3,          0,          0,          1},   //  492
     {     0,          4,          2,          0},   //  493
     {     0,          3,          0,          0},   //  494
     {     0,          4,          2,          0},   //  495
     {   -85,        -70,        -31,         37},   //  496
     {   163,        -12,         -5,        -72},   //  497
     {   -63,        -16,         -7,         28},   //  498
     {   -21,        -32,        -14,          9},   //  499
     {     0,         -3,         -1,          0},   //  500
     {     3,          0,          0,         -2},   //  501
     {     0,          8,          0,          0},   //  502
     {     3,         10,          4,         -1},   //  503
     {     3,          0,          0,         -1},   //  504
     {     0,         -7,         -3,          0},   //  505
     {     0,         -4,         -2,          0},   //  506
     {     6,         19,          0,          0},   //  507
     {     5,       -173,        -75,         -2},   //  508
     {     0,         -7,         -3,          0},   //  509
     {     7,        -12,         -5,         -3},   //  510
     {    -3,          0,          0,          2},   //  511
     {     3,         -4,         -2,         -1},   //  512
     {    74,          0,          0,        -32},   //  513
     {    -3,         12,          6,          2},   //  514
     {    26,        -14,         -6,        -11},   //  515
     {    19,          0,          0,         -8},   //  516
     {     6,         24,         13,         -3},   //  517
     {    83,          0,          0,          0},   //  518
     {     0,        -10,         -5,          0},   //  519
     {    11,         -3,         -1,         -5},   //  520
     {     3,          0,          1,         -1},   //  521
     {     3,          0,          0,         -1},   //  522
     {    -4,          0,          0,          0},   //  523
     {     5,        -23,        -12,         -3},   //  524
     {  -339,          0,          0,        147},   //  525
     {     0,        -10,         -5,          0},   //  526
     {     5,          0,          0,          0},   //  527
     {     3,          0,          0,         -1},   //  528
     {     0,         -4,         -2,          0},   //  529
     {    18,         -3,          0,          0},   //  530
     {     9,        -11,         -5,         -4},   //  531
     {    -8,          0,          0,          4},   //  532
     {     3,          0,          0,         -1},   //  533
     {     0,          9,          0,          0},   //  534
     {     6,         -9,         -4,         -2},   //  535
     {    -4,        -12,          0,          0},   //  536
     {    67,        -91,        -39,        -29},   //  537
     {    30,        -18,         -8,        -13},   //  538
     {     0,          0,          0,          0},   //  539
     {     0,       -114,        -50,          0},   //  540
     {     0,          0,          0,         23},   //  541
     {   517,         16,          7,       -224},   //  542
     {     0,         -7,         -3,          0},   //  543
     {   143,         -3,         -1,        -62},   //  544
     {    29,          0,          0,        -13},   //  545
     {    -4,          0,          0,          2},   //  546
     {    -6,          0,          0,          3},   //  547
     {     5,         12,          5,         -2},   //  548
     {   -25,          0,          0,         11},   //  549
     {    -3,          0,          0,          1},   //  550
     {     0,          4,          2,          0},   //  551
     {   -22,         12,          5,         10},   //  552
     {    50,          0,          0,        -22},   //  553
     {     0,          7,          4,          0},   //  554
     {     0,          3,          1,          0},   //  555
     {    -4,          4,          2,          2},   //  556
     {    -5,        -11,         -5,          2},   //  557
     {     0,          4,          2,          0},   //  558
     {     4,         17,          9,         -2},   //  559
     {    59,          0,          0,          0},   //  560
     {     0,         -4,         -2,          0},   //  561
     {    -8,          0,          0,          4},   //  562
     {    -3,          0,          0,          0},   //  563
     {     4,        -15,         -8,         -2},   //  564
     {   370,         -8,          0,       -160},   //  565
     {     0,          0,         -3,          0},   //  566
     {     0,          3,          1,          0},   //  567
     {    -6,          3,          1,          3},   //  568
     {     0,          6,          0,          0},   //  569
     {   -10,          0,          0,          4},   //  570
     {     0,          9,          4,          0},   //  571
     {     4,         17,          7,         -2},   //  572
     {    34,          0,          0,        -15},   //  573
     {     0,          5,          3,          0},   //  574
     {    -5,          0,          0,          2},   //  575
     {   -37,         -7,         -3,         16},   //  576
     {     3,         13,          7,         -2},   //  577
     {    40,          0,          0,          0},   //  578
     {     0,         -3,         -2,          0},   //  579
     {  -184,         -3,         -1,         80},   //  580
     {    -3,          0,          0,          1},   //  581
     {    -3,          0,          0,          0},   //  582
     {     0,        -10,         -6,         -1},   //  583
     {    31,         -6,          0,        -13},   //  584
     {    -3,        -32,        -14,          1},   //  585
     {    -7,          0,          0,          3},   //  586
     {     0,         -8,         -4,          0},   //  587
     {     3,         -4,          0,          0},   //  588
     {     0,          4,          0,          0},   //  589
     {     0,          3,          1,          0},   //  590
     {    19,        -23,        -10,          2},   //  591
     {     0,          0,          0,        -10},   //  592
     {     0,          3,          2,          0},   //  593
     {     0,          9,          5,         -1},   //  594
     {    28,          0,          0,          0},   //  595
     {     0,         -7,         -4,          0},   //  596
     {     8,         -4,          0,         -4},   //  597
     {     0,          0,         -2,          0},   //  598
     {     0,          3,          0,          0},   //  599
     {    -3,          0,          0,          1},   //  600
     {    -9,          0,          1,          4},   //  601
     {     3,         12,          5,         -1},   //  602
     {    17,         -3,         -1,          0},   //  603
     {     0,          7,          4,          0},   //  604
     {    19,          0,          0,          0},   //  605
     {     0,         -5,         -3,          0},   //  606
     {    14,         -3,          0,         -1},   //  607
     {     0,          0,         -1,          0},   //  608
     {     0,          0,          0,         -5},   //  609
     {     0,          5,          3,          0},   //  610
     {    13,          0,          0,          0},   //  611
     {     0,         -3,         -2,          0},   //  612
     {     2,          9,          4,          3},   //  613
     {     0,          0,          0,         -4},   //  614
     {     8,          0,          0,          0},   //  615
     {     0,          4,          2,          0},   //  616
     {     6,          0,          0,         -3},   //  617
     {     6,          0,          0,          0},   //  618
     {     0,          3,          1,          0},   //  619
     {     5,          0,          0,         -2},   //  620
     {     3,          0,          0,         -1},   //  621
     {    -3,          0,          0,          0},   //  622
     {     6,          0,          0,          0},   //  623
     {     7,          0,          0,          0},   //  624
     {    -4,          0,          0,          0},   //  625
     {     4,          0,          0,          0},   //  626
     {     6,          0,          0,          0},   //  627
     {     0,         -4,          0,          0},   //  628
     {     0,         -4,          0,          0},   //  629
     {     5,          0,          0,          0},   //  630
     {    -3,          0,          0,          0},   //  631
     {     4,          0,          0,          0},   //  632
     {    -5,          0,          0,          0},   //  633
     {     4,          0,          0,          0},   //  634
     {     0,          3,          0,          0},   //  635
     {    13,          0,          0,          0},   //  636
     {    21,         11,          0,          0},   //  637
     {     0,         -5,          0,          0},   //  638
     {     0,         -5,         -2,          0},   //  639
     {     0,          5,          3,          0},   //  640
     {     0,         -5,          0,          0},   //  641
     {    -3,          0,          0,          2},   //  642
     {    20,         10,          0,          0},   //  643
     {   -34,          0,          0,          0},   //  644
     {   -19,          0,          0,          0},   //  645
     {     3,          0,          0,         -2},   //  646
     {    -3,          0,          0,          1},   //  647
     {    -6,          0,          0,          3},   //  648
     {    -4,          0,          0,          0},   //  649
     {     3,          0,          0,          0},   //  650
     {     3,          0,          0,          0},   //  651
     {     4,          0,          0,          0},   //  652
     {     3,          0,          0,         -1},   //  653
     {     6,          0,          0,         -3},   //  654
     {    -8,          0,          0,          3},   //  655
     {     0,          3,          1,          0},   //  656
     {    -3,          0,          0,          0},   //  657
     {     0,         -3,         -2,          0},   //  658
     {   126,        -63,        -27,        -55},   //  659
     {    -5,          0,          1,          2},   //  660
     {    -3,         28,         15,          2},   //  661
     {     5,          0,          1,         -2},   //  662
     {     0,          9,          4,          1},   //  663
     {     0,          9,          4,         -1},   //  664
     {  -126,        -63,        -27,         55},   //  665
     {     3,          0,          0,         -1},   //  666
     {    21,        -11,         -6,        -11},   //  667
     {     0,         -4,          0,          0},   //  668
     {   -21,        -11,         -6,         11},   //  669
     {    -3,          0,          0,          1},   //  670
     {     0,          3,          1,          0},   //  671
     {     8,          0,          0,         -4},   //  672
     {    -6,          0,          0,          3},   //  673
     {    -3,          0,          0,          1},   //  674
     {     3,          0,          0,         -1},   //  675
     {    -3,          0,          0,          1},   //  676
     {    -5,          0,          0,          2},   //  677
     {    24,        -12,         -5,        -11},   //  678
     {     0,          3,          1,          0},   //  679
     {     0,          3,          1,          0},   //  680
     {     0,          3,          2,          0},   //  681
     {   -24,        -12,         -5,         10},   //  682
     {     4,          0,         -1,         -2},   //  683
     {    13,          0,          0,         -6},   //  684
     {     7,          0,          0,         -3},   //  685
     {     3,          0,          0,         -1},   //  686
     {     3,          0,          0,         -1}    //  687
  };
  calcMulSCPlan(needInit, argArray, 687, &MULSC[0]);
  DebugAssert(which < 687, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulSCEqEqCT2000(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[34];
  // Equation of Equinox complementary terms
  static const Double MULSC[34][2] = {
  //        sin                 cos
     {  +2640.96e-6,          -0.39e-6 },     //  1
     {    +63.52e-6,          -0.02e-6 },     //  2
     {    +11.75e-6,          +0.01e-6 },     //  3
     {    +11.21e-6,          +0.01e-6 },     //  4
     {     -4.55e-6,          +0.00e-6 },     //  5
     {     +2.02e-6,          +0.00e-6 },     //  6
     {     +1.98e-6,          +0.00e-6 },     //  7
     {     -1.72e-6,          +0.00e-6 },     //  8
     {     -1.41e-6,          -0.01e-6 },     //  9
     {     -1.26e-6,          -0.01e-6 },     // 10
     {     -0.63e-6,          +0.00e-6 },     // 11
     {     -0.63e-6,          +0.00e-6 },     // 12
     {     +0.46e-6,          +0.00e-6 },     // 13
     {     +0.45e-6,          +0.00e-6 },     // 14
     {     +0.36e-6,          +0.00e-6 },     // 15
     {     -0.24e-6,          -0.12e-6 },     // 16
     {     +0.32e-6,          +0.00e-6 },     // 17
     {     +0.28e-6,          +0.00e-6 },     // 18
     {     +0.27e-6,          +0.00e-6 },     // 19
     {     +0.26e-6,          +0.00e-6 },     // 20
     {     -0.21e-6,          +0.00e-6 },     // 21
     {     +0.19e-6,          +0.00e-6 },     // 22
     {     +0.18e-6,          +0.00e-6 },     // 23
     {     -0.10e-6,          +0.05e-6 },     // 24
     {     +0.15e-6,          +0.00e-6 },     // 25
     {     -0.14e-6,          +0.00e-6 },     // 26
     {     +0.14e-6,          +0.00e-6 },     // 27
     {     -0.14e-6,          +0.00e-6 },     // 28
     {     +0.14e-6,          +0.00e-6 },     // 29
     {     +0.13e-6,          +0.00e-6 },     // 30
     {     -0.11e-6,          +0.00e-6 },     // 31
     {     +0.11e-6,          +0.00e-6 },     // 32
     {     +0.11e-6,          +0.00e-6 },     // 33
     {     -0.87e-6,          +0.00e-6 }      // T^1 term
  };
  calcMulSCPlan(needInit, argArray, 34, &MULSC[0]);
  DebugAssert(which < 34, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulSC1950(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[69];
  static Polynomial<Double> polyArray[26];
  static const Long MULTD[13][5] = {
    {0  ,-172327 ,-1737 ,92100 ,91},
    {1  ,2088    ,2     ,-904  ,4},
    {7  ,-12729  ,-13   ,5522  ,-29},
    {8  ,1261    ,-31   ,0     ,0},
    {9  ,-497    ,12    ,216   ,-6},
    {10 ,214     ,-5    ,-93   ,3},
    {11 ,124     ,1     ,-66   ,0},
    {14 ,16      ,-1    ,0     ,0},
    {16 ,-15     ,1     ,7     ,0},
    {23 ,-2037   ,-2    ,884   ,-5},
    {24 ,675     ,1     ,0     ,0},
    {25 ,-342    ,-4    ,183   ,0},
    {26 ,-261    ,0     ,113   ,-1}
  };
  static const Short MULSC[69][2] = {
    {0	,0	},
    {0	,0	},
    {45	,-24	},
    {10	,0	},
    {-4	,2	},
    
    {-3	,2	},
    {-2	,0	},
    {0	,0	},
    {0	,0	},
    {0	,0	},
    
    {0	,0	},
    {0	,0	},
    {45	,0	},
    {-21,0	},
    {0	,0	},
    
    {-15,8	},
    {0	,0	},
    {-10,5	},
    {-5	,3	},
    {-5	,3	},
    
    {4	,-2	},
    {3	,-2	},
    {-3	,0	},
    {0	,0	},
    {0	,0	},
    
    {0	,0	},
    {0	,0	},
    {-149,0	},
    {114 ,-50	},
    {60	,0	},
    
    {58	,-31	},
    {-57,30	},
    {-52,22	},
    {-44,23	},
    {-32,14	},
    
    {28	,0	},
    {26	,-11	},
    {-26,11	},
    {25	,0	},
    {19	,-10	},
    
    {14	,-7	},
    {-13,7	},
    {-9	,5	},
    {-7	,0	},
    {7	,-3	},
    
    {6	,0	},
    {-6	,3	},
    {-6	,3	},
    {-6	,3	},
    {6	,-2	},
    
    {-5	,3	},
    {-5	,3	},
    {5	,-3	},
    {-4	,0	},
    {-4	,0	},
    
    {4	,0	},
    {4	,0	},
    {-4	,2	},
    {3	,0	},
    {-3	,0	},
    
    {-3	,0	},
    {-2	,0	},
    {-2	,0	},
    {2	,0	},
    {-2	,0	},
    
    {-2	,0	},
    {-2	,0	},
    {2	,0	},
    {-2	,0	}
  };
  calcMulSC(needInit, checkT, T, argArray, 69, polyArray,
	    &MULTD[0], 13, &MULSC[0]);
  DebugAssert(which < 69, AipsError);
  return argArray[which];
}

void MeasTable::calcMulSC(volatile Bool &need, Double &check, Double T,
			  Vector<Double> result[], Int resrow,
			  Polynomial<Double> poly[],
			  const Long coeffTD[][5], Int TDrow,
			  const Short coeffSC[][2]) {
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      Int i,j;
      for (i=0; i<TDrow; i++) {
        for (j=0; j<2; j++) {
          poly[2*i+j] = Polynomial<Double>(2);
          poly[2*i+j].setCoefficient(0,
                                     coeffTD[i][1+2*j]*C::arcsec*1e-4);
          poly[2*i+j].setCoefficient(1,
                                     coeffTD[i][2+2*j]*C::arcsec*1e-5);
        }
      }
      for (i=0; i<resrow; i++) {
        result[i].resize(4);
        for (j=0; j<2; j++) {
          result[i](j) = coeffSC[i][j] * C::arcsec*1e-4;
        }
        for (j=2; j<4; j++) {
          result[i](j) = 0;
        }
      }
      need = False;
    }
  }
  if (check != T) {
    check = T;
    Int i; Long j;
    for (i=0; i<TDrow; i++) { // get fundamental argument coefficients
      j = coeffTD[i][0];
      result[j](0) = poly[2*i+0](T);
      result[j](1) = poly[2*i+1](T);
      result[j](2) = (poly[2*i+0].derivative())(T);
      result[j](3) = (poly[2*i+1].derivative())(T);
    }
  }
}

void MeasTable::calcMulSC2000(volatile Bool &need, Double &check, Double T,
			      Vector<Double> result[], uInt resrow,
			      Polynomial<Double> poly[],
			      const Long coeffSC[][6]) {
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      for (uInt i=0; i<resrow; i++) {
        for (uInt j=0; j<2; j++) {
          poly[2*i+j] = Polynomial<Double>(2);
          poly[2*i+j].setCoefficient(0, coeffSC[i][0+3*j]*C::arcsec*1e-7);
          poly[2*i+j].setCoefficient(1, coeffSC[i][1+3*j]*C::arcsec*1e-7);
        }
        result[i].resize(6);
        for (uInt j=0; j<2; j++) result[i](j) = 0;
        result[i](2) = coeffSC[i][1]*C::arcsec*1e-7;
        result[i](3) = coeffSC[i][4]*C::arcsec*1e-7;
        result[i](4) = coeffSC[i][2]*C::arcsec*1e-7;
        result[i](5) = coeffSC[i][5]*C::arcsec*1e-7;
      }
      need = False;
    }
  }
  if (check != T) {
    check = T;
    for (uInt i=0; i<resrow; i++) {
      result[i](0) = poly[2*i+0](T);
      result[i](1) = poly[2*i+1](T);
    }
  }
}

void MeasTable::calcMulSCPlan(volatile Bool &need,
			      Vector<Double> result[], uInt resrow,
			      const Short coeffSC[][4]) {
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      for (uInt i=0; i<resrow; i++) {
        result[i].resize(4);
        for (uInt j=0; j<4; j++) result[i](j) = coeffSC[i][j]*C::arcsec*1e-7;
      }
      need = False;
    }
  }
}

void MeasTable::calcMulSCPlan(volatile Bool &need,
			      Vector<Double> result[], uInt resrow,
			      const Double coeffSC[][2]) {
  if (need) {
    ScopedMutexLock locker(theirMutex);
    if (need) {
      for (uInt i=0; i<resrow; i++) {
        result[i].resize(2);
        for (uInt j=0; j<2; j++) result[i](j) = coeffSC[i][j];
      }
      need = False;
    }
  }
}

Double MeasTable::dPsiEps(uInt which, Double T) {
  static Bool msgDone = False;
  DebugAssert(which < 2, AipsError);
  Double r = 0;
  switch (which) {
  case 1:
    if (!MeasIERS::get(r, MeasIERS::MEASURED, MeasIERS::dEps,
		       T)) {
      if (!msgDone) {
	msgDone = True;
	LogIO os(LogOrigin("MeasTable",
			   String("dPsiEps(uInt, Double)"),
			   WHERE));
	os << LogIO::NORMAL3 << 
	  String("High precision nutation information not available.") <<
	  LogIO::POST;
      }
    }
    break;
  default:
    if (!MeasIERS::get(r, MeasIERS::MEASURED, MeasIERS::dPsi,
		       T)) {
      if (!msgDone) {
	msgDone = True;
	LogIO os(LogOrigin("MeasTable",
			   String("dPsiEps(uInt, Double)"),
			   WHERE));
	os << LogIO::NORMAL3 << 
	  String("High precision nutation information not available.") <<
	  LogIO::POST;
      }
    }
    break;
  }
  return (r * C::arcsec);
}

// Planetary data
const Vector<Double> &MeasTable::Planetary(MeasTable::Types which, 
					   Double T) {
  static Vector<Double> res(6);
  static volatile Bool needInit = True;
  static MeasJPL::Files fil(MeasJPL::DE200);
  static String tnam[2] = { "DE200", "DE405"};
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      uInt t;
      Aipsrc::find (t, String("measures.jpl.ephemeris"), 2, tnam,
                    String("DE200"));
      fil = (MeasJPL::Files)t;
      needInit = False;
    }
    if (!MeasJPL::get(res, fil, (MeasJPL::Types)which,
                      MVEpoch(T))) {
      LogIO os(LogOrigin("MeasTable",
                         String("Planetary(MeasTable::Types, Double)"),
                         WHERE));
      os << "Cannot find the planetary data for MeasJPL object number " << (Int) which
         << " at UT day " << T << " in table "
         << tnam[fil] << LogIO::WARN;
      res = 0.;
    }
  }
  return res;
}

// Planetary constants
const Double &MeasTable::Planetary(MeasTable::JPLconst what) {
  static volatile Bool needInit = True;
  static Double cn[MeasTable::N_JPLconst];
  static MeasJPL::Files fil(MeasJPL::DE200);
  static String tnam[2] = { "DE200", "DE405"};
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      uInt t;
      Aipsrc::find (t, String("measures.jpl.ephemeris"), 2, tnam,
		  String("DE200"));
      fil = (MeasJPL::Files)t;
      for (uInt i=0; i<MeasTable::N_JPLconst; i++) {
        if (!MeasJPL::getConst(cn[i], fil, 
                               (MeasJPL::Codes) i)) {
          LogIO os(LogOrigin("MeasTable",
                             String("Planetary(MeasTable::JPLconst)"),
                             WHERE));
          os << String("Cannot find the planetary data table ") +
            tnam[fil] << LogIO::EXCEPTION;
        }
      }
      needInit = False;
    }
  }
  return cn[what];
}

// Observatory data
void MeasTable::initObservatories() {
  obsMutexedInit.exec();
}

void MeasTable::doInitObservatories (void*)
{
  Table t;
  ROTableRow row;
  TableRecord kws;
  String rfn[3] = {"Long", "Lat", "Height"};
  RORecordFieldPtr<Double> rfp[3];
  Double dt;
  String vs;	
  if (!MeasIERS::getTable(t, kws, row, rfp, vs, dt, 3, rfn, "Observatories",
                          "measures.observatory.directory",
                          "geodetic")) {
    LogIO os(LogOrigin("MeasTable",
                       String("initObservatories()"),
                       WHERE));
    os << "Cannot read table of Observatories" << LogIO::EXCEPTION;
  }
  Int N = t.nrow();
  if (N<1) {
    LogIO os(LogOrigin("MeasTable",
                       String("initObservatories()"),
                       WHERE));
    os << "No entries in table of Observatories" << LogIO::EXCEPTION;
  }
  obsNams.resize(N);
  obsPos.resize(N);
  antResponsesPath.resize(N);
  Bool hasAntResp = False;
  if(row.record().isDefined("AntennaResponses")){
    hasAntResp = True;
  }

  MPosition::Ref mr;
  MPosition tmp;
  for (Int i=0; i<N; i++) {
    row.get(i);
    obsNams(i) = *RORecordFieldPtr<String>(row.record(), "Name");
    if(hasAntResp){
      antResponsesPath(i) = *RORecordFieldPtr<String>(row.record(), "AntennaResponses");
    }
    if (!tmp.giveMe(mr, *RORecordFieldPtr<String>(row.record(), "Type"))) {
      LogIO os(LogOrigin("MeasTable",
                         String("initObservatories()"),
                         WHERE));
      os << "Illegal position type in Observatories" << LogIO::EXCEPTION;
    }
    obsPos(i) = MPosition(MVPosition(Quantity(*(rfp[2]), "m"),
                                     Quantity(*(rfp[0]), "deg"),
                                     Quantity(*(rfp[1]), "deg")), mr);
  }
}

const Vector<String> &MeasTable::Observatories() {
  MeasTable::initObservatories();
  return MeasTable::obsNams;
}

Bool MeasTable::Observatory(MPosition &obs, const String &nam) {
  MeasTable::initObservatories();
  uInt i=MUString::minimaxNC(nam, MeasTable::obsNams);
  if (i < MeasTable::obsNams.nelements()) {
    obs = MeasTable::obsPos(i);
    return True;
  }
  return False;
}

Bool MeasTable::AntennaResponsesPath(String &antRespPath, const String &nam) {
  MeasTable::initObservatories();
  uInt i=MUString::minimaxNC(nam, MeasTable::obsNams);
  if (i < MeasTable::obsNams.nelements()) {
    antRespPath = MeasTable::antResponsesPath(i);
    if(antRespPath.empty()){ // i.e. there is no table for this observatory
      return False; 
    }
    else if(antRespPath[0] == '/'){ // path is absolute
      Path lPath(antRespPath);
      if(!Table::isReadable(lPath.absoluteName())){
	return False;
      }
    }
    else{ // path is relative
      // find and prepend the path to the data repository
      String absPathName;
      Bool isValid = False;
      {
	String mdir;
	Aipsrc::find(mdir, "measures.directory");
	mdir.trim();
	Path lPath(mdir);
	lPath.append(antRespPath);
	absPathName = lPath.absoluteName();
	isValid = Table::isReadable(absPathName);
      }
      if(!isValid){
	Path lPath(Aipsrc::aipsHome() + "/data/" + antRespPath);
	isValid = Table::isReadable(absPathName);
      }
      if(!isValid){
	Path lPath(Aipsrc::aipsRoot() + "/data/" + antRespPath);
	absPathName = lPath.absoluteName();
	isValid = Table::isReadable(absPathName);
      }
      if(!isValid){
	Path lPath(String(CASADATA) + "/" + antRespPath);
	absPathName = lPath.absoluteName();
	isValid = Table::isReadable(absPathName);
      }
      if(!isValid){
	Path lPath(String(CASADATA)+ "/share/casacore/data/" + antRespPath);
	absPathName = lPath.absoluteName();
	isValid = Table::isReadable(absPathName);
      }
      if(!isValid){
	return False; // table not found
      }
      antRespPath = absPathName;
    }
    return True;
  }
  return False; // observatory not found
}

// Source data
void MeasTable::initLines() {
  lineMutexedInit.exec();
}

void MeasTable::doInitLines (void*)
{
  Table t;
  ROTableRow row;
  TableRecord kws;
  String rfn[1] = {"Freq"};
  RORecordFieldPtr<Double> rfp[1];
  Double dt;
  String vs;	
  if (!MeasIERS::getTable(t, kws, row, rfp, vs, dt, 1, rfn, "Lines",
                          "measures.line.directory",
                          "ephemerides")) {
    LogIO os(LogOrigin("MeasTable",
                       String("initLines()"),
                       WHERE));
    os << "Cannot read table of spectral Lines" << LogIO::EXCEPTION;
  }
  Int N = t.nrow();
  if (N<1) {
    LogIO os(LogOrigin("MeasTable",
                       String("initLines()"),
                       WHERE));
    os << "No entries in table of spectral Lines" << LogIO::EXCEPTION;
  }
  lineNams.resize(N);
  linePos.resize(N);
  MFrequency::Ref mr(MFrequency::REST);
  MFrequency tmp;
  for (Int i=0; i<N; i++) {
    row.get(i);
    lineNams(i) = *RORecordFieldPtr<String>(row.record(), "Name");
    linePos(i) = MFrequency(MVFrequency(Quantity(*(rfp[0]), "GHz")), mr);
    if (lineNams(i) == "HI") linePos(i) = MFrequency(QC::HI, mr);
  }
}

const Vector<String> &MeasTable::Lines() {
  MeasTable::initLines();
  return MeasTable::lineNams;
}

Bool MeasTable::Line(MFrequency &obs, const String &nam) {
  MeasTable::initLines();
  uInt i=MUString::minimaxNC(nam, MeasTable::lineNams);
  if (i < MeasTable::lineNams.nelements()) {
    obs = MeasTable::linePos(i);
    return True;
  }
  return False;
}

// Source data
void MeasTable::initSources() {
  srcMutexedInit.exec();
}

void MeasTable::doInitSources (void*)
{
  Table t;
  ROTableRow row;
  TableRecord kws;
  String rfn[2] = {"Long", "Lat"};
  RORecordFieldPtr<Double> rfp[2];
  Double dt;
  String vs;	
  if (!MeasIERS::getTable(t, kws, row, rfp, vs, dt, 2, rfn, "Sources",
                          "measures.sources.directory",
                          "ephemerides")) {
    LogIO os(LogOrigin("MeasTable",
                       String("initSources()"),
                       WHERE));
    os << "Cannot read table of Sources" << LogIO::EXCEPTION;
  }
  Int N = t.nrow();
  if (N<1) {
    LogIO os(LogOrigin("MeasTable",
                       String("initSources()"),
                       WHERE));
    os << "No entries in table of Sources" << LogIO::EXCEPTION;
  }
  srcNams.resize(N);
  srcPos.resize(N);
  MDirection::Ref mr;
  MDirection tmp;
  for (Int i=0; i<N; i++) {
    row.get(i);
    srcNams(i) = *RORecordFieldPtr<String>(row.record(), "Name");
    if (!tmp.giveMe(mr, *RORecordFieldPtr<String>(row.record(), "Type"))) {
      LogIO os(LogOrigin("MeasTable",
                         String("initSources()"),
                         WHERE));
      os << "Illegal direction type in Sources" << LogIO::EXCEPTION;
    }
    srcPos(i) = MDirection(MVDirection(Quantity(*(rfp[0]), "deg"),
                                       Quantity(*(rfp[1]), "deg")), mr);
  }
}

const Vector<String> &MeasTable::Sources() {
  MeasTable::initSources();
  return MeasTable::srcNams;
}

Bool MeasTable::Source(MDirection &obs, const String &nam) {
  MeasTable::initSources();
  uInt i=MUString::minimaxNC(nam, MeasTable::srcNams);
  if (i < MeasTable::srcNams.nelements()) {
    obs = MeasTable::srcPos(i);
    return True;
  }
  return False;
}

// Magnetic field (IGRF) function
const Vector<Double> &MeasTable::IGRF(Double tm) {
  if (time0IGRF < 0 || (tm-time0IGRF > 1830 && time0IGRF < lastIGRF) ||
      (tm-time0IGRF < 0 && time0IGRF >= firstIGRF)) {
    Table t;
    TableRecord kws;
    ROTableRow row;
    String rfn[1] = {"MJD"};
    RORecordFieldPtr<Double> rfp[1];
    Double dt;
    String vs;	
    if (!MeasIERS::getTable(t, kws, row, rfp, vs, dt, 1, rfn, "IGRF",
			    "measures.igrf.directory",
			    "geodetic")) {
      LogIO os(LogOrigin("MeasTable",
			 String("IGRF(Double)"),
			 WHERE));
      os << "Cannot read table of IGRF models" << LogIO::EXCEPTION;
    }
    Int N = t.nrow();
    if (N<10 || !kws.isDefined("MJD0") || kws.asDouble("MJD0") < 10000 ||
	!kws.isDefined("dMJD") || kws.asDouble("dMJD") < 300) {
      LogIO os(LogOrigin("MeasTable",
			 String("IGRF(Double)"),
			 WHERE));
      os << "Incorrect entries in table of IGRF models" << LogIO::EXCEPTION;
    }
    Double m0 = kws.asDouble("MJD0");
    dtimeIGRF= kws.asDouble("dMJD");
    Int indx = Int((tm-m0)/dtimeIGRF);
    indx = max(1, min(indx, N)) - 1;
    row.get(0);
    firstIGRF = *(rfp[0]);
    row.get(N-1);
    lastIGRF = *(rfp[0]);
    row.get(indx);
    time0IGRF = *(rfp[0]);
    ROArrayColumn<Double> acc, accd;
    acc.attach(t, "COEF");
    accd.attach(t, "dCOEF");
    coefIGRF = acc(indx);
    dIGRF = accd(indx);
  }
  if (abs(tm-timeIGRF) > 5) {
    resIGRF = coefIGRF + dIGRF * (5*(tm-time0IGRF)/dtimeIGRF);
    timeIGRF = tm;
  }
  return resIGRF;
}

// Aberration function
const Polynomial<Double> &MeasTable::aberArg(uInt which) {
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[13];
  static const Double ABERFUND[13][2] = {
    {4.4026088,	2608.7903142},
    {3.1761467,	1021.3285546},
    {1.7534703,	 628.3075849},
    {6.2034809,	 334.0612431},
    {0.5995465,	  52.9690965},
    {0.8740168,	  21.3299095},
    {5.4812939,	   7.4781599},
    {5.3118863,	   3.8133036},
    {3.8103444,	8399.6847337},
    {5.1984667,	7771.3771486},
    {2.3555559,	8328.6914289},
    {6.2400601,	 628.3019553},
    {1.6279052,	8433.4661601}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<13; i++) {
        polyArray[i] = Polynomial<Double>(1);
        for (j=0; j<2; j++) {
          polyArray[i].setCoefficient(j,
                                      ABERFUND[i][j]);
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 13, AipsError);
  return polyArray[which];
}

const Polynomial<Double> &MeasTable::aber1950Arg(uInt which) {
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[12];
  static const Double ABERFUND[12][4] = {
    {1065976.59, 1717915856.79, 33.09,   0.0518},
    {1290513.0,  129596579.1,   -0.54,   -0.0120},
    {40503.2,    1739527290.54, -11.56,  -0.0012},
    {1262654.95, 1602961611.18, -5.17,   0.0068},
    {933059.79,  -6962911.23,   7.48,    0.0080},
    {764820.00,	210662974.800,	0,	0},
    {1150495.2,	68903917.200,	0,	0},
    {811011.60,	10924498.800,	0,	0},
    {632145.60,	4398458.400,	0,	0},
    {0,		8128.800,	0,	0},
    {260701.20,	1542164.400,	0,	0},
    {135831.60,	786459.600,	0,	0}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<12; i++) {
        polyArray[i] = Polynomial<Double>(3);
        for (j=0; j<4; j++) {
          polyArray[i].setCoefficient(j,
                                      ABERFUND[i][j]*C::arcsec);
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 12, AipsError);
  return polyArray[which];
}

const Vector<Char> &MeasTable::mulAberArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[80];
  static const Char ABERARG[80][6] = {
    {	0,	0,	1,	0,	0,	0},
    {	0,	0,	2,	0,	0,	0},
    {	0,	0,	3,	0,	0,	0},
    {	0,	0,	2,	0,	-1,	0},
    {	0,	0,	3,	-8,	3,	0},
    {	0,	0,	5,	-8,	3,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	2,	-1,	0,	0,	0},
    {	0,	0,	1,	0,	-2,	0},
    {	0,	0,	1,	0,	1,	0},
    {	0,	2,	-2,	0,	0,	0},
    {	0,	0,	1,	0,	-1,	0},
    {	0,	0,	4,	0,	0,	0},
    {	0,	0,	3,	0,	-2,	0},
    {	0,	1,	-2,	0,	0,	0},
    {	0,	2,	-3,	0,	0,	0},
    {	0,	2,	-4,	0,	0,	0},
    {	0,	0,	3,	-2,	0,	0},
    {	0,	8,	-12,	0,	0,	0},
    {	0,	8,	-14,	0,	0,	0},
    {	0,	0,	0,	2,	0,	0},
    {	0,	3,	-4,	0,	0,	0},
    {	0,	0,	2,	0,	-2,	0},
    {	0,	3,	-3,	0,	0,	0},
    {	0,	0,	2,	-2,	0,	0},
    {	0,	3,	-6,	0,	0,	0},
    {	0,	0,	0,	0,	1,	0},
    {	0,	0,	9,	-16,	4,	5},
    {	0,	0,	7,	-16,	4,	5},
    {	0,	0,	1,	0,	-3,	0},
    {	0,	0,	2,	0,	-3,	0},
    {	0,	4,	-5,	0,	0,	0},
    {	0,	0,	1,	-4,	0,	0},
    {	0,	0,	3,	0,	-3,	0},
    {	0,	0,	3,	-4,	0,	0},
    {	0,	3,	-2,	0,	0,	0},
    {	0,	0,	4,	-4,	0,	0},
    {	0,	0,	2,	0,	0,	-1},
    {	0,	0,	3,	-3,	0,	0},
    {	0,	0,	3,	0,	-1,	0}, //40
    {	0,	0,	1,	0,	0,	1},
    {	0,	0,	0,	0,	2,	0},
    {	0,	0,	2,	-1,	0,	0},
    {	0,	0,	1,	0,	0,	-1},
    {	0,	5,	-6,	0,	0,	0},
    {	0,	0,	1,	-3,	0,	0},
    {	0,	3,	-6,	4,	0,	0},
    {	0,	3,	-8,	4,	0,	0},
    {	0,	0,	4,	-5,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	0,	3,	-5,	0,	0,	0},
    {	0,	6,	-7,	0,	0,	0},
    {	0,	10,	-9,	0,	0,	0},
    {	0,	0,	2,	-8,	3,	0},
    {	0,	0,	6,	-8,	3,	0},
    {	0,	0,	1,	-2,	0,	0},
    {	0,	0,	9,	-15,	0,	0},
    {	0,	0,	1,	0,	-2,	5},
    {	0,	0,	1,	0,	2,	-5},
    {	0,	0,	1,	0,	0,	-2}, //60
    {	0,	0,	0,	1,	0,	0},
    {	0,	0,	7,	-15,	0,	0},
    {	0,	2,	0,	0,	0,	0},
    {	0,	0,	2,	0,	2,	-5},
    {	2,	0,	-2,	0,	0,	0},
    {	0,	0,	9,	-19,	0,	3},
    {	0,	0,	11,	-19,	0,	3},
    {	0,	0,	2,	-5,	0,	0},
    {	0,	5,	-9,	0,	0,	0},
    {	0,	11,	-10,	0,	0,	0},
    {	0,	4,	-4,	0,	0,	0},
    {	0,	0,	2,	0,	-4,	0},
    {	0,	0,	5,	-6,	0,	0},
    {	0,	5,	-5,	0,	0,	0},
    {	0,	0,	4,	0,	-3,	0},
    {	0,	4,	-6,	0,	0,	0},
    {	0,	5,	-7,	0,	0,	0},
    {	0,	0,	4,	0,	-2,	0},
    {	0,	0,	3,	0,	-4,	0},
    {	0,	7,	-8,	0,	0,	0}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<80; i++) {
        argArray[i].resize(6);
        for (j=0; j<6; j++) {
          argArray[i](j) = ABERARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 80, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulAber1950Arg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[132];
  static const Char ABERARG[132][12] = {
    { 0, 0, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0,-1,-1, 1,-1, 0, 0, 1, 0, 0, 0, 0},
    { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 1, 0,-1,-2,-1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 1,-1, 1,-1,-1, 0, 0, 0, 0, 0, 0},
    { 0, 4, 1,-1, 1, 0,-8, 3, 0, 0, 0, 0},	// 10
    { 0,-4, 1,-1, 1, 0, 8,-3, 0, 0, 0, 0},
    { 0, 2,-1, 1,-1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 2,-1, 1,-1, 0, 0,-2, 0, 0, 0, 0},
    { 0,-4, 1,-1, 1, 0, 8,-3, 0, 0, 0, 0},
    { 0, 4, 1,-1, 1, 0,-8, 3, 0, 0, 0, 0},
    { 0, 1,-1, 1,-1,-1, 0, 0, 0, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 1, 0, 0, 0, 0},
    { 0, 2,-1, 1,-1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0,-3,-1, 1,-1, 0, 0, 0, 0, 0, 0, 0},	// 20
    { 0, 0,-1, 1,-1, 0, 0, 1, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1, 0, 0,-2, 0, 0, 0, 0},
    { 0, 3,-1, 1,-1,-2, 0, 0, 0, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 2, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1,-1, 0, 0, 0, 0, 0, 0},
    { 0, 3,-1, 1,-1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1, 0,-2, 0, 0, 0, 0, 0},
    { 0,-1, 1,-1, 1, 0, 2, 0, 0, 0, 0, 0},
    { 0, 3, 1,-1, 1,-2, 0, 0, 0, 0, 0, 0},	// 30
    { 0,-1,-1, 1,-1, 0, 0, 2, 0, 0, 0, 0},
    { 0, 4,-1, 1,-1,-3, 0, 0, 0, 0, 0, 0},
    { 0, 3, 1,-1, 1,-2, 0, 0, 0, 0, 0, 0},
    { 0,13, 1,-1, 1,-8, 0, 0, 0, 2, 0, 0},
    {0,-13, 1,-1, 1, 8, 0, 0, 0,-2, 0, 0},
    { 0,13, 1,-1, 1,-8, 0, 0, 0, 2, 0, 0},
    {0,-13, 1,-1, 1, 8, 0, 0, 0,-2, 0, 0},
    { 0, 0,-1, 2,-1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1,-1, 0, 0, 0, 0, 0, 0},	// 40
    { 0, 0,-1, 2, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 3, 1,-1, 1,-3, 0, 0, 0, 0, 0, 0},
    { 0,-1, 1,-1, 1, 0, 0, 1, 0, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 5, 1,-1, 1,-3, 0, 0, 0, 0, 0, 0},
    { 0, 3,-1, 1,-1, 0, 0,-3, 0, 0, 0, 0},
    { 0,-5, 1,-1, 1, 3, 0, 0, 0, 0, 0, 0},
    { 0, 4, 1,-1, 1,-4, 0, 0, 0, 0, 0, 0},
    { 0, 4, 0, 0, 0,-3, 0, 0, 0, 0, 0, 0},
    { 0, 5, 1,-1, 1,-3, 0, 0, 0, 0, 0, 0},	// 50
    { 0,-5, 1,-1, 1, 3, 0, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1, 0, 0,-2, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 0, 3, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0,-1, 1,-1, 1, 0, 2, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1, 0,-2, 0, 0, 0, 0, 0},
    { 0, 3, 1,-1, 1, 0,-4, 0, 0, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 2, 0, 0, 0, 0, 0},
    { 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},	// 60
    { 0,-1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 3, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 4, 0, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1, 0,-4, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1, 0, 0, 0,-1, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 0, 3, 0, 0, 0, 0},
    { 0, 3,-1, 1,-1,-3, 0, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 0, 1, 0, 0, 0, 0},
    { 0, 4, 1,-1, 1,-4, 0, 0, 0, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 1, 0, 0, 0, 0},	// 70
    { 0,-2, 1,-1, 1, 0, 0, 2, 0, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 0, 1, 0, 0, 0, 0},
    { 0, 5, 1,-1, 1,-5, 0, 0, 0, 0, 0, 0},
    { 0,-1, 1,-1, 1, 0, 0, 2, 0, 0, 0, 0},
    { 0, 4,-1, 1,-1,-3, 0, 0, 0, 0, 0, 0},
    {-1, 0,-1, 2,-1, 0, 0, 0, 0, 0, 0, 0},
    { 0, 5, 1,-1, 1,-4, 0, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 0, 0, 2, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 0, 1, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 0,-1, 0, 0, 0},	// 80
    { 0, 5,-1,-1, 1,-5, 0, 0, 0, 0, 0, 0},
    { 0, 6, 1,-1, 1,-6, 0, 0, 0, 0, 0, 0},
    { 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
    { 0,-7, 1,-1, 1, 3, 4, 0, 0, 0, 0, 0},
    { 0, 7, 1,-1, 1,-3,-4, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 4, 0, 0, 0, 0, 0},
    { 0, 2, 1,-1, 1, 0,-4, 0, 0, 0, 0, 0},
    { 0, 4, 1,-1, 1,-3, 0, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 3, 0, 0, 0, 0, 0},
    { 0, 1, 1,-1, 1,-2, 0, 0, 0, 0, 0, 0},	// 90
    { 0, 1,-1, 1,-1,-2, 0, 0, 0, 0, 0, 0},
    { 1, 0,-1, 2,-1, 0, 0, 0, 0, 0, 0, 0},
    { 0,-1, 1,-1, 1, 0, 0, 0, 1, 0, 0, 0},
    { 0,-3, 1,-1, 1, 0, 0, 2, 0, 0, 0, 0},
    { 0,-3,-1, 1,-1, 0, 0, 2, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 2, 0, 0, 0, 0, 0},
    { 0,-3, 1,-1, 1, 0, 3, 0, 0, 0, 0, 0},
    { 0,-3,-1, 1,-1, 0, 3, 0, 0, 0, 0, 0},
    { 0,-1, 1,-1, 1, 0, 0, 3, 0, 0, 0, 0},
    { 0,-1,-1, 1,-1, 0, 0, 3, 0, 0, 0, 0},	// 100
    { 0, 1, 1,-1, 1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 1,-1, 1,-1,-2, 0, 0, 0, 0, 0, 0},
    { 0, 7, 1,-1, 1,-5, 0, 0, 0, 0, 0, 0},
    { 0, 7,-1, 1,-1,-5, 0, 0, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 0, 4, 0, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 0, 4, 0, 0, 0, 0},
    { 0,-2, 1,-1, 1, 0, 0, 3, 0, 0, 0, 0},
    { 0,-2,-1, 1,-1, 0, 0, 3, 0, 0, 0, 0},
    //                  g2,g3,g4,g5, v, g6,g7
    { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},	// 110
    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},	// 120
    { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    { 0, 0, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},	// 130
    { 0, 1, 1,-1, 1, 0, 0, 0, 0, 0, 0, 0},
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<132; i++) {
        argArray[i].resize(12);
        for (j=0; j<12; j++) {
          argArray[i](j) = ABERARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 132, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulAberSunArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[17];
  static const Char ABERSUNARG[17][7] = {
    {	0,	0,	0,	1,	0,	0,	0},
    {	0,	0,	0,	0,	1,	0,	0},
    {	0,	0,	0,	2,	0,	0,	0},
    {	0,	0,	0,	0,	0,	1,	0},
    {	0,	0,	0,	0,	0,	0,	1},
    {	0,	0,	0,	0,	2,	0,	0},
    {	1,	0,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0,	0},
    {	0,	0,	0,	3,	0,	0,	0},
    {	0,	0,	0,	1,	-5,	0,	0},
    {	0,	0,	0,	3,	-5,	0,	0},
    {	1,	0,	0,	0,	0,	0,	-2},
    {	0,	0,	0,	0,	3,	0,	0},
    {	0,	0,	0,	2,	-6,	0,	0},
    {	0,	0,	0,	2,	-4,	0,	0},
    {	0,	0,	0,	0,	0,	2,	0},
    {	0,	0,	0,	1,	0,	0,	-2}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<17; i++) {
        argArray[i].resize(7);
        for (j=0; j<7; j++) {
          argArray[i](j) = ABERSUNARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 17, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulAberEarthArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[17];
  static const Char ABEREARTHARG[17][5] = {
    {	1,	0,	0,	0,	0},
    {	0,	0,	0,	0,	1},
    {	1,	0,	1,	0,	0},
    {	1,	2,	-1,	0,	0},
    {	1,	-2,	0,	0,	0},
    {	1,	2,	0,	0,	0},
    {	0,	0,	1,	0,	1},
    {	1,	-2,	1,	0,	0},
    {	1,	0,	2,	0,	0},
    {	0,	2,	0,	0,	-1},
    {	1,	0,	0,	0,	-2},
    {	1,	0,	0,	1,	0},
    {	1,	0,	0,	-1,	0},
    {	1,	4,	-2,	0,	0},
    {	1,	-2,	2,	0,	0},
    {	1,	2,	1,	0,	0},
    {	0,	2,	-1,	0,	1}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<17; i++) {
        argArray[i].resize(5);
        for (j=0; j<5; j++) {
          argArray[i](j) = ABEREARTHARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 17, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulAber(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[80];
  static Polynomial<Double> polyArray[18];
  static Double factor = 0;
  static const Long MABERTD[3][18] = {
    { -1719919,	-2,	0,	-25,	0,	0,
      25,	-13,	-1, 1578094,	156,	0,
      10,	32,	1,   684187,	-358,	0},
    {	6434,	141,	0,	28007,	-107,	-1,
	25697,	-95,	-1,	-5904,	-130,	0,
	11141,	-48,	0,	-2559,	-55,	0},
    {	486,	-5,	0,	-236,	-4,	0,
	-216,	-4,	0,	-446,	5,	0,
	-94,	-2,	0,	-193,	2,	0}
  };
  static const Short MABER[80][6] = {
    {	0,	0,	0,	0,	0,	0},
    {	0,	0,	0,	0,	0,	0},
    {	0,	0,	0,	0,	0,	0},
    {	31,	1,	1,	-28,	0,	-12},
    {	8,	-28,	25,	8,	11,	3},
    {	8,	-28,	-25,	-8,	-11,	-3},
    {	-25,	0,	0,	23,	0,	10},
    {	21,	0,	0,	-19,	0,	-8},
    {	16,	0,	0,	15,	1,	7},
    {	11,	-1,	-1,	-10,	-1,	-5},
    {	0,	-11,	-10,	0,	-4,	0},
    {	-11,	-2,	-2,	9,	-1,	4},
    {	-7,	-8,	-8,	6,	-3,	3},
    {	-10,	0,	0,	9,	0,	4},
    {	-9,	0,	0,	-9,	0,	-4},
    {	-9,	0,	0,	-8,	0,	-4},
    {	0,	-9,	8,	0,	3,	0},
    {	8,	0,	0,	-8,	0,	-3},
    {	-4,	-7,	-6,	4,	-3,	2},
    {	-4,	-7,	6,	-4,	3,	-2},
    {	-6,	-5,	-4,	5,	-2,	2},	// 21
    {	-1,	-1,	-2,	-7,	1,	-4},
    {	4,	-6,	-5,	-4,	-2,	-2},
    {	0,	-7,	-6,	0,	-3,	0},
    {	5,	-5,	-4,	-5,	-2,	-2},
    {	4,	-1,	1,	4,	0,	2},
    {	-4,	0,	0,	3,	0,	1},
    {	-1,	-3,	-3,	1,	-1,	0},
    {	-1,	-3,	3,	-1,	1,	0},
    {	3,	1,	0,	3,	0,	1},
    {	3,	-1,	-1,	1,	0,	1},
    {	-2,	0,	0,	-3,	0,	-1},
    {	1,	-2,	2,	1,	1,	1},
    {	-2,	-1,	0,	2,	0,	1},
    {	1,	-2,	-2,	-1,	-1,	0},
    {	2,	0,	0,	-2,	0,	-1},
    {	2,	-1,	-1,	-2,	0,	-1},
    {	2,	0,	0,	-2,	0,	-1},
    {	2,	-1,	-1,	-1,	0,	-1},
    {	0,	-2,	-1,	0,	-1,	0},
    {	0,	-1,	-1,	0,	-1,	0},	// 41
    {	-1,	-1,	-1,	1,	-1,	0},
    {	1,	0,	0,	-1,	0,	-1},
    {	0,	-1,	-1,	0,	-1,	0},
    {	-2,	0,	0,	-1,	0,	0},
    {	1,	-1,	1,	1,	0,	0},
    {	-1,	1,	1,	1,	0,	0},
    {	-1,	1,	-1,	-1,	0,	0},
    {	1,	-1,	-1,	0,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	0,	-1,	1,	0,	0,	0},
    {	-1,	0,	0,	-1,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	1,	0,	0,	1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},	// 61
    {	-1,	0,	0,	-1,	0,	0},
    {	0,	-1,	-1,	0,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	0,	1,	-1,	0,	0,	0},
    {	0,	1,	-1,	0,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	0,	-1,	1,	0,	0,	0},
    {	0,	1,	-1,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
    {	0,	0,	1,	0,	0,	0},
    {	0,	0,	1,	0,	0,	0},
    {	0,	0,	0,	1,	0,	0},
    {	0,	0,	0,	-1,	0,	0}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      UnitVal AUperDay(1e-8,"AU/d");
      factor = AUperDay.getFac();
      Int i,j,k;
      for (i=0; i<3; i++) {
        for (j=0; j<6; j++) {
          polyArray[6*i+j] = Polynomial<Double>(2);
          for (k=0; k<3; k++) {
            polyArray[6*i+j].setCoefficient(k,
                                            MABERTD[i][k+3*j]*factor);
          }
        }
      }
      for (i=0; i<80; i++) {
        argArray[i].resize(12);
        for (j=0; j<6; j++) {
          argArray[i](j) = MABER[i][j] * factor;
        }
        for (j=6; j<12; j++) {
          argArray[i](j) = 0;
        }
      }
      needInit = False;
    }
  }
  if (checkT != T) {
    checkT = T;
    Int i, j;
    for (i=0; i<3; i++) {	// get fundamental argument coefficients
      for (j=0; j<6; j++) {
	argArray[i](j) = polyArray[6*i+j](T);
	argArray[i](j+6) = (polyArray[6*i+j].derivative())(T);
      }
    }
  }
  DebugAssert(which < 80, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulAber1950(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[132];
  static Double factor = 0;

  // Wim Brouw's old table
  static const Short MABER[130][6] = {
    // Order: sin(x), cos(x), sin(y), cos(y), sin(z), cos(z)
    {	1,	0,	0,	-157,	0,	358},
    {	715,	0,	0,	-656,	0,	-285},
    {	543,	0,	0,	-498,	0,	-216},
    {	-72,	0,	0,	63,	0,	35},
    {	-60,	0,	0,	55,	0,	24},
    {	38,	0,	0,	-35,	0,	-15},
    {	0,	-31,	28,	0,	12,	0},
    {	0,	0,	0,	26,	0,	-59},
    {	-26,	0,	0,	-24,	0,	-10},
    {	-22,	0,	0,	-20,	0,	-9},
    {	22,	0,	0,	-20,	0,	-9},	// 10
    {	-22,	0,	0,	20,	0,	9},
    {	0,	-18,	17,	0,	7,	0},
    {	16,	0,	0,	15,	0,	6},
    {	0,	16,	14,	0,	6,	0},
    {	0,	16,	14,	0,	6,	0},
    {	0,	12,	-1,	0,	-5,	0},
    {	-12,	0,	0,	11,	0,	5},
    {	11,	0,	0,	10,	0,	4},
    {	11,	0,	0,	-10,	0,	-4},
    {	-11,	0,	0,	-10,	0,	-4},	// 20
    {	-10,	0,	0,	-9,	0,	-4},
    {	-10,	0,	0,	9,	0,	4},
    {	0,	0,	8,	-8,	0,	-3},
    {	0,	0,	8,	-8,	0,	-3},
    {	-8,	0,	0,	7,	0,	3},
    {	-8,	0,	0,	-7,	0,	-3},
    {	0,	8,	7,	0,	3,	0},
    {	0,	-7,	-6,	0,	-3,	0},
    {	0,	-7,	-6,	0,	-3,	0},
    {	0,	7,	6,	0,	3,	0},	// 30
    {	7,	0,	0,	6,	0,	3},
    {	0,	6,	-6,	0,	-3,	0},
    {	-6,	0,	6,	0,	3,	0},
    {	6,	0,	0,	-5,	0,	-2},
    {	-6,	0,	0,	5,	0,	2},
    {	0,	5,	5,	0,	2,	0},
    {	0,	5,	5,	0,	2,	0},
    {	-5,	0,	0,	-5,	0,	-2},
    {	-5,	0,	0,	4,	0,	2},
    {	0,	5,	4,	0,	2,	0},	// 40
    {	0,	0,	0,	0,	0,	-2},
    {	0,	4,	4,	0,	2,	0},
    {	0,	-4,	-3,	0,	-1,	0},
    {	0,	-4,	-3,	0,	-1,	0},
    {	0,	3,	3,	0,	1,	0},
    {	0,	3,	-3,	0,	-1,	0},
    {	0,	3,	3,	0,	1,	0},
    {	0,	3,	3,	0,	1,	0},
    {	0,	0,	0,	0,	-1,	0},
    {	-3,	0,	0,	3,	0,	1},	// 50
    {	3,	0,	0,	-3,	0,	-1},
    {	0,	-3,	-3,	0,	-1,	0},
    {	-3,	0,	0,	3,	0,	1},
    {	-3,	0,	0,	2,	0,	1},
    {	0,	-3,	2,	0,	1,	0},
    {	-3,	0,	0,	2,	0,	1},
    {	3,	0,	0,	-2,	0,	-1},
    {	-3,	0,	0,	2,	0,	1},
    {	-2,	0,	0,	-2,	0,	0},
    {	0,	0,	0,	1,	0,	-3},	// 60
    {	0,	0,	0,	0,	0,	1},
    {	0,	2,	-2,	0,	0,	0},
    {	0,	2,	2,	0,	0,	0},
    {	0,	2,	2,	0,	0,	0},
    {	-2,	0,	0,	2,	0,	0},
    {	2,	0,	0,	2,	0,	0},
    {	0,	-2,	2,	0,	0,	0},
    {	0,	2,	2,	0,	0,	0},
    {	2,	0,	0,	-2,	0,	0},
    {	0,	-2,	-2,	0,	0,	0},	// 70
    {	0,	-2,	-2,	0,	0,	0},
    {	0,	-2,	2,	0,	0,	0},
    {	2,	0,	0,	-2,	0,	0},
    {	2,	0,	0,	-2,	0,	0},
    {	-2,	0,	0,	-2,	0,	0},
    {	2,	0,	0,	1,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	-1,	0,	0},	// 80
    {	0,	1,	1,	0,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	0,	-1,	-1,	0,	0,	0},
    {	0,	-1,	-1,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},	// 90
    {	0,	-1,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},	// 100
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    //
    {	701,	0,	0,	-642,	0,	-280},
    {	0,	158,	152,	0,	48,	0},	// 110
    {	0,	159,	147,	0,	61,	0},
    {	34,	0,	0,	-31,	0,	-14},
    {	0,	20,	18,	0,	8,	0},
    {	-17,	0,	0,	16,	0,	7},
    {	0,	12,	11,	0,	4,	0},
    {	11,	0,	0,	-10,	0,	-4},
    {	0,	9,	8,	0,	3,	0},
    {	0,	8,	7,	2,	0,	0},
    {	-5,	0,	0,	5,	0,	2},
    {	-5,	0,	0,	4,	0,	2},	// 120
    {	0,	4,	3,	2,	0,	0},
    {	-3,	0,	0,	3,	0,	1},
    {	0,	3,	2,	0,	1,	0},
    {	-3,	0,	0,	5,	0,	-5},
    {	2,	0,	0,	-2,	0,	-1},
    {	-1,	0,	0,	0,	0,	1},
    {	0,	1,	1,	0,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
  };
  /*
  // new Rob Reid's table (some slight differences)
  static const Short MABER[130][6] = {
    // Order:
    //  Delta xdot       Delta ydot     Delta zdot
    // sin,    cos,    sin,     cos,   sin,     cos

    {	1,	0,	0,	-157,	0,	358},   // T
    {	715,	0,	0,	-656,	0,	-285},
    {	543,	0,	0,	-498,	0,	-216},
    {	-72,	0,	0,	63,	0,	35},    // T
    {	-60,	0,	0,	55,	0,	24},
    {	38,	0,	0,	-35,	0,	-15},
    {	0,	-31,	28,	0,	12,	0},
    {	0,	0,	0,	26,	0,	-59},
    {	-26,	0,	0,	-24,	0,	-10},
    {	-22,	0,	0,	-20,	0,	-9},
    {	22,	0,	0,	-20,	0,	-9},	// 10
    {	-22,	0,	0,	20,	0,	9},
    {	0,	-18,	17,	0,	7,	0},
    {	16,	0,	0,	15,	0,	6},
    {	0,	16,	14,	0,	6,	0},
    {	0,	16,	14,	0,	6,	0},
    {	0,	12,	-11,	0,	-5,	0},
    {	-12,	0,	0,	11,	0,	5},
    {	11,	0,	0,	10,	0,	4},
    {	11,	0,	0,	-10,	0,	-4},
    {	-11,	0,	0,	-10,	0,	-4},	// 20
    {	-10,	0,	0,	-9,	0,	-4},
    {	-10,	0,	0,	9,	0,	4},
    {	0,	8,	-8,	0,	-3,	0},
    {	0,	8,	-8,	0,	-3,	0},
    {	-8,	0,	0,	7,	0,	3},
    {	-8,	0,	0,	-7,	0,	-3},
    {	0,	8,	7,	0,	3,	0},
    {	0,	-7,	-6,	0,	-3,	0},
    {	0,	-7,	-6,	0,	-3,	0},
    {	0,	7,	6,	0,	3,	0},	// 30
    {	7,	0,	0,	6,	0,	3},
    {	0,	6,	-6,	0,	-3,	0},
    {	-6,	0,	0,	6,	0,	3},
    {	6,	0,	0,	-5,	0,	-2},
    {	-6,	0,	0,	5,	0,	2},
    {	0,	5,	5,	0,	2,	0},
    {	0,	5,	5,	0,	2,	0},
    {	-5,	0,	0,	-5,	0,	-2},
    {	-5,	0,	0,	4,	0,	2},
    {	0,	5,	4,	0,	2,	0},	// 40
    {	0,	0,	0,	0,	0,	-2},
    {	0,	4,	4,	0,	2,	0},
    {	0,	-4,	-3,	0,	-1,	0},
    {	0,	-4,	-3,	0,	-1,	0},     // T**2
    {	0,	3,	3,	0,	1,	0},
    {	0,	3,	-3,	0,	-1,	0},
    {	0,	3,	3,	0,	1,	0},
    {	0,	3,	3,	0,	1,	0},
    {	0,	0,	0,	0,	-1,	0},
    {	-3,	0,	0,	3,	0,	1},	// 50
    {	3,	0,	0,	-3,	0,	-1},
    {	0,	-3,	-3,	0,	-1,	0},
    {	-3,	0,	0,	3,	0,	1},
    {	-3,	0,	0,	2,	0,	1},     // T
    {	0,	3,	2,	0,	1,	0},     // T**3
    {	-3,	0,	0,	2,	0,	1},
    {	3,	0,	0,	-2,	0,	-1},
    {	-3,	0,	0,	2,	0,	1},
    {	-2,	0,	0,	-2,	0,	0},
    {	0,	0,	0,	1,	0,	-3},	// 60
    {	0,	0,	0,	0,	0,	1},
    {	0,	2,	-2,	0,	0,	0},
    {	0,	2,	2,	0,	0,	0},
    {	0,	2,	2,	0,	0,	0},
    {	-2,	0,	0,	2,	0,	0},
    {	2,	0,	0,	2,	0,	0},
    {	0,	-2,	2,	0,	0,	0},
    {	0,	2,	2,	0,	0,	0},
    {	2,	0,	0,	-2,	0,	0},
    {	0,	-2,	-2,	0,	0,	0},	// 70
    {	0,	-2,	-2,	0,	0,	0},
    {	0,	-2,	2,	0,	0,	0},
    {	2,	0,	0,	-2,	0,	0},
    {	2,	0,	0,	-2,	0,	0},
    {	-2,	0,	0,	-2,	0,	0},
    {	2,	0,	0,	1,	0,	0},
    {	0,	1,	1,	0,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	-1,	0,	0},	// 80
    {	0,	1,	1,	0,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	0,	-1,	-1,	0,	0,	0},
    {	0,	-1,	-1,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},	// 90
    {	0,	-1,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},	// 100
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
    {	-1,	0,	0,	0,	0,	0},
    {	1,	0,	0,	0,	0,	0},
    {	0,	-1,	0,	0,	0,	0},
    {	0,	1,	0,	0,	0,	0},
    //
    {	701,	0,	0,	-642,	0,	-280},
    {	0,	158,	152,	0,	48,	0},	// 110
    {	0,	159,	147,	0,	61,	0},
    {	34,	0,	0,	-31,	0,	-14},
    {	0,	20,	18,	0,	8,	0},     // T
    {	-17,	0,	0,	16,	0,	7},
    {	0,	12,	11,	0,	0,	4},
    {	11,	0,	0,	-10,	0,	-4},
    {	0,	9,	8,	0,	3,	0},
    {	0,	8,	7,	0,	2,	0},
    {	-5,	0,	0,	5,	0,	2},     // T
    {	-5,	0,	0,	4,	0,	2},	// 120, T
    {	0,	4,	3,	0,	2,	0},
    {	-3,	0,	0,	3,	0,	1},
    {	0,	3,	2,	0,	1,	0},
    {	-3,	0,	0,	5,	0,	-5},
    {	2,	0,	0,	-2,	0,	-1},
    {	-1,	0,	0,	0,	0,	1},
    {	0,	1,	1,	0,	0,	0},
    {	0,	1,	1,	0,	0,	0},     // T
    {	0,	-1,	0,	0,	0,	0},     // T
  };
  */

  static const Short ABERT1T[10] = { // Includes ABERT2T and ABERT3T,
    0,3,44,54,55,113,119,120,128,129 // which will end up as T**2 and
  };                                 // T**3 respectively.
  static const Short ABERT2T[2] = {
    44, 55
  };
  static const Short ABERT3T[1] = {
    55
  };
  static const Double ABERSPEC[2][6] = {
    {1719971.0,	0,	0,	-1577888.0,	0,	-684523.0},
    {28809.0,	0,	0,	-26429.0,	0,	-11466.0}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      UnitVal AUperDay(1e-8,"AU/d");
      factor = AUperDay.getFac();
      Int i, j;
      for (i=0; i<130; i++) {
        argArray[i].resize(12);
        for (j=0; j<6; j++) {
          argArray[i](j) = MABER[i][j] * factor;
        }
        for (j=6; j<12; j++) {
          argArray[i](j) = 0;
        }
      }
      for (i=0; i<2; i++) {
        argArray[130+i].resize(12);
        for (j=0; j<6; j++) {
          argArray[130+i](j) = ABERSPEC[i][j] * factor;
        }
        for (j=6; j<12; j++) {
          argArray[130+i](j) = 0;
        }
      }
      needInit = False;
    }
  }
  if (checkT != T) {
    checkT = T;
    Int i, j, k;
    for (i=0; i<10; i++) {	// get fundamental argument coefficients
      k = ABERT1T[i];
      for (j=0; j<6; j++) {
	argArray[k](j) = MABER[k][j] * factor * T;
	argArray[k](j+6) = MABER[k][j] * factor;        // d/dT
      }
    }
    for (i=0; i<2; i++) {	// get fundamental argument coefficients
      k = ABERT2T[i];
      for (j=0; j<6; j++) {
	argArray[k](j) *= T;            // Already multiplied by T in ABERT1T
	argArray[k](j+6) *= 2*T;        // d/dT
      }
    }
    for (i=0; i<1; i++) {	// get fundamental argument coefficients
      k = ABERT3T[i];
      for (j=0; j<6; j++) {
	argArray[k](j) *= T;        // Already multiplied by T**2 in ABERT2T
	argArray[k](j+6) *= 1.5*T;  // d/dT: 1.5 * T * 2 * T = 3 * T**2
      }
    }
  }
  DebugAssert(which < 132, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulSunAber(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[17];
  static Double factor = 0;
  static const Short MSUNABER[17][6] = {
    {	719,	0,	6,	-660,	-15,	-283},
    {	159,	0,	2,	-147,	-6,	-61},
    {	34,	-9,	-8,	-31,	-4,	-13},
    {	17,	0,	0,	-16,	0,	-7},
    {	16,	0,	1,	-15,	-3,	-6},
    {	0,	-9,	-8,	0,	-3,	1},
    {	6,	0,	0,	-6,	0,	-2},
    {	5,	0,	0,	-5,	0,	-2},
    {	2,	-1,	-1,	-2,	0,	-1},
    {	-2,	0,	0,	-2,	0,	-1},
    {	-2,	0,	0,	2,	0,	1},
    {	-1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	-1,	0,	0},
    {	-1,	0,	0,	1,	0,	0},
    {	1,	0,	0,	0,	0,	0}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      UnitVal AUperDay(1e-8,"AU/d");
      factor = AUperDay.getFac();
      Int i,j;
      for (i=0; i<17; i++) {
        argArray[i].resize(6);
        for (j=0; j<6; j++) {
          argArray[i](j) = MSUNABER[i][j] * factor;
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 17, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulEarthAber(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[17];
  static Double factor = 0;
  static const Short MEARTHABER[17][3] = {
    {	715,	-656,	-285},
    {	0,	26,	-59},
    {	39,	-36,	-16},
    {	8,	-7,	-3},
    {	5,	-5,	-2},
    {	4,	-4,	-2},
    {	0,	1,	-3},
    {	-2,	2,	1},
    {	2,	-2,	-1},
    {	0,	1,	-2},
    {	-1,	1,	1},
    {	-1,	1,	0},
    {	1,	-1,	0},
    {	1,	-1,	0},
    {	-1,	1,	0},
    {	1,	0,	0},
    {	0,	0,	-1}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      UnitVal AUperDay(1e-8,"AU/d");
      factor = AUperDay.getFac();
      Int i,j;
      for (i=0; i<17; i++) {
        argArray[i].resize(3);
        for (j=0; j<3; j++) {
          argArray[i](j) = MEARTHABER[i][j] * factor;
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 17, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::AberETerm(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> termArray[2];
  static const Double TERM[2][3] = {
    {-1.62557,	-0.31919,	-0.13843},
    {+1.245,		-1.580,		-0.659}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i;
      for (i=0; i<2; i++) {
        termArray[i].resize(3);
      } 
      for (i=0; i<3; i++) {
        termArray[0](i) = TERM[0][i] * 1e-6;
      }
      for (i=0; i<3; i++) {
        termArray[1](i) = TERM[1][i] * 1e-3;
      }
      needInit = False;
    }
  }
  DebugAssert(which < 2, AipsError);
  return termArray[which];
}

// Diurnal Aberration factor
Double MeasTable::diurnalAber(Double radius, Double T) {
  ///  static Double res;
  ///  res = C::_2pi * radius / MeasData::SECinDAY *
  ///    MeasTable::UTtoST(T)/C::c;
  ///  return res;
  return C::_2pi * radius / MeasData::SECinDAY *
    MeasTable::UTtoST(T)/C::c;
}

// LSR velocity (kinematical)
const Vector<Double> &MeasTable::velocityLSRK(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[2];
  static const Double LSR[2][3] = {
    {0.0145021, -0.865863, 0.500071},
    {0.00724658, -0.865985, 0.500018}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Double v = 20.0*1000.;
      for (Int i=0; i<2; i++) {
        argArray[i].resize(3);
        for (Int j=0; j<3; j++) {
          argArray[i](j) = v * LSR[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 2, AipsError);
  return argArray[which];
}

// LSR velocity (dynamical)
const Vector<Double> &MeasTable::velocityLSR(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[2];
  static const Double LSR[2][3] = {
    {-0.0385568, -0.881138, 0.471285},
    {-0.0461164, -0.880664, 0.471491}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Double v = sqrt(81.+144.+49.)*1000.;
      for (Int i=0; i<2; i++) {
        argArray[i].resize(3);
        for (Int j=0; j<3; j++) {
          argArray[i](j) = v * LSR[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 2, AipsError);
  return argArray[which];
}

// LSR velocity wrt galactic centre
const Vector<Double> &MeasTable::velocityLSRGal(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[2];
  static const Double LSR[2][3] = {
    {0.494109, -0.44483, 0.746982},
    {0.492728, -0.450347, 0.744585}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Double v = 220.*1000.;
      for (Int i=0; i<2; i++) {
        argArray[i].resize(3);
        for (Int j=0; j<3; j++) {
          argArray[i](j) = v * LSR[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 2, AipsError);
  return argArray[which];
}

// LGROUP velocity wrt bary center
const Vector<Double> &MeasTable::velocityLGROUP(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[2];
  static const Double LGROUP[2][3] = {
    {0.593553979227, -0.177954636914, 0.784873124106}, 
    {0.5953342407,   -0.184600136022, 0.781984610866} 
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Double v = 308.*1000.;
      for (Int i=0; i<2; i++) {
        argArray[i].resize(3);
        for (Int j=0; j<3; j++) {
          argArray[i](j) = v * LGROUP[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 2, AipsError);
  return argArray[which];
}

// CMB velocity wrt bary center
const Vector<Double> &MeasTable::velocityCMB(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Double> argArray[2];
  static const Double CMB[2][3] = {
    {-0.97176985257,  0.202393953108, -0.121243727187},
    {-0.970024232022, 0.213247954272, -0.11652595972}
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Double v = 369.5*1000.;
      for (Int i=0; i<2; i++) {
        argArray[i].resize(3);
        for (Int j=0; j<3; j++) {
          argArray[i](j) = v * CMB[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 2, AipsError);
  return argArray[which];
}

// Earth and Sun position
const Polynomial<Double> &MeasTable::posArg(uInt which) { 
  static volatile Bool needInit = True;
  static Polynomial<Double> polyArray[12];
  static const Double POSFUND[12][2] = {
    {252.25,	149472.67},			//Q
    {181.9798,	 58517.8157},			//V
    {100.46644851,	 35999.37285186},		//E
    {355.43327,	 19140.29933},			//M
    { 34.351484,	  3034.905675},			//J
    { 50.077471,	  1222.113794},			//S
    {314.055005,	   428.466998},			//U
    {304.348665,	   218.486200},			//N
    {238.47,	   145.28},			//P
    {297.850206,	445267.111519},			//D
    { 93.27210,	483202.01753},			//F
    {134.9634,	477198.8676}			//l
  };
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<12; i++) {
        polyArray[i] = Polynomial<Double>(1);
        for (j=0; j<2; j++) {
          polyArray[i].setCoefficient(j,
                                      POSFUND[i][j]*C::degree);
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 12, AipsError);
  return polyArray[which];
}

const Vector<Char> &MeasTable::mulPosEarthXYArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[189];
  static const Char POSXYARG[189][12] = {
    //X,Y(ecliptic) factors
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0},
    {0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -8,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -8,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  1, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -2,  0,  0,  0,  0,  0,  0,  0},	// 11
    {0,  0,  2,  0, -1,  0,  0,  0,  0,  0,  0,  0},
    {0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1, -2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 21
    {0,  8,-14,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  8,-12,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0, -1},
    {0,  0,  3, -2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0, -2,  0,  0,  0,  0,  0,  0,  0},	// 31
    {0,  3, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0, -2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  9,-16,  4,  5,  0,  0,  0,  0,  0,  0},
    {0,  0,  7,-16,  4,  5,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  1, -4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1, -3,  0,  0,  0,  0,  0,  0,  0,  0},	// 41
    {0,  4, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  1},
    {0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0, -1,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0, -3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -3,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -8,  4,  0,  0,  0,  0,  0,  0,  0,  0},	// 51
    {0,  3, -6,  4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -5,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  4, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -6,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0, -1,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -2,  5,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0, -1,  0,  1},
    {0,  0,  1,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  7,-15,  0,  0,  0,  0,  0,  0,  0,  0},	// 61
    {0,  0,  2, -1,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -3,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  9,-15,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  4, -7,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0, -3,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -9,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -5,  0,  0,  0,  0,  0,  0,  0,  0},	// 71
    {0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0},
    {0,  5, -7,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0, 11,-19,  0,  3,  0,  0,  0,  0,  0,  0},
    {0,  0,  9,-19,  0,  3,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -4,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -5,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -7,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -6,  0,  0,  0,  0,  0,  0,  0,  0},	// 81
    {0,  0,  2, -8,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  6, -8,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0, -1,  0,  0},
    {0,  8,-13,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0, -1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -7,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -6,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -6,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0, -4,  0,  0,  0,  0,  0,  0,  0},	// 91
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  3,  0, -1},
    {0,  6, -7,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -7,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -8,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -9,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  1, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 101
    {0,  0,  2,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  6, -9,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -3,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -8,  1,  5,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -8,  1,  5,  0,  0,  0,  0,  0,  0},
    {0,  4, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  5,-11,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  6,-13,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 111
    {0,  3, -6,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -9,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  8,-13,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -4,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0, -4,  0,  0,  0,  0,  0,  0,  0},
    {0,  7, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  7,-11,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -6,  2,  0,  0,  0,  0,  0,  0,  0},	// 121
    {0,  0,  2, -6,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -5,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0},
    {0,  4, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  6, -8,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  8,-15,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0,  0, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -8,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0, 10,-17,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4,  0, -3,  0,  0,  0,  0,  0,  0,  0},	// 131
    {0,  0,  0,  0,  1, -5,  0,  0,  0,  0,  0,  0},
    {0,  6,-11,  0,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  6, -9,  0,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  8,-17,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  8,-15,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0,  0},
    {0,  6, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {1,  0, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4,  0, -2,  0,  0,  0,  0,  0,  0,  0},	// 141
    {0,  0,  5,-10,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  6,-11,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -2,  2,  0,  0,  0,  0,  0,  0},
    {1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  4, -2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -7, -4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -5, -4,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  1, -2,  0},
    {0,  0,  1,  0, -4,  5,  0,  0,  0,  0,  0,  0},	// 151
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  3,  0,  0},
    {0,  0,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0},
    {1,  0, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {1,  0, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  2, -2,  0,  0,  0,  0,  0,  0},
    {0,  6,-10,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -1,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  1, -2,  0,  0,  0,  0,  0,  0},
    {0,  8, -9,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 161
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0},
    {0,  0,  6, -7,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0,  0,  0,  0,  0,  1,  0,  0},
    {0,  0,  1,  0, -3,  5,  0,  0,  0,  0,  0,  0},
    {0,  0,  7,-13,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  3, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -8,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  6, -9,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -5,  0,  0,  0,  0,  0,  0,  0},	// 171
    {0,  3, -7,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  2,  0, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -2,  0,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  5, -8,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  3, -8,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 181
    {0,  8,-14,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  8,-12,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  3, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<189; i++) {
        argArray[i].resize(12);
        for (j=0; j<12; j++) {
          argArray[i](j) = POSXYARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 189, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulPosEarthZArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[32];
  static const Char POSZARG[32][12] = {
    //Z(ecliptic) factors
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0},
    {0,  3, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0, -2,  0,  0,  0,  0,  0,  0,  0},
    {0,  1, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0, -2,  0,  0,  0,  0,  0,  0},
    {0,  4, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 11
    {0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -1,  0},
    {0,  0,  1,  0, -3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  0},
    {0,  0,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -7,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1},
    {0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 21
    {0,  3, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  2, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  8,-12,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  5, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 31
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<32; i++) {
        argArray[i].resize(12);
        for (j=0; j<12; j++) {
          argArray[i](j) = POSZARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 32, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulPosSunXYArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[98];
  static const Char POSXYARG[98][12] = {
    //X,Y(ecliptic) factors
    {0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -6,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0,  0},	// 11
    {0,  0,  0,  0,  1, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1, -3,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0},
    {0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0},
    {0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 21
    {0,  0,  0,  0,  1, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0},
    {0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1, -2,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -7,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0},	// 31
    {0,  0,  0,  0,  2, -1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  3, -2,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  2, -3,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1, -3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0},	// 41
    {0,  0,  0,  0,  0,  0,  2, -5,  0,  0,  0,  0},
    {0,  0,  0,  0,  4,-11,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1, -4,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  3, -4,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  2, -4,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1, -4,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -7,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -5,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0},	// 51
    {0,  0,  0,  0,  1, -4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  5,-10,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -6,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -6,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4, -9,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3,-10,  0,  0,  0,  0,  0,  0},	// 61
    {0,  0,  0,  0,  4, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4,-10,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  5, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4, -4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4,-12,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  3, -3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  4,-10,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -8,  0,  0,  0,  0,  0,  0},	// 71
    {0,  0,  0,  0,  3, -7,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -8,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -6,  2,  0,  0,  0,  0,  0},
    {1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  2, -1,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -6,  4,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  4, -2,  0,  0,  0,  0},
    {0,  0,  0,  0,  5,-11,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3,-11,  3,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0},	// 81
    {0,  0,  0,  0,  0,  0,  4, -4,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -6,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -5,  0,  0,  0,  0,  0,  0},	// 91
    {0,  0,  0,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -7,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<98; i++) {
        argArray[i].resize(12);
        for (j=0; j<12; j++) {
          argArray[i](j) = POSXYARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 98, AipsError);
  return argArray[which];
}

const Vector<Char> &MeasTable::mulPosSunZArg(uInt which) {
  static volatile Bool needInit = True;
  static Vector<Char> argArray[29];
  static const Char POSZARG[29][12] = {
    //Z(ecliptic) factors
    {0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -4,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -6,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  3, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -5,  0,  0,  0,  0,  0,  0},	// 11
    {0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  1, -3,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -5,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -3,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0},
    {0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},	// 12
    {0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0},
    {0,  0,  0,  0,  1, -2,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  2, -7,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Int i,j;
      for (i=0; i<29; i++) {
        argArray[i].resize(12);
        for (j=0; j<12; j++) {
          argArray[i](j) = POSZARG[i][j];
        }
      }
      needInit = False;
    }
  }
  DebugAssert(which < 29, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulPosEarthXY(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[189];
  static Double factor = 0;
  static Double fac1 = 0;
  static const Double MPOSXY[189][4] = {
    // X,Y Heliocentric Earth, ecliptic
    { 90.00087234,	.9998292882e10,	359.99912749,	.9998921102e10},
    { 90.00000000,	  56114420,	270.0000000,	 244269903},
    {347.0626587,	  83525730,	257.0614968,	  83529232},
    {244.12566,	   1046663,	154.12489,	   1046697},
    { 90.0000,	    311084,	  0.0000,	    311084},
    { 89.0578,	    255249,	359.3759,	    257033},
    { 90.0271,	    213728,	179.9916,	    214746},
    {196.7828,	    168118,	106.7816,	    168129},
    { 16.7819,	    167995,	106.7836,	    168006},
    {269.9806,	    144524,	  0.0522,	    144026},
    {269.6489,	109101,	  0.3652,	113511},	// 11
    {271.4276,	 93443,	181.4222,	 93454},
    { 89.9756,	 89914,	  0.0162,	 90056},
    { 90.8784,	 73446,	179.5547,	 74492},
    {  0.8110,	 68144,	 90.8196,	 68133},
    { 98.7707,	 68441,	  9.3357,	 63930},
    {263.7081,	 61124,	173.6982,	 61135},
    {144.633,	 56652,	 54.610,	 56711},
    {270.242,	 54701,	180.200,	 54635},
    {  1.314,	 54095,	 91.322,	 54125},
    {180.963,	52049,	 91.427,	50708},		// 21
    {327.392,	45226,	 57.394,	45229},
    {228.731,	45184,	139.361,	45042},
    {147.393,	44981,	 57.415,	45025},
    {130.279,	40626,	 40.291,	40632},
    {151.268,	 7729,	172.890,	55138},
    {269.997,	25618,	180.003,	25613},
    {269.273,	25582,	179.260,	25583},
    { 75.848,	22789,	165.848,	22791},
    {280.086,	22588,	 10.214,	22779},
    {215.722,	21496,	126.916,	21950},		// 31
    {180.759,	20902,	 90.897,	20623},
    { 90.619,	19997,	  0.625,	20002},
    {162.681,	18226,	 72.680,	18227},
    {342.679,	18226,	 72.681,	18227},
    { 61.086,	17811,	150.582,	17925},
    {214.749,	16119,	118.365,	14976},
    {141.189,	15545,	 51.188,	15545},
    { 89.725,	15170,	359.704,	15278},
    { 32.362,	12894,	122.345,	12898},
    { 60.693,	12810,	150.613,	12823},		// 41
    { 95.556,	 6774,	176.881,	11874},
    { 90.000,	 8587,	  0.000,	 8587},
    { 89.374,	 8296,	359.942,	 8349},
    {182.488,	 7920,	 92.452,	 8073},
    {255.788,	 9449,	 23.725,	 5809},
    {240.578,	 7780,	151.084,	7841},
    {177.781,	 7560,	 87.769,	 7562},
    {141.375,	 7348,	 51.367,	 7352},
    {239.074,	 6535,	149.568,	 6569},
    {237.645,	 6324,	327.648,	6324},		// 51
    { 57.641,	 6298,	327.645,	6297},
    {156.246,	 6213,	243.587,	6363},
    { 31.449,	 6004,	121.422,	6008},
    {182.297,	 5734,	271.031,	6113},
    { 31.69,	 5371,	121.63,		5375},
    {270.56,	 5131,	180.56,		5130},
    {243.06,	 5109,	153.05,		5110},
    {269.99,	 5065,	180.01,		5063},
    {117.64,	 5049,	 27.28,		5064},
    {246.74,	4962,	336.74,	4962},		// 61
    {270.52,	4896,	180.48,	4893},
    {270.98,	4727,	358.98,	4934},
    {257.23,	4811,	347.17,	4842},
    { 67.00,	4808,	336.61,	4791},
    { 75.42,	4735,	165.45,	4734},
    {270.82,	4757,	359.00,	3972},
    {100.50,	4339,	  9.99,	4214},
    { 86.90,	5232,	186.38,	2571},
    {161.82,	3954,	251.82,	3955},
    {215.93,	4114,	116.98,	3753},		// 71
    {164.09,	3799,	 74.07,	3795},
    {327.42,	2048,	258.18,	4839},
    {271.81,	3688,	181.44,	3638},
    {341.29,	3612,	251.28,	3612},
    {161.29,	3611,	251.28,	3612},
    {290.01,	3255,	 20.06,	3260},
    {238.87,	3256,	332.92,	3114},
    {  2.39,	3034,	 92.35,	3035},
    { 54.87,	3248,	350.61,	2674},
    {193.66,	3255,	 78.16,	2484},		// 81
    {119.77,	2807,	209.76,	2807},
    { 95.54,	2772,	  5.54,	2773},
    {269.94,	2611,	180.06,	2600},
    { 65.10,	2493,	155.06,	2504},
    {177.63,	2325,	 87.61,	2323},
    {336.33,	2164,	246.33,	2164},
    {188.68,	2286,	 85.72,	2001},
    {213.94,	2187,	117.66,	2051},
    {  3.91,	2106,	 93.92,	2107},
    {273.05,	2169,	 19.52,	1751},		// 91
    { 90.00,	1888,	  0.00,	1888},
    { 89.73,	1922,	180.34,	1800},
    {210.03,	1857,	303.56,	1786},
    {  2.52,	1791,	 92.58,	1790},
    {333.37,	1711,	 63.34,	1711},
    {346.35,	1505,	256.42,	1508},
    {168.39,	1438,	 78.35,	1436},
    {266.20,	1433,	176.17,	1433},
    { 59.17,	1428,	330.85,	1410},
    {306.36,	1391,	 36.18,	1383},		// 101
    {152.50,	1361,	 62.47,	1360},
    {195.97,	1325,	105.86,	1337},
    {159.31,	1384,	 57.19,	1221},
    { 95.48,	1242,	  5.63,	1244},
    {  9.14,	1192,	 99.16,	1192},
    {189.20,	1192,	 99.18,	1192},
    {  3.28,	1113,	272.48,	1256},
    {304.43,	1160,	 34.43,	1161},
    {275.54,	1160,	  5.55,	1160},
    {102.72,	1099,	192.84,	1098},		// 111
    {268.97,	1051,	358.97,	1050},
    {181.30,	1053,	274.16,	1021},
    { 97.55,	1050,	  3.85,	1012},
    { 88.97,	 985,	358.97,	 985},
    {207.30,	 259,	  8.96,	1355},
    { 89.87,	 980,	180.15,	 954},
    {128.65,	 994,	 30.32,	 912},
    {305.27,	 905,	215.06,	 902},
    {  4.49,	 915,	 91.47,	 860},
    {241.17,	886,	151.21,	887},		// 121
    { 61.20,	861,	151.20,	861},
    { 66.00,	853,	333.65,	830},
    {133.29,	790,	 43.29,	790},
    {270.16,	780,	178.88,	747},
    {189.53,	823,	 83.47,	698},
    { 70.27,	755,	160.31,	756},
    { 90.04,	753,	  0.18,	753},
    {175.69,	906,	 24.30,	534},
    { 38.25,	746,	307.34,	738},
    { 79.50,	743,	349.79, 741},		// 131
    {100.84,	726,	190.47,	732},
    { 23.06,	720,	113.06,	720},
    {203.09,	715,	113.08,	714},
    {217.94,	701,	307.96,	702},
    {278.31,	693,	186.68,	692},
    { 94.95,	696,	186.28,	686},
    {269.39,	655,	  0.69,	698},
    {193.70,	403,	266.57,	855},
    {300.05,	665,	 30.03, 666},
    {344.58,	641,	254.72,	639},		// 141
    {333.46,	637,	 63.56,	636},
    {276.48,	623,	  7.36,	649},
    {152.71,	637,	144.59,	625},
    { 87.41,	640,	  4.96,	620},
    { 89.57,	626,	  0.36,	633},
    {167.54,	622,	 77.49,	623},
    { 99.41,	621,	189.40,	621},
    {279.42,	620,	189.41,	621},
    { 90.00,	620,	  0.00,	620},
    { 77.23,	634,	174.53,	605},		// 151
    { 90.00,	616,	  0.00,	616},
    { 52.74,	614,	322.76,	615},
    { 73.20,	581,	343.28,	582},
    {229.31,	575,	318.52,	584},
    {101.4,		435,	 41.26,	686},
    {268.9,		571,	178.9,	571},
    {162.3,		572,	252.7,	559},
    { 95.8,		542,	  5.8,	542},
    {265.2,		540,	174.8,	540},
    { 89.9,		535,	180.1,	528},	// 161
    {194.0,		499,	101.9,	539},
    { 29.8,		474,	310.0,	538},
    {167.1,		486,	 77.1,	486},
    {  4.2,		480,	275.8,	484},
    {123.8,		464,	215.4,	456},
    {354.9,		437,	264.9,	437},
    {335.8,		425,	 65.8,	425},
    {263.4,		307,	345.9,	501},
    { 78.2,		412,	348.2,	412},
    {299.7,		406,	 29.8,	407},	// 171
    {178.9,		402,	268.9,	402},
    { 56.2,	      	402,	326.2,	402},
    {303.9,		399,	213.8,	400},
    { 90.00000,	1234019,	 90.00000,	930472},    // 175: (T terms)
    {232.9938,	 515000,	142.9903,	515065},
    {130.051,	  12907,	 40.049,	 12908},
    {105.014,	  10686,	323.41,		  4646},
    {271.93,	   1999,	181.93,		  1999},
    { 91.93,	   1997,	181.93,		  1997},
    {107.16,	620,	197.23,	620},		// 181
    {182.69,	599,	272.68,	599},
    {  2.66,	596,	272.70,	596},
    {107.6,		486,	197.8,	488},
    {288.1,		461,	197.2,	464},
    { 46.3,		427,	316.4,	426},
    {270.00,	4147,	 90.00,	5032},    	// 187: (T^2 terms)
    {140.87,	2164,	 50.89,	2166},
    {  1.41,	 996,	255.23,	1021}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      factor = 1e-10;
      fac1 = C::degree;
      for (Int i=0; i<189; i++) {
        argArray[i].resize(8);
        argArray[i](0) = MPOSXY[i][0] * fac1;
        argArray[i](2) = MPOSXY[i][2] * fac1;
        argArray[i](1) = MPOSXY[i][1] * factor;
        argArray[i](3) = MPOSXY[i][3] * factor;
        for (Int j=4; j<8; j++) {
          argArray[i](j) = 0;
        }
      }
      needInit = False;
    }
  }
  if (checkT != T) {
    checkT = T;
    Int i;
    for (i=174; i<189; i++) { // get fundamental argument coefficients
      argArray[i](1) = MPOSXY[i][1] * factor * T;
      argArray[i](3) = MPOSXY[i][3] * factor * T;
      argArray[i](5) = MPOSXY[i][1] * factor;
      argArray[i](7) = MPOSXY[i][3] * factor;
    }
    for (i=186; i<189; i++) { // get fundamental argument coefficients
      argArray[i](1) *= T;
      argArray[i](3) *= T;
      argArray[i](5) *= 2*T;
      argArray[i](7) *= 2*T;
    }
  }
  DebugAssert(which < 189, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulPosEarthZ(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[32];
  static Double factor = 0;
  static Double fac1 = 0;
  static const Double MPOSZ[32][2] = {
    //Z factors(ecliptic, helio Earth)
    {180.000,	27962},
    {256.611,	10164},
    {280.555,	 8046},
    {256.72,	 4386},
    {256.62,	 3187},
    {  0.00,	 2272},
    {275.12,	 1816},
    {293.93,	 1640},
    { 76.55,	 1447},
    {103.42,	 1431},
    {103.26,	1121},			// 11
    { 74.37,	1090},
    {180.00,	1036},
    {291.79,	 972},
    {180.19,	 914},
    {278.89,	 880},
    {169.36,	 834},
    {180.00,	 770},
    {263.31,	 720},
    { 59.06,	 692},
    {180.5,	526},			// 21
    {103.2,	520},
    {344.8,	503},
    {280.6,	475},
    {333.7,	453},
    {162.3,	429},
    {353.9,	406},
    { 76.2,	402},
    {185.12558,	2278227},		// 29: (T terms)
    { 90.000,	  54293},
    { 82.189,	  19032},		// 31
    {284.741,	   9722}		// 32: (T^2 terms)
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      factor = 1e-10;
      fac1 = C::degree;
      Int i;
      for (i=0; i<32; i++) {
        argArray[i].resize(4);
        argArray[i](0) = MPOSZ[i][0] * fac1;
        argArray[i](1) = MPOSZ[i][1] * factor;
        argArray[i](2) = 0;
        argArray[i](3) = 0;
      }
      needInit = False;
    }
  }
  if (checkT != T) {
    checkT = T;
    Int i;
    for (i=28; i<32; i++) { // get fundamental argument coefficients
      argArray[i](1) = MPOSZ[i][1] * factor * T;
      argArray[i](3) = MPOSZ[i][1] * factor;
    }
    for (i=31; i<32; i++) { // get fundamental argument coefficients
      argArray[i](1) *= T;
      argArray[i](3) *= 2*T;
    }
  }
  DebugAssert(which < 189, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulPosSunXY(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[98];
  static Double factor = 0;
  static Double fac1 = 0;
  static const Double MPOSXY[98][4] = {
    // XY, Sun(eclip)  
    { 89.996243,	49567508,	  0.007122,	49553856},
    { 90.023036,	27184119,	359.978260,	27222470},
    { 90.013001,	15543566,	359.986984,	15544429},
    { 89.998760,	 8346116,	359.994071,	 8342410},
    {270.00000,	 2938943,	270.00000,	 3386226},
    { 75.67877,	 1201314,	345.68424,	 1201189},
    {355.57060,	  757834,	265.52664,	  758691},
    { 99.6017,	  194166,	  8.6359,	  196403},
    {276.7769,	  193296,	186.7746,	  193244},
    {278.7363,	  188909,	  8.7801,	  189177},
    {279.0072,	143422,	189.2057,	143684},	// 11
    { 98.7637,	140637,	188.7514,	140598},
    { 65.8075,	118366,	335.7846,	118334},
    { 86.7821,	 81367,	356.7759,	 81306},
    {266.7770,	 76708,	356.8019,	 76713},
    {266.5938,	 62227,	176.6625,	 62623},
    { 61.365,	 43663,	331.368,	 43663},
    {156.244,	 37923,	247.016,	 38293},
    {344.302,	 31543,	251.387,	 31756},
    {262.697,	 30883,	172.654,	 30923},
    { 90.000,	30399,	  0.000,	30401},		// 21
    {103.163,	27884,	193.183,	28740},
    {278.234,	22716,	352.523,	26991},
    {258.215,	21619,	167.571,	21346},
    { 89.978,	17674,	  0.022,	17702},
    { 89.962,	13472,	179.980,	13750},
    { 80.376,	11698,	350.371,	11275},
    { 88.031,	10909,	358.047,	10900},
    { 12.883,	10542,	102.926,	10555},
    {196.373,	 9798,	106.615,	 9800},
    { 66.707,	6958,	336.709,	6959},		// 31
    {267.217,	6612,	177.247,	6607},
    {268.524,	6295,	178.506,	6287},
    { 89.718,	6288,	359.697,	6285},
    { 32.99,	5688,	302.71,		5664},
    { 90.03,	4897,	359.97,		4891},
    { 97.86,	3784,	  8.61,		3476},
    {200.32,	3055,	290.29,		3024},
    {206.86,	3104,	 79.86,		2759},
    { 90.39,	2829,	359.63,		2926},
    {280.03,	2862,	190.03,	2862},			// 41
    {280.50,	2858,	 10.52,	2858},
    {107.89,	2378,	197.94,	2382},
    {  9.32,	2317,	 99.33,	2316},
    {280.92,	2264,	190.71,	2336},
    {273.69,	2236,	  3.69,	2218},
    { 86.85,	2188,	176.81,	2187},
    { 98.81,	2003,	188.93,	2005},
    {279.68,	1968,	189.63,	1969},
    { 11.17,	1908,	279.02,	1855},
    { 47.07,	1881,	317.07,	1881},			// 51
    {260.37,	1832,	350.33,	1832},
    {346.50,	1729,	257.13,	1742},
    {174.63,	1637,	 84.58,	1638},
    {153.30,	1658,	 68.45,	1555},
    {127.97,	1574,	 38.01,	1569},
    {108.53,	1549,	 18.95,	1555},
    {278.95,	1159,	  8.95,	1159},
    { 98.80,	1144,	  8.74,	1143},
    {290.91,	1123,	197.58,	1160},
    {288.14,	1083,	 18.12,	1083},			// 61
    { 74.74,	 832,	344.74,	 832},
    { 62.37,	 792,	332.33,	 791},
    {346.10,	 749,	 77.01,	 757},
    {176.20,	 738,	 86.29,	 738},
    {204.53,	 723,	115.05,	 724},
    {309.70,	 718,	 39.74,	 720},
    {122.93,	 712,	 32.92,	 715},
    {130.84,	 701,	 40.48,	 703},
    {299.69,	 695,	209.57,	 696},
    {315.60,	687,	 45.65,	690},			// 71
    {101.30,	640,	185.30,	704},
    {105.72,	660,	195.76,	661},
    {281.71,	622,	 11.40,	630},
    { 89.65,	622,	  0.34,	629},
    {271.69,	609,	181.66,	608},
    {101.35,	585,	 11.31,	586},
    { 88.9,		516,	358.9,	516},
    {310.2,		507,	220.2,	508},
    {130.4,		498,	220.4,	497},
    {351.2,		472,	261.2,	472},		// 81
    {274.9,		458,	184.9,	455},
    {251.9,		435,	161.9,	436},
    {165.0,		428,	 75.5,	442},
    { 90.000,	12965,	270.000,	  63},		// 85: (T terms)
    {234.527,	 8975,	144.488,	8989},
    {196.650,	 7770,	106.330,	7815},
    { 16.208,	 7537,	106.256,	7550},
    { 27.402,	 6060,	297.410,	6056},
    { 16.47,	 5726,	286.565,	5733},
    {196.27,	5615,	286.26,	5613},			// 91
    {252.66,	1011,	344.13,	1029},
    { 86.80,	 875,	356.72,	 873},
    {140.69,	 726,	 50.67,	 727},
    {115.80,	 537,	205.8,	 538},
    {103.44,	 574,	343.3,	 473},
    { 13.1,	 	441,	283.1,	 440},
    {291.2,	 	321,	165.5,	 446}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      factor = 1e-10;
      fac1 = C::degree;
      for (Int i=0; i<98; i++) {
        argArray[i].resize(8);
        argArray[i](0) = MPOSXY[i][0] * fac1;
        argArray[i](2) = MPOSXY[i][2] * fac1;
        argArray[i](1) = MPOSXY[i][1] * factor;
        argArray[i](3) = MPOSXY[i][3] * factor;
        for (Int j=4; j<8; j++) {
          argArray[i](j) = 0;
        }
      }
      needInit = False;
    }
  }
  if (checkT != T) {
    checkT = T;
    for (Int i=84; i<98; i++) { // get fundamental argument coefficients
      argArray[i](1) = MPOSXY[i][1] * factor * T;
      argArray[i](3) = MPOSXY[i][3] * factor * T;
      argArray[i](5) = MPOSXY[i][1] * factor;
      argArray[i](7) = MPOSXY[i][3] * factor;
    }
  }
  DebugAssert(which < 98, AipsError);
  return argArray[which];
}

const Vector<Double> &MeasTable::mulPosSunZ(uInt which, Double T) {
  static volatile Bool needInit = True;
  static Double checkT = -1e30;
  static Vector<Double> argArray[29];
  static Double factor = 0;
  static Double fac1 = 0;
  static const Double MPOSZ[29][2] = {
    // Z Sun(eclip)
    {246.32367,	1181234},
    {259.53511,	1127775},
    {228.2177,	 480205},
    { 90.0000,	 114995},
    {285.8981,	 112657},
    {152.407,	  32986},
    {245.217,	  27333},
    {254.184,	   9425},
    {122.335,	   8186},
    { 83.42,	   4079},
    {288.63,	3169},			// 11
    {112.58,	2595},
    {224.87,	2453},
    {127.99,	2329},
    {  3.20,	2180},
    {202.72,	1973},
    {295.15,	1452},
    { 59.99,	1358},
    {146.90,	1050},
    { 55.63,	1050},
    {283.32,	1047},			// 21
    {230.88,	 993},
    {249.34,	 872},
    {106.62,	 800},
    {114.3, 	 544},
    {216.2, 	 461},
    {323.28,	5444},			// 27: (T terms)
    {143.14,	3882},
    {270.00,	1334}
  };
  
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      factor = 1e-10;
      fac1 = C::degree;
      for (Int i=0; i<29; i++) {
        argArray[i].resize(4);
        argArray[i](0) = MPOSZ[i][0] * fac1;
        argArray[i](1) = MPOSZ[i][1] * factor;
        argArray[i](2) = 0;
        argArray[i](3) = 0;
      }
      needInit = False;
    }
  }
  if (checkT != T) {
    checkT = T;
    Int i;
    for (i=26; i<29; i++) { // get fundamental argument coefficients
      argArray[i](1) = MPOSZ[i][1] * factor * T;
      argArray[i](3) = MPOSZ[i][1] * factor;
    }
  }
  DebugAssert(which < 29, AipsError);
  return argArray[which];
}

const RotMatrix &MeasTable::posToRect() {
  static volatile Bool needInit = True;
  static RotMatrix rot;
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Euler ang(+84381.4091 * C::arcsec, 1, -0.0930 * C::arcsec, 3);
      rot = RotMatrix(ang);
      needInit = False;
    }
  }
  return rot;
}

const RotMatrix &MeasTable::rectToPos() {
  static volatile Bool needInit = True;
  static RotMatrix rot;
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      rot = MeasTable::posToRect();
      rot.transpose();
      needInit = False;
    }
  }
  return rot;
}

const RotMatrix &MeasTable::galToSupergal() {
  static volatile Bool needInit = True;
  static RotMatrix rot;
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Euler ang( -90*C::degree, 3, -83.68*C::degree, 2, -47.37*C::degree, 3);
      rot = RotMatrix(ang);
      needInit = False;
    }
  }
  return rot;
}

const RotMatrix &MeasTable::ICRSToJ2000() {
  static volatile Bool needInit = True;
  static RotMatrix rot;
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      rot = MeasTable::frameBias00();
      rot.transpose();
      needInit = False;;
    }
  }
  return rot;
}

// Position related routines
Double MeasTable::WGS84(uInt which) {
  static const Double data[2] = {
    6378137,	298.257223563};
  
  DebugAssert(which < 2, AipsError);
  return data[which];
}

// Polar motion related routines
const Euler &MeasTable::polarMotion(Double ut) {
  static Bool msgDone = False;
  static Euler res(0.0, 2, 0.0, 1, 0.0, 3);
  static Double checkT = -1e6;
  if ( !nearAbs(ut, checkT, 0.04)) {
    checkT = ut;
    if (!MeasIERS::get(res(0), MeasIERS::MEASURED, MeasIERS::X,
		       ut) ||
	!MeasIERS::get(res(1), MeasIERS::MEASURED, MeasIERS::Y,
		       ut)) {
      if (!msgDone) {
	msgDone = True;
	LogIO os(LogOrigin("MeasTable",
			   String("PolarMotion(Double)"),
			   WHERE));
	os << LogIO::NORMAL3 << 
	  String("High precision polar motion information not available.") <<
	  LogIO::POST;
      }
    }
    res(0) *= -C::arcsec;
    res(1) *= -C::arcsec;
  }
  return res;
}

// Time functions
Double MeasTable::dUTC(Double utc) {
  static volatile Bool needInit = True;
  static Int N = 0;
  static Double (*LEAP)[4];
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      Table t;
      ROTableRow row;
      TableRecord kws;
      String rfn[4] = {"MJD", "dUTC", "Offset", "Multiplier"};
      RORecordFieldPtr<Double> rfp[4];
      Double dt;
      String vs;
      if (!MeasIERS::getTable(t, kws, row, rfp, vs, dt, 4, rfn, "TAI_UTC",
			      "measures.tai_utc.directory",
			      "geodetic")) {
	LogIO os(LogOrigin("MeasTable",
			   String("dUTC(Double)"),
			   WHERE));
	os << "Cannot read leap second table TAI_UTC" << LogIO::EXCEPTION;
      }
      N = t.nrow();
      if (N < 35) {
	LogIO os(LogOrigin("MeasTable",
			   String("dUTC(Double)"),
			   WHERE));
	os << "Leap second table TAI_UTC corrupted" << LogIO::EXCEPTION;
      }
      if (Time().modifiedJulianDay() - dt > 180) {
	LogIO os(LogOrigin("MeasTable",
			   String("dUTC(Double)"),
			   WHERE));
	os << LogIO::SEVERE <<
	  String("Leap second table TAI_UTC seems out-of-date. \n") +
	  "Until table is updated (see aips++ manager) times and coordinates\n" +
	  "derived from UTC could be wrong by 1s or more." << LogIO::POST;
      }
      LEAP = (Double (*)[4])(new Double[4*N]);
      for (Int i=0; i < N; i++) {
	row.get(i);
	for (Int j=0; j < 4; j++) {
	  LEAP[i][j] = *(rfp[j]);
	}
      }
      needInit = False;
    }
  }
  Double val(0);
  if (utc < LEAP[0][0]) {
    val = LEAP[0][1] + (utc - LEAP[0][2])*LEAP[0][3];
  } else {
    for (Int i = N-1; i >= 0; i--) {
      if (utc >= LEAP[i][0]) {
	val = LEAP[i][1];
	if (LEAP[i][3] != 0) {
	  val += (utc - LEAP[i][2])*LEAP[i][3];
	}
	break;
      }
    }
  }
  return val;
}

Double MeasTable::dTAI(Double) {
  return (32.184);
}

Double MeasTable::dTDT(Double ut1) {
  Double g = (357.53 + 0.9856003*(ut1-MeasData::MJD2000))*C::degree;
  return (0.001658*sin(g) + 0.000014*sin(2*g));
}

Double MeasTable::dTDB(Double tai) {
  return(1.550505e-8*86400*(tai-43144.0));
}

Double MeasTable::dTCG(Double tai) {
  return(6.969291e-10*86400*(tai-43144.0));
}

Double MeasTable::GMST0(Double ut1) {
  static volatile Bool needInit = True;
  static Polynomial<Double> stPoly(3);
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      stPoly.setCoefficient(0, 24110.54841);	
      stPoly.setCoefficient(1, 8640184.812866);
      stPoly.setCoefficient(2, 0.093104);	
      stPoly.setCoefficient(3, -6.2e-6);
      needInit = False;
    }
  }
  return (stPoly((ut1-MeasData::MJD2000)/MeasData::JDCEN));
}

Double MeasTable::GMST00(Double ut1, Double tt) {
  static volatile Bool needInit = True;
  static Polynomial<Double> stPoly(4);
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      stPoly.setCoefficient(0, 0.014506*C::arcsec);	
      stPoly.setCoefficient(1, 4612.15739966*C::arcsec+630.73514045148926);
      stPoly.setCoefficient(2, + 1.39667721*C::arcsec);	
      stPoly.setCoefficient(3, - 0.00009344*C::arcsec);
      stPoly.setCoefficient(4, + 0.00001882*C::arcsec);
      needInit = False;
    }
  }
  return (stPoly((tt-MeasData::MJD2000)/MeasData::JDCEN) +
	  MeasTable::ERA00(ut1));
}

Double MeasTable::ERA00(Double ut1) {
  static volatile Bool needInit = True;
  static Polynomial<Double> stPoly(1);
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      stPoly.setCoefficient(0, 0.7790572732640*C::_2pi);	
      stPoly.setCoefficient(1, 0.00273781191135448*C::_2pi);
      needInit = False;
    }
  }
  ut1 -= MeasData::MJD2000;
  return MVAngle(stPoly(ut1)+ C::_2pi*fmod(ut1, 1.0))(0.0).radian();
}

Double MeasTable::sprime00(Double tt) {
  return ((tt-MeasData::MJD2000)/MeasData::JDCEN * -47e-6 * C::arcsec);
}

Double MeasTable::GMUT0(Double gmst1) {
  static volatile Bool needInit = True;
  static Polynomial<Double> stPoly(3);
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      stPoly.setCoefficient(0, -0.65830845056254866847);
      stPoly.setCoefficient(1, -235.90946916710752);
      stPoly.setCoefficient(2, -0.00000252822553597972);
      stPoly.setCoefficient(3, 0.0000000001679);
      needInit = False;
    }
  }
  return (stPoly((gmst1-MeasData::MJD2000-6713.)/MeasData::JDCEN));
}

Double MeasTable::UTtoST(Double ut1) {
  static volatile Bool needInit = True;
  static Polynomial<Double> UTSTPoly(2);
  if (needInit) {
    ScopedMutexLock locker(theirMutex);
    if (needInit) {
      UTSTPoly.setCoefficient(0, 1.002737909350795);
      UTSTPoly.setCoefficient(1, +5.9006e-11);
      UTSTPoly.setCoefficient(2, -5.9e-15);	
      needInit = False;
    }
  }
  return(UTSTPoly((ut1-MeasData::MJD2000)/MeasData::JDCEN));
}

Double MeasTable::dUT1(Double utc) {
  static Bool msgDone = False;
  static Double res = 0;
  static Double checkT = -1e6;
  ScopedMutexLock locker(theirMutex);
  if ( !nearAbs(utc, checkT, 0.04)) {
    checkT = utc;
    if (!MeasIERS::get(res, MeasIERS::MEASURED, MeasIERS::dUT1,
		       utc)) {
      if (!msgDone) {
	msgDone = True;
	LogIO os(LogOrigin("MeasTable",
			   String("dUT1(Double)"),
			   WHERE));
	os << LogIO::NORMAL3 << 
	  String("High precision dUT1 information not available.") <<
	  LogIO::POST;
      }
    }
  }
  return res;
}

} //# NAMESPACE CASA - END

