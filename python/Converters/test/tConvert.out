Doing numpy/array test ...
VH Array<Short>
[-1 -2]
VH Array<Short>
[211 212]
>>>
VH Array<double>
<<<
(0,)
VH Array<String>
{'shape': [2, 2], 'array': ['abcd', 'c', '12', 'x12']}
    testarrvh
VH Array<Bool>
[ True False]
VH Bool
True
VH Array<Bool>
[ True]
VH Array<Bool>
[ True False]
bool 1
True
    testarrvh
VH Array<Short>
[-6 -7]
VH Int
-6
VH Array<Int>
[-6]
VH Array<Int>
[-6 -7]
Int -6
-6
Int64 -6
-6
ssize -6
-6
Float -6
-6.0
Complex (-6,0)
(-6+0j)
    testarrvh
VH Array<Short>
[5 6]
VH uInt
5
VH Array<Int>
[5]
VH Array<Int>
[5 6]
Int 5
5
Int64 5
5
ssize 5
5
Float 5
5.0
Complex (5,0)
(5+0j)
    testarrvh
VH Array<Short>
[-16 -17]
VH Int
-16
VH Array<Int>
[-16]
VH Array<Int>
[-16 -17]
Int -16
-16
Int64 -16
-16
ssize -16
-16
Float -16
-16.0
Complex (-16,0)
(-16+0j)
    testarrvh
VH Array<Int>
[15 16]
VH uInt
15
VH Array<Int>
[15]
VH Array<Int>
[15 16]
Int 15
15
Int64 15
15
ssize 15
15
Float 15
15.0
Complex (15,0)
(15+0j)
    testarrvh
VH Array<Int>
[-26 -27]
VH Int
-26
VH Array<Int>
[-26]
VH Array<Int>
[-26 -27]
Int -26
-26
Int64 -26
-26
ssize -26
-26
Float -26
-26.0
Complex (-26,0)
(-26+0j)
    testarrvh
VH Array<uInt>
[25 26]
VH uInt
25
VH Array<Int>
[25]
VH Array<Int>
[25 26]
Int 25
25
Int64 25
25
ssize 25
25
Float 25
25.0
Complex (25,0)
(25+0j)
    testarrvh
VH Array<Int64>
[-36 -37]
VH Int64
-36
VH Array<Int64>
[-36]
VH Array<Int64>
[-36 -37]
Int -36
-36
Int64 -36
-36
ssize -36
-36
Float -36
-36.0
Complex (-36,0)
(-36+0j)
    testarrvh
VH Array<Int64>
[35 36]
VH Int64
35
VH Array<Int64>
[35]
VH Array<Int64>
[35 36]
Int 35
35
Int64 35
35
ssize 35
35
Float 35
35.0
Complex (35,0)
(35+0j)
    testarrvh
VH Array<float>
[-46. -47.]
VH float
-46.0
VH Array<double>
[-46.]
VH Array<double>
[-46. -47.]
Float -46
-46.0
Complex (-46,0)
(-46+0j)
    testarrvh
VH Array<double>
[ 45.  46.]
VH double
45.0
VH Array<double>
[ 45.]
VH Array<double>
[ 45.  46.]
Float 45
45.0
Complex (45,0)
(45+0j)
    testarrvh
VH Array<Complex>
[-56.-66.j -57.-67.j]
VH Complex
(-56-66j)
VH Array<DComplex>
[-56.-66.j]
VH Array<DComplex>
[-56.-66.j -57.-67.j]
Complex (-56,-66)
(-56-66j)
    testarrvh
VH Array<DComplex>
[-76.-86.j -77.-87.j]
VH DComplex
(-76-86j)
VH Array<DComplex>
[-76.-86.j]
VH Array<DComplex>
[-76.-86.j -77.-87.j]
Complex (-76,-86)
(-76-86j)

begin dotest
bool 1
True
bool 0
False
Int -1
-1
Int 10
10
Int64 -123456789013
-123456789013
Int64 123456789014
123456789014
ssize -2
-2
ssize 11
11
Float 3.14
3.1400001049
Float 12
12.0
String this is a string
this is a string
IPos [4, 3, 2]
[2, 3, 4]
IPos [1]
[1]
IPos [2]
[2]
IPos [3]
[3]
VecBool [1, 0, 0, 1]
[True, False, False, True]
VecInt [1, 2, 3, 4]
[1, 2, 3, 4]
VecInt []
[]
VecInt [-1, -2, -3, -4]
[-1, -2, -3, -4]
VecInt [-10]
[-10]
VecInt [10, 11, 12]
[10, 11, 12]
VecInt [1]
[1]
VecComplex [(1,2), (-1,-3), (-1.5,2.5)]
[(1+2j), (-1-3j), (-1.5+2.5j)]
VecStr [a1, a2, b1, b2]
['a1', 'a2', 'b1', 'b2']
VecStr []
[]
VecStr [sc1]
['sc1']
vecbool [0,1]
[False, True]
vecuInt [1,2,4]
[1, 2, 4]
vecuInt []
[]
vecuInt [10]
[10]
vecvecuInt [[1,2,4]]
[[1, 2, 4]]
vecvecuInt []
[]
vecvecuInt []
[]
vecvecuInt [[1],[2],[4]]
[[1], [2], [4]]
vecvecuInt [[20]]
[[20]]
VH Bool
True
VH Int
2
VH Int64
1234567890123
VH double
1.3
VH DComplex
(10-11j)
VH String
str
VH Array<Bool>
[1]
VH Array<Int>
[ 2  4  6  8 10]
VH Array<double>
[ 1.3  4.   5.   6. ]
VH Array<DComplex>
[ 10.-11.j   1. +2.j]
VH Array<String>
['str1', 'str2']
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<DComplex>
(2,)
VH Array<DComplex>
[ 10.-11.j   1. +2.j]
[[2 3]
 [4 5]]
VH Array<Int>
[[2 3]
 [4 5]]
[3 5 7 9]
VH Array<Int>
[3 5 7 9]
[ 3.  5.  7.  9.]
VH Array<double>
[ 3.  5.  7.  9.]
VH Array<double>
[ 3.  5.  7.  9.]
VH Array<DComplex>
[ 20.+10.j]
VH Array<double>
[ 21.]
VH double
21.0
>>>
VH Array<double>
<<<
(0,)
>>>
VH Array<double>
<<<
(1, 0)
vecvh 3
[2, 1.3, array([ True, False], dtype=bool)]
Record int: Int 1
int64: Int64 123456789012
str: String "bc"
vecint: Int array with shape [3]
  [1, 2, 3]

>>>
{'int': 1, 'int64': 123456789012L, 'str': 'bc', 'vecint': array([1, 2, 3], dtype=int32)}
<<<
end dotest

