#!/bin/sh
#-----------------------------------------------------------------------------
# Script to test the GROUPBY and aggregate functionality of
# TableGram and TableParse class.  All files generated will
# be deleted on exit.
#=============================================================================

# If the first argument given to the script is 1, it will only create the
# tTableGramGroupAggr_tmp.tab tables and not execute the tTableGram commands.


# Set default testsrcdir if undefined.
if test "$testsrcdir" = ""; then
  testsrcdir=../../../../../casacore/tables/Tables/test
fi

# Use table tTable_2.data_v0 as the input by copying it (twice).
rm -rf tTableGramGroupAggr_tmp.tab*
mkdir tTableGramGroupAggr_tmp.tab
cp -r $testsrcdir/tTable_2.data_v0/table.* tTableGramGroupAggr_tmp.tab
chmod 644 tTableGramGroupAggr_tmp.tab/*
cp -r tTableGramGroupAggr_tmp.tab tTableGramGroupAggr_tmp.tabc

if test "$1" = 1; then
  exit 0;
fi


# Whitespace around * is not allowed to avoid file name expansion by shell.

# Execute all kind of groupby/aggregate commands.
echo "testing groupby/aggregate  ..."

# Create a symlink to achieve that casacore_memcheck (if used) will use
# that name 
rm -f tTableGramGroupAggr
ln -s tTableGram tTableGramGroupAggr

# Simple count of all rows.
$casa_checktool ./tTableGramGroupAggr 'select gcount(*) from tTableGramGroupAggr_tmp.tab'
# Test immediate aggregate.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab) from tTableGramGroupAggr_tmp.tab'
# Test lazy aggregate.
$casa_checktool ./tTableGramGroupAggr 'select gaggr(ab) from tTableGramGroupAggr_tmp.tab'
# Use a mix of it all.
$casa_checktool ./tTableGramGroupAggr 'select ab, gfirst(ab), glast(ab), gsum(ab), gaggr(ab) from tTableGramGroupAggr_tmp.tab'
# Count nr of rows per group (1 row per group).
$casa_checktool ./tTableGramGroupAggr 'select gcount() from tTableGramGroupAggr_tmp.tab groupby ab,ac,ad,ae,af'
# Use a non-aggregate column per group.
$casa_checktool ./tTableGramGroupAggr 'select ab from tTableGramGroupAggr_tmp.tab groupby ab'
# Use an immediate aggregate per group.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab) from tTableGramGroupAggr_tmp.tab groupby ab'
# Use a lazy aggregate per group.
$casa_checktool ./tTableGramGroupAggr 'select gaggr(ab) from tTableGramGroupAggr_tmp.tab groupby ab'
# Use a mix of it all.
$casa_checktool ./tTableGramGroupAggr 'select ab, gfirst(ab), glast(ab), gsum(ab), gaggr(ab) from tTableGramGroupAggr_tmp.tab where ab%2 = 0 groupby ab//4'
# Do the same for a selected subset.
$casa_checktool ./tTableGramGroupAggr 'select ab from tTableGramGroupAggr_tmp.tab where ab>2 groupby ab'
# Do the same and select the groups.
$casa_checktool ./tTableGramGroupAggr 'select ab from tTableGramGroupAggr_tmp.tab where ab>2 groupby ab having ab<8'
# Have multiple rows per group (non-aggregate uses the last value of a group).
$casa_checktool ./tTableGramGroupAggr 'select ab from tTableGramGroupAggr_tmp.tab groupby ab//2'
# Aggregate all rows.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab) from tTableGramGroupAggr_tmp.tab'
# Use aggregates for multiple groups.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab), gfirst(ab), glast(ab) from tTableGramGroupAggr_tmp.tab groupby ab//2'
# Combine aggregate and non-aggregate per group.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab), gfirst(ab), ab from tTableGramGroupAggr_tmp.tab groupby ab//2'
# Similar with a selection on group.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab), gfirst(ab), ab from tTableGramGroupAggr_tmp.tab groupby ab//2 having ab>3'
# Use SELECT columns in the other clauses.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab) as SAB, gfirst(ab) as FAB, ab from tTableGramGroupAggr_tmp.tab groupby ab//2 having (SAB-1)%8==0 orderby desc FAB'

# Do aggregation of arrays.
$casa_checktool ./tTableGramGroupAggr 'select gsum(arr1) from tTableGramGroupAggr_tmp.tab'
# Use a function in groupby.
$casa_checktool ./tTableGramGroupAggr 'select gsum(arr1) from tTableGramGroupAggr_tmp.tab groupby sum(arr1)'
# Use a lazy aggregate function.
$casa_checktool ./tTableGramGroupAggr 'select gmedian(arr1) from tTableGramGroupAggr_tmp.tab groupby sum(arr1)//3'
# Use immediate and lazy aggregate functions
$casa_checktool ./tTableGramGroupAggr 'select gsum(arr1), gmean(arr1), gmedian(arr2) as MED, gfractile(arr3,0.5) from tTableGramGroupAggr_tmp.tab groupby sum(arr1)//1000'

# Use aggregate that combines all arrays and gets row numbers.
$casa_checktool ./tTableGramGroupAggr 'select gaggr(arr1), sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab'
$casa_checktool ./tTableGramGroupAggr 'select sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab groupby ab'
$casa_checktool ./tTableGramGroupAggr 'select sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab groupby ab//4'
$casa_checktool ./tTableGramGroupAggr 'select gaggr(arr1), sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab where ab between 1 and 8'
$casa_checktool ./tTableGramGroupAggr 'select sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab where ab between 1 and 8 groupby ab'
$casa_checktool ./tTableGramGroupAggr 'select sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab where ab between 1 and 8 groupby ab//4'
$casa_checktool ./tTableGramGroupAggr 'select gaggr(arr1), sum(gaggr(arr1)), sum(growid()) from tTableGramGroupAggr_tmp.tab having all(shape(gaggr(ab)) = [10])'

# Use an aggregate in a HAVING.
$casa_checktool ./tTableGramGroupAggr 'select gsum(ab) from tTableGramGroupAggr_tmp.tab having gsum(ab)>0'

# Use a mix of referred and non-referred columns, lazy and immediate aggregates
# in all clauses.
$casa_checktool ./tTableGramGroupAggr 'select gsum(arr1), gmedian(arr2) as MED, gfractile(arr3,0.5), ab from tTableGramGroupAggr_tmp.tab where ab>1 and ac<10 groupby ab having MED%48==11 and ab>=0 orderby desc MED%96, ab asc'


# Remove the symlink
rm tTableGramGroupAggr
